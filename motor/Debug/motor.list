
motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009d68  08009d68  00019d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d8  0800a1d8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1e0  0800a1e0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a1e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb0  200001f0  0800a3d8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800a3d8  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee09  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000225f  00000000  00000000  0002f029  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  000320d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d79  00000000  00000000  00032e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b231  00000000  00000000  00056b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de6be  00000000  00000000  00061dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a8  00000000  00000000  001404f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009d50 	.word	0x08009d50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08009d50 	.word	0x08009d50

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <fill_sin_table>:
uint32_t tx_bytes = 0;
int started = 0;
uint8_t tx_buffer[MAX_TX];

void fill_sin_table()
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
    for(int i=0; i<360; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	e020      	b.n	8000ff6 <fill_sin_table+0x4e>
        sin_table[i] = sin(0.0174532925*i);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fac5 	bl	8000544 <__aeabi_i2d>
 8000fba:	a314      	add	r3, pc, #80	; (adr r3, 800100c <fill_sin_table+0x64>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fb2a 	bl	8000618 <__aeabi_dmul>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	ec44 3b17 	vmov	d7, r3, r4
 8000fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd0:	eef0 0a67 	vmov.f32	s1, s15
 8000fd4:	f005 fe3c 	bl	8006c50 <sin>
 8000fd8:	ec54 3b10 	vmov	r3, r4, d0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	4621      	mov	r1, r4
 8000fe0:	f7ff fe12 	bl	8000c08 <__aeabi_d2f>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <fill_sin_table+0x60>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	6019      	str	r1, [r3, #0]
    for(int i=0; i<360; i++)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000ffc:	dbda      	blt.n	8000fb4 <fill_sin_table+0xc>
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	bf00      	nop
 8001008:	20000270 	.word	0x20000270
 800100c:	a1fae711 	.word	0xa1fae711
 8001010:	3f91df46 	.word	0x3f91df46

08001014 <pid>:


void pid(){
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
	error = set_v - 4000.0/vel;
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <pid+0x164>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff faa2 	bl	8000568 <__aeabi_f2d>
 8001024:	4604      	mov	r4, r0
 8001026:	460d      	mov	r5, r1
 8001028:	4b54      	ldr	r3, [pc, #336]	; (800117c <pid+0x168>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa89 	bl	8000544 <__aeabi_i2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4951      	ldr	r1, [pc, #324]	; (8001180 <pid+0x16c>)
 800103c:	f7ff fc16 	bl	800086c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff f92e 	bl	80002a8 <__aeabi_dsub>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f7ff fd90 	bl	8000b78 <__aeabi_d2iz>
 8001058:	4602      	mov	r2, r0
 800105a:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <pid+0x170>)
 800105c:	601a      	str	r2, [r3, #0]
	float prop = error*kp;
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <pid+0x170>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <pid+0x174>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	edc7 7a02 	vstr	s15, [r7, #8]

	integral += error*ki;
 8001078:	4b42      	ldr	r3, [pc, #264]	; (8001184 <pid+0x170>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001084:	4b41      	ldr	r3, [pc, #260]	; (800118c <pid+0x178>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <pid+0x17c>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <pid+0x17c>)
 800109a:	edc3 7a00 	vstr	s15, [r3]
	if (integral > 500){
 800109e:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <pid+0x17c>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001194 <pid+0x180>
 80010a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	dd02      	ble.n	80010b8 <pid+0xa4>
		integral = 500;
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <pid+0x17c>)
 80010b4:	4a38      	ldr	r2, [pc, #224]	; (8001198 <pid+0x184>)
 80010b6:	601a      	str	r2, [r3, #0]
	}
	if (integral < -500){
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <pid+0x17c>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800119c <pid+0x188>
 80010c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	d502      	bpl.n	80010d2 <pid+0xbe>
		integral = -500;
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <pid+0x17c>)
 80010ce:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <pid+0x18c>)
 80010d0:	601a      	str	r2, [r3, #0]
	}

	float derivative = (error - prev_error)*kd;
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <pid+0x170>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <pid+0x190>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <pid+0x194>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f2:	edc7 7a01 	vstr	s15, [r7, #4]
	float res = prop + integral + derivative;
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <pid+0x17c>)
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001104:	ed97 7a01 	vldr	s14, [r7, #4]
 8001108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110c:	edc7 7a03 	vstr	s15, [r7, #12]

	prev_error = error;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <pid+0x170>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <pid+0x190>)
 800111e:	edc3 7a00 	vstr	s15, [r3]
//	if (error == 0) // completely kill
//	{
//		return 0;
//	}
	res = (res+500)/1000.0;
 8001122:	edd7 7a03 	vldr	s15, [r7, #12]
 8001126:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001194 <pid+0x180>
 800112a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800112e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80011ac <pid+0x198>
 8001132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001136:	edc7 7a03 	vstr	s15, [r7, #12]
	if (res < 0){
 800113a:	edd7 7a03 	vldr	s15, [r7, #12]
 800113e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d503      	bpl.n	8001150 <pid+0x13c>
		res = 0; // left
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e00b      	b.n	8001168 <pid+0x154>
	}
	else if (res > 1)
 8001150:	edd7 7a03 	vldr	s15, [r7, #12]
 8001154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	dd02      	ble.n	8001168 <pid+0x154>
	{
		res = 1.0; // right
 8001162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001166:	60fb      	str	r3, [r7, #12]
	}
	m = res;
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <pid+0x19c>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6013      	str	r3, [r2, #0]
//	m = 0.4;
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	bf00      	nop
 8001178:	20000010 	.word	0x20000010
 800117c:	20000238 	.word	0x20000238
 8001180:	40af4000 	.word	0x40af4000
 8001184:	2000022c 	.word	0x2000022c
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000008 	.word	0x20000008
 8001190:	20000224 	.word	0x20000224
 8001194:	43fa0000 	.word	0x43fa0000
 8001198:	43fa0000 	.word	0x43fa0000
 800119c:	c3fa0000 	.word	0xc3fa0000
 80011a0:	c3fa0000 	.word	0xc3fa0000
 80011a4:	20000228 	.word	0x20000228
 80011a8:	20000220 	.word	0x20000220
 80011ac:	447a0000 	.word	0x447a0000
 80011b0:	2000021c 	.word	0x2000021c

080011b4 <cal_pwms>:

void cal_pwms()
{
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	af00      	add	r7, sp, #0

	if (angle < 0)
 80011b8:	4b9e      	ldr	r3, [pc, #632]	; (8001434 <cal_pwms+0x280>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
	{
		angle = 360 + angle;
	}

	if (angle > 360)
 80011bc:	4b9d      	ldr	r3, [pc, #628]	; (8001434 <cal_pwms+0x280>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80011c6:	d907      	bls.n	80011d8 <cal_pwms+0x24>
	{
		angle = angle - 360;
 80011c8:	4b9a      	ldr	r3, [pc, #616]	; (8001434 <cal_pwms+0x280>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b97      	ldr	r3, [pc, #604]	; (8001434 <cal_pwms+0x280>)
 80011d6:	801a      	strh	r2, [r3, #0]
	}


	if (angle <= 60)
 80011d8:	4b96      	ldr	r3, [pc, #600]	; (8001434 <cal_pwms+0x280>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2b3c      	cmp	r3, #60	; 0x3c
 80011e0:	d80d      	bhi.n	80011fe <cal_pwms+0x4a>
	{
		sector = 1;
 80011e2:	4b95      	ldr	r3, [pc, #596]	; (8001438 <cal_pwms+0x284>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
		angle_temp = angle;
 80011e8:	4b92      	ldr	r3, [pc, #584]	; (8001434 <cal_pwms+0x280>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f6:	4b91      	ldr	r3, [pc, #580]	; (800143c <cal_pwms+0x288>)
 80011f8:	edc3 7a00 	vstr	s15, [r3]
 80011fc:	e05f      	b.n	80012be <cal_pwms+0x10a>
	}
	else if (angle <= 120)
 80011fe:	4b8d      	ldr	r3, [pc, #564]	; (8001434 <cal_pwms+0x280>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	2b78      	cmp	r3, #120	; 0x78
 8001206:	d80e      	bhi.n	8001226 <cal_pwms+0x72>
	{
		sector = 2;
 8001208:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <cal_pwms+0x284>)
 800120a:	2202      	movs	r2, #2
 800120c:	701a      	strb	r2, [r3, #0]
		angle_temp = angle-60;
 800120e:	4b89      	ldr	r3, [pc, #548]	; (8001434 <cal_pwms+0x280>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	3b3c      	subs	r3, #60	; 0x3c
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121e:	4b87      	ldr	r3, [pc, #540]	; (800143c <cal_pwms+0x288>)
 8001220:	edc3 7a00 	vstr	s15, [r3]
 8001224:	e04b      	b.n	80012be <cal_pwms+0x10a>
	}
	else if (angle <= 180)
 8001226:	4b83      	ldr	r3, [pc, #524]	; (8001434 <cal_pwms+0x280>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	2bb4      	cmp	r3, #180	; 0xb4
 800122e:	d80e      	bhi.n	800124e <cal_pwms+0x9a>
	{
		sector = 3;
 8001230:	4b81      	ldr	r3, [pc, #516]	; (8001438 <cal_pwms+0x284>)
 8001232:	2203      	movs	r2, #3
 8001234:	701a      	strb	r2, [r3, #0]
		angle_temp = angle-120;
 8001236:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <cal_pwms+0x280>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b78      	subs	r3, #120	; 0x78
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	4b7d      	ldr	r3, [pc, #500]	; (800143c <cal_pwms+0x288>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
 800124c:	e037      	b.n	80012be <cal_pwms+0x10a>
	}
	else if (angle <= 240)
 800124e:	4b79      	ldr	r3, [pc, #484]	; (8001434 <cal_pwms+0x280>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	2bf0      	cmp	r3, #240	; 0xf0
 8001256:	d80e      	bhi.n	8001276 <cal_pwms+0xc2>
	{
		sector = 4;
 8001258:	4b77      	ldr	r3, [pc, #476]	; (8001438 <cal_pwms+0x284>)
 800125a:	2204      	movs	r2, #4
 800125c:	701a      	strb	r2, [r3, #0]
		angle_temp = angle-180;
 800125e:	4b75      	ldr	r3, [pc, #468]	; (8001434 <cal_pwms+0x280>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	3bb4      	subs	r3, #180	; 0xb4
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126e:	4b73      	ldr	r3, [pc, #460]	; (800143c <cal_pwms+0x288>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
 8001274:	e023      	b.n	80012be <cal_pwms+0x10a>
	}
	else if (angle <= 300)
 8001276:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <cal_pwms+0x280>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001280:	d80e      	bhi.n	80012a0 <cal_pwms+0xec>
	{
		sector = 5;
 8001282:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <cal_pwms+0x284>)
 8001284:	2205      	movs	r2, #5
 8001286:	701a      	strb	r2, [r3, #0]
		angle_temp = angle-240;
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <cal_pwms+0x280>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	3bf0      	subs	r3, #240	; 0xf0
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	4b68      	ldr	r3, [pc, #416]	; (800143c <cal_pwms+0x288>)
 800129a:	edc3 7a00 	vstr	s15, [r3]
 800129e:	e00e      	b.n	80012be <cal_pwms+0x10a>
	}
	else
	{
		sector = 6;
 80012a0:	4b65      	ldr	r3, [pc, #404]	; (8001438 <cal_pwms+0x284>)
 80012a2:	2206      	movs	r2, #6
 80012a4:	701a      	strb	r2, [r3, #0]
		angle_temp = angle-300;
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <cal_pwms+0x280>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	4b60      	ldr	r3, [pc, #384]	; (800143c <cal_pwms+0x288>)
 80012ba:	edc3 7a00 	vstr	s15, [r3]
	}

	t1 = T*m*sin_table[(int)(60-angle_temp)];
 80012be:	4b60      	ldr	r3, [pc, #384]	; (8001440 <cal_pwms+0x28c>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ca:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <cal_pwms+0x290>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <cal_pwms+0x288>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001448 <cal_pwms+0x294>
 80012de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e6:	ee17 3a90 	vmov	r3, s15
 80012ea:	4a58      	ldr	r2, [pc, #352]	; (800144c <cal_pwms+0x298>)
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fc:	ee17 2a90 	vmov	r2, s15
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <cal_pwms+0x29c>)
 8001302:	601a      	str	r2, [r3, #0]
	t2 = T*m*sin_table[(int)angle_temp];
 8001304:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <cal_pwms+0x28c>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001310:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <cal_pwms+0x290>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131a:	4b48      	ldr	r3, [pc, #288]	; (800143c <cal_pwms+0x288>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001324:	ee17 3a90 	vmov	r3, s15
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <cal_pwms+0x298>)
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133a:	ee17 2a90 	vmov	r2, s15
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <cal_pwms+0x2a0>)
 8001340:	601a      	str	r2, [r3, #0]

	t0 = T-t1-t2;
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <cal_pwms+0x28c>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <cal_pwms+0x29c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	1ad2      	subs	r2, r2, r3
 800134e:	4b41      	ldr	r3, [pc, #260]	; (8001454 <cal_pwms+0x2a0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4a40      	ldr	r2, [pc, #256]	; (8001458 <cal_pwms+0x2a4>)
 8001356:	6013      	str	r3, [r2, #0]

	switch (sector)
 8001358:	4b37      	ldr	r3, [pc, #220]	; (8001438 <cal_pwms+0x284>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	2b05      	cmp	r3, #5
 8001362:	f200 8244 	bhi.w	80017ee <cal_pwms+0x63a>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <cal_pwms+0x1b8>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	08001385 	.word	0x08001385
 8001370:	0800146d 	.word	0x0800146d
 8001374:	0800151b 	.word	0x0800151b
 8001378:	080015c9 	.word	0x080015c9
 800137c:	08001677 	.word	0x08001677
 8001380:	08001741 	.word	0x08001741
	{
		case 1:
	    	u = t1 + t2 +0.5*t0;
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <cal_pwms+0x29c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <cal_pwms+0x2a0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4413      	add	r3, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8c8 	bl	8000524 <__aeabi_ui2d>
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <cal_pwms+0x2a4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8c1 	bl	8000524 <__aeabi_ui2d>
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <cal_pwms+0x2a8>)
 80013a8:	f7ff f936 	bl	8000618 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7fe ff7a 	bl	80002ac <__adddf3>
 80013b8:	4603      	mov	r3, r0
 80013ba:	460c      	mov	r4, r1
 80013bc:	4618      	mov	r0, r3
 80013be:	4621      	mov	r1, r4
 80013c0:	f7ff fc02 	bl	8000bc8 <__aeabi_d2uiz>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <cal_pwms+0x2ac>)
 80013c8:	601a      	str	r2, [r3, #0]
	    	v = t2 + 0.5*t0;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <cal_pwms+0x2a0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8a8 	bl	8000524 <__aeabi_ui2d>
 80013d4:	4604      	mov	r4, r0
 80013d6:	460d      	mov	r5, r1
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <cal_pwms+0x2a4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8a1 	bl	8000524 <__aeabi_ui2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <cal_pwms+0x2a8>)
 80013e8:	f7ff f916 	bl	8000618 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f7fe ff5a 	bl	80002ac <__adddf3>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	4618      	mov	r0, r3
 80013fe:	4621      	mov	r1, r4
 8001400:	f7ff fbe2 	bl	8000bc8 <__aeabi_d2uiz>
 8001404:	4602      	mov	r2, r0
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <cal_pwms+0x2b0>)
 8001408:	601a      	str	r2, [r3, #0]
	    	w = 0.5*t0;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <cal_pwms+0x2a4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f888 	bl	8000524 <__aeabi_ui2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <cal_pwms+0x2a8>)
 800141a:	f7ff f8fd 	bl	8000618 <__aeabi_dmul>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	4618      	mov	r0, r3
 8001424:	4621      	mov	r1, r4
 8001426:	f7ff fbcf 	bl	8000bc8 <__aeabi_d2uiz>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <cal_pwms+0x2b4>)
 800142e:	601a      	str	r2, [r3, #0]
	      break;
 8001430:	e1e6      	b.n	8001800 <cal_pwms+0x64c>
 8001432:	bf00      	nop
 8001434:	20000214 	.word	0x20000214
 8001438:	20000004 	.word	0x20000004
 800143c:	20000218 	.word	0x20000218
 8001440:	20000000 	.word	0x20000000
 8001444:	2000021c 	.word	0x2000021c
 8001448:	42700000 	.word	0x42700000
 800144c:	20000270 	.word	0x20000270
 8001450:	20000254 	.word	0x20000254
 8001454:	20000258 	.word	0x20000258
 8001458:	20000250 	.word	0x20000250
 800145c:	3fe00000 	.word	0x3fe00000
 8001460:	20000244 	.word	0x20000244
 8001464:	20000248 	.word	0x20000248
 8001468:	2000024c 	.word	0x2000024c
	    case 2:
	    	u = t1 + 0.5*t0;
 800146c:	4bad      	ldr	r3, [pc, #692]	; (8001724 <cal_pwms+0x570>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f857 	bl	8000524 <__aeabi_ui2d>
 8001476:	4604      	mov	r4, r0
 8001478:	460d      	mov	r5, r1
 800147a:	4bab      	ldr	r3, [pc, #684]	; (8001728 <cal_pwms+0x574>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f850 	bl	8000524 <__aeabi_ui2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4ba8      	ldr	r3, [pc, #672]	; (800172c <cal_pwms+0x578>)
 800148a:	f7ff f8c5 	bl	8000618 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7fe ff09 	bl	80002ac <__adddf3>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	4618      	mov	r0, r3
 80014a0:	4621      	mov	r1, r4
 80014a2:	f7ff fb91 	bl	8000bc8 <__aeabi_d2uiz>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4ba1      	ldr	r3, [pc, #644]	; (8001730 <cal_pwms+0x57c>)
 80014aa:	601a      	str	r2, [r3, #0]
	    	v = t1 + t2 + 0.5*t0;
 80014ac:	4b9d      	ldr	r3, [pc, #628]	; (8001724 <cal_pwms+0x570>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4ba0      	ldr	r3, [pc, #640]	; (8001734 <cal_pwms+0x580>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f834 	bl	8000524 <__aeabi_ui2d>
 80014bc:	4604      	mov	r4, r0
 80014be:	460d      	mov	r5, r1
 80014c0:	4b99      	ldr	r3, [pc, #612]	; (8001728 <cal_pwms+0x574>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f82d 	bl	8000524 <__aeabi_ui2d>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b97      	ldr	r3, [pc, #604]	; (800172c <cal_pwms+0x578>)
 80014d0:	f7ff f8a2 	bl	8000618 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7fe fee6 	bl	80002ac <__adddf3>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	4618      	mov	r0, r3
 80014e6:	4621      	mov	r1, r4
 80014e8:	f7ff fb6e 	bl	8000bc8 <__aeabi_d2uiz>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <cal_pwms+0x584>)
 80014f0:	601a      	str	r2, [r3, #0]
	    	w = 0.5*t0;
 80014f2:	4b8d      	ldr	r3, [pc, #564]	; (8001728 <cal_pwms+0x574>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f814 	bl	8000524 <__aeabi_ui2d>
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b8a      	ldr	r3, [pc, #552]	; (800172c <cal_pwms+0x578>)
 8001502:	f7ff f889 	bl	8000618 <__aeabi_dmul>
 8001506:	4603      	mov	r3, r0
 8001508:	460c      	mov	r4, r1
 800150a:	4618      	mov	r0, r3
 800150c:	4621      	mov	r1, r4
 800150e:	f7ff fb5b 	bl	8000bc8 <__aeabi_d2uiz>
 8001512:	4602      	mov	r2, r0
 8001514:	4b89      	ldr	r3, [pc, #548]	; (800173c <cal_pwms+0x588>)
 8001516:	601a      	str	r2, [r3, #0]
	      break;
 8001518:	e172      	b.n	8001800 <cal_pwms+0x64c>
	    case 3:
	    	u = 0.5*t0;
 800151a:	4b83      	ldr	r3, [pc, #524]	; (8001728 <cal_pwms+0x574>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f800 	bl	8000524 <__aeabi_ui2d>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <cal_pwms+0x578>)
 800152a:	f7ff f875 	bl	8000618 <__aeabi_dmul>
 800152e:	4603      	mov	r3, r0
 8001530:	460c      	mov	r4, r1
 8001532:	4618      	mov	r0, r3
 8001534:	4621      	mov	r1, r4
 8001536:	f7ff fb47 	bl	8000bc8 <__aeabi_d2uiz>
 800153a:	4602      	mov	r2, r0
 800153c:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <cal_pwms+0x57c>)
 800153e:	601a      	str	r2, [r3, #0]
	    	v = t1 + t2 + 0.5*t0;
 8001540:	4b78      	ldr	r3, [pc, #480]	; (8001724 <cal_pwms+0x570>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <cal_pwms+0x580>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4413      	add	r3, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffea 	bl	8000524 <__aeabi_ui2d>
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	4b74      	ldr	r3, [pc, #464]	; (8001728 <cal_pwms+0x574>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffe3 	bl	8000524 <__aeabi_ui2d>
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b72      	ldr	r3, [pc, #456]	; (800172c <cal_pwms+0x578>)
 8001564:	f7ff f858 	bl	8000618 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7fe fe9c 	bl	80002ac <__adddf3>
 8001574:	4603      	mov	r3, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4618      	mov	r0, r3
 800157a:	4621      	mov	r1, r4
 800157c:	f7ff fb24 	bl	8000bc8 <__aeabi_d2uiz>
 8001580:	4602      	mov	r2, r0
 8001582:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <cal_pwms+0x584>)
 8001584:	601a      	str	r2, [r3, #0]
	    	w = t2 + 0.5*t0;
 8001586:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <cal_pwms+0x580>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffca 	bl	8000524 <__aeabi_ui2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b64      	ldr	r3, [pc, #400]	; (8001728 <cal_pwms+0x574>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffc3 	bl	8000524 <__aeabi_ui2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <cal_pwms+0x578>)
 80015a4:	f7ff f838 	bl	8000618 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe7c 	bl	80002ac <__adddf3>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	4618      	mov	r0, r3
 80015ba:	4621      	mov	r1, r4
 80015bc:	f7ff fb04 	bl	8000bc8 <__aeabi_d2uiz>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b5e      	ldr	r3, [pc, #376]	; (800173c <cal_pwms+0x588>)
 80015c4:	601a      	str	r2, [r3, #0]
	      break;
 80015c6:	e11b      	b.n	8001800 <cal_pwms+0x64c>
	    case 4:
	    	u = 0.5*t0;
 80015c8:	4b57      	ldr	r3, [pc, #348]	; (8001728 <cal_pwms+0x574>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffa9 	bl	8000524 <__aeabi_ui2d>
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b55      	ldr	r3, [pc, #340]	; (800172c <cal_pwms+0x578>)
 80015d8:	f7ff f81e 	bl	8000618 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4618      	mov	r0, r3
 80015e2:	4621      	mov	r1, r4
 80015e4:	f7ff faf0 	bl	8000bc8 <__aeabi_d2uiz>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b51      	ldr	r3, [pc, #324]	; (8001730 <cal_pwms+0x57c>)
 80015ec:	601a      	str	r2, [r3, #0]
	    	v = t1 + 0.5*t0;
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <cal_pwms+0x570>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff96 	bl	8000524 <__aeabi_ui2d>
 80015f8:	4604      	mov	r4, r0
 80015fa:	460d      	mov	r5, r1
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <cal_pwms+0x574>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff8f 	bl	8000524 <__aeabi_ui2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b48      	ldr	r3, [pc, #288]	; (800172c <cal_pwms+0x578>)
 800160c:	f7ff f804 	bl	8000618 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7fe fe48 	bl	80002ac <__adddf3>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	4618      	mov	r0, r3
 8001622:	4621      	mov	r1, r4
 8001624:	f7ff fad0 	bl	8000bc8 <__aeabi_d2uiz>
 8001628:	4602      	mov	r2, r0
 800162a:	4b43      	ldr	r3, [pc, #268]	; (8001738 <cal_pwms+0x584>)
 800162c:	601a      	str	r2, [r3, #0]
	    	w = t1 + t2 + 0.5*t0;
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <cal_pwms+0x570>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <cal_pwms+0x580>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_ui2d>
 800163e:	4604      	mov	r4, r0
 8001640:	460d      	mov	r5, r1
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <cal_pwms+0x574>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff6c 	bl	8000524 <__aeabi_ui2d>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <cal_pwms+0x578>)
 8001652:	f7fe ffe1 	bl	8000618 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7fe fe25 	bl	80002ac <__adddf3>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	4618      	mov	r0, r3
 8001668:	4621      	mov	r1, r4
 800166a:	f7ff faad 	bl	8000bc8 <__aeabi_d2uiz>
 800166e:	4602      	mov	r2, r0
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <cal_pwms+0x588>)
 8001672:	601a      	str	r2, [r3, #0]
	      break;
 8001674:	e0c4      	b.n	8001800 <cal_pwms+0x64c>
	    case 5:
	    	u = t2 + 0.5*t0;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <cal_pwms+0x580>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff52 	bl	8000524 <__aeabi_ui2d>
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <cal_pwms+0x574>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff4b 	bl	8000524 <__aeabi_ui2d>
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <cal_pwms+0x578>)
 8001694:	f7fe ffc0 	bl	8000618 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe fe04 	bl	80002ac <__adddf3>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	4618      	mov	r0, r3
 80016aa:	4621      	mov	r1, r4
 80016ac:	f7ff fa8c 	bl	8000bc8 <__aeabi_d2uiz>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <cal_pwms+0x57c>)
 80016b4:	601a      	str	r2, [r3, #0]
	    	v = 0.5*t0;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <cal_pwms+0x574>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff32 	bl	8000524 <__aeabi_ui2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <cal_pwms+0x578>)
 80016c6:	f7fe ffa7 	bl	8000618 <__aeabi_dmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	460c      	mov	r4, r1
 80016ce:	4618      	mov	r0, r3
 80016d0:	4621      	mov	r1, r4
 80016d2:	f7ff fa79 	bl	8000bc8 <__aeabi_d2uiz>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <cal_pwms+0x584>)
 80016da:	601a      	str	r2, [r3, #0]
	    	w = t1 + t2 + 0.5*t0;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <cal_pwms+0x570>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <cal_pwms+0x580>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff1c 	bl	8000524 <__aeabi_ui2d>
 80016ec:	4604      	mov	r4, r0
 80016ee:	460d      	mov	r5, r1
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <cal_pwms+0x574>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff15 	bl	8000524 <__aeabi_ui2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <cal_pwms+0x578>)
 8001700:	f7fe ff8a 	bl	8000618 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe fdce 	bl	80002ac <__adddf3>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f7ff fa56 	bl	8000bc8 <__aeabi_d2uiz>
 800171c:	4602      	mov	r2, r0
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <cal_pwms+0x588>)
 8001720:	601a      	str	r2, [r3, #0]
	      break;
 8001722:	e06d      	b.n	8001800 <cal_pwms+0x64c>
 8001724:	20000254 	.word	0x20000254
 8001728:	20000250 	.word	0x20000250
 800172c:	3fe00000 	.word	0x3fe00000
 8001730:	20000244 	.word	0x20000244
 8001734:	20000258 	.word	0x20000258
 8001738:	20000248 	.word	0x20000248
 800173c:	2000024c 	.word	0x2000024c
	    case 6:
	    	u = t1 + t2 + 0.5*t0;
 8001740:	4b3e      	ldr	r3, [pc, #248]	; (800183c <cal_pwms+0x688>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <cal_pwms+0x68c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4413      	add	r3, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe feea 	bl	8000524 <__aeabi_ui2d>
 8001750:	4604      	mov	r4, r0
 8001752:	460d      	mov	r5, r1
 8001754:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <cal_pwms+0x690>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fee3 	bl	8000524 <__aeabi_ui2d>
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <cal_pwms+0x694>)
 8001764:	f7fe ff58 	bl	8000618 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7fe fd9c 	bl	80002ac <__adddf3>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	4618      	mov	r0, r3
 800177a:	4621      	mov	r1, r4
 800177c:	f7ff fa24 	bl	8000bc8 <__aeabi_d2uiz>
 8001780:	4602      	mov	r2, r0
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <cal_pwms+0x698>)
 8001784:	601a      	str	r2, [r3, #0]
	    	v = 0.5*t0;
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <cal_pwms+0x690>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feca 	bl	8000524 <__aeabi_ui2d>
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <cal_pwms+0x694>)
 8001796:	f7fe ff3f 	bl	8000618 <__aeabi_dmul>
 800179a:	4603      	mov	r3, r0
 800179c:	460c      	mov	r4, r1
 800179e:	4618      	mov	r0, r3
 80017a0:	4621      	mov	r1, r4
 80017a2:	f7ff fa11 	bl	8000bc8 <__aeabi_d2uiz>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <cal_pwms+0x69c>)
 80017aa:	601a      	str	r2, [r3, #0]
	    	w = t1 + 0.5*t0;
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <cal_pwms+0x688>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe feb7 	bl	8000524 <__aeabi_ui2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <cal_pwms+0x690>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feb0 	bl	8000524 <__aeabi_ui2d>
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <cal_pwms+0x694>)
 80017ca:	f7fe ff25 	bl	8000618 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4620      	mov	r0, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	f7fe fd69 	bl	80002ac <__adddf3>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	4618      	mov	r0, r3
 80017e0:	4621      	mov	r1, r4
 80017e2:	f7ff f9f1 	bl	8000bc8 <__aeabi_d2uiz>
 80017e6:	4602      	mov	r2, r0
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <cal_pwms+0x6a0>)
 80017ea:	601a      	str	r2, [r3, #0]
	      break;
 80017ec:	e008      	b.n	8001800 <cal_pwms+0x64c>
	    default:
	    	u = 0;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <cal_pwms+0x698>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
	    	v = 0;
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <cal_pwms+0x69c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
	    	w = 0;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <cal_pwms+0x6a0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
	}
	if (fault == 1)
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <cal_pwms+0x6a4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d108      	bne.n	800181a <cal_pwms+0x666>
	{
    	u = 0;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <cal_pwms+0x698>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
    	v = 0;
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <cal_pwms+0x69c>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
    	w = 0;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <cal_pwms+0x6a0>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u);
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <cal_pwms+0x6a8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <cal_pwms+0x698>)
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, v);
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <cal_pwms+0x6a8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a09      	ldr	r2, [pc, #36]	; (8001850 <cal_pwms+0x69c>)
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, w);
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <cal_pwms+0x6a8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <cal_pwms+0x6a0>)
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001838:	bf00      	nop
 800183a:	bdb0      	pop	{r4, r5, r7, pc}
 800183c:	20000254 	.word	0x20000254
 8001840:	20000258 	.word	0x20000258
 8001844:	20000250 	.word	0x20000250
 8001848:	3fe00000 	.word	0x3fe00000
 800184c:	20000244 	.word	0x20000244
 8001850:	20000248 	.word	0x20000248
 8001854:	2000024c 	.word	0x2000024c
 8001858:	20000240 	.word	0x20000240
 800185c:	20000d18 	.word	0x20000d18

08001860 <start>:


void start(int dir)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	started = 0;
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <start+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001874:	4835      	ldr	r0, [pc, #212]	; (800194c <start+0xec>)
 8001876:	f002 fdb9 	bl	80043ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Relay0_GPIO_Port, Relay0_Pin, 1);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001880:	4832      	ldr	r0, [pc, #200]	; (800194c <start+0xec>)
 8001882:	f002 fdb3 	bl	80043ec <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8001886:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800188a:	f001 fc1d 	bl	80030c8 <HAL_Delay>
	HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, 1);
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001894:	482d      	ldr	r0, [pc, #180]	; (800194c <start+0xec>)
 8001896:	f002 fda9 	bl	80043ec <HAL_GPIO_WritePin>
//	{
//		__HAL_TIM_SET_COUNTER(&htim8, 1800);
//	}
//	HAL_Delay(100);

	int a = HAL_GPIO_ReadPin(hall_0_GPIO_Port, hall_0_Pin);
 800189a:	2101      	movs	r1, #1
 800189c:	482c      	ldr	r0, [pc, #176]	; (8001950 <start+0xf0>)
 800189e:	f002 fd8d 	bl	80043bc <HAL_GPIO_ReadPin>
 80018a2:	4603      	mov	r3, r0
 80018a4:	617b      	str	r3, [r7, #20]
	int b = HAL_GPIO_ReadPin(hall_1_GPIO_Port, hall_1_Pin);
 80018a6:	2140      	movs	r1, #64	; 0x40
 80018a8:	482a      	ldr	r0, [pc, #168]	; (8001954 <start+0xf4>)
 80018aa:	f002 fd87 	bl	80043bc <HAL_GPIO_ReadPin>
 80018ae:	4603      	mov	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]
	int c = HAL_GPIO_ReadPin(hall_2_GPIO_Port, hall_2_Pin);
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	4827      	ldr	r0, [pc, #156]	; (8001954 <start+0xf4>)
 80018b6:	f002 fd81 	bl	80043bc <HAL_GPIO_ReadPin>
 80018ba:	4603      	mov	r3, r0
 80018bc:	60fb      	str	r3, [r7, #12]

	if (a && c){
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <start+0x72>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <start+0x72>
		angle_rotor = 30;
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <start+0xf8>)
 80018cc:	221e      	movs	r2, #30
 80018ce:	801a      	strh	r2, [r3, #0]
 80018d0:	e032      	b.n	8001938 <start+0xd8>
	}
	else if (!b && !c){
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d106      	bne.n	80018e6 <start+0x86>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <start+0x86>
		angle_rotor = 90;
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <start+0xf8>)
 80018e0:	225a      	movs	r2, #90	; 0x5a
 80018e2:	801a      	strh	r2, [r3, #0]
 80018e4:	e028      	b.n	8001938 <start+0xd8>
	}
	else if (a && b){
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <start+0x9a>
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <start+0x9a>
		angle_rotor = 150;
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <start+0xf8>)
 80018f4:	2296      	movs	r2, #150	; 0x96
 80018f6:	801a      	strh	r2, [r3, #0]
 80018f8:	e01e      	b.n	8001938 <start+0xd8>
	}
	else if (!a && !c){
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d106      	bne.n	800190e <start+0xae>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <start+0xae>
		angle_rotor = 210;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <start+0xf8>)
 8001908:	22d2      	movs	r2, #210	; 0xd2
 800190a:	801a      	strh	r2, [r3, #0]
 800190c:	e014      	b.n	8001938 <start+0xd8>
	}
	else if (b && c){
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <start+0xc4>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <start+0xc4>
		angle_rotor = 270;
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <start+0xf8>)
 800191c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001920:	801a      	strh	r2, [r3, #0]
 8001922:	e009      	b.n	8001938 <start+0xd8>
	}
	else if (!a && !b){
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <start+0xd8>
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <start+0xd8>
		angle_rotor = 330;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <start+0xf8>)
 8001932:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001936:	801a      	strh	r2, [r3, #0]
	}


	started = 1;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <start+0xe8>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
//		m+=0.1;
//		HAL_Delay(1);
//	}
//	m = 0;
//	started = 1;
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000260 	.word	0x20000260
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40021000 	.word	0x40021000
 8001954:	40020800 	.word	0x40020800
 8001958:	20000216 	.word	0x20000216

0800195c <myisr>:

void myisr()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	if (started)
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <myisr+0x24>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <myisr+0x1e>
	{
//		angle_rotor =(uint16_t)__HAL_TIM_GET_COUNTER(&htim8)/6.66666666666666;

		angle = angle_rotor + 90;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <myisr+0x28>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	335a      	adds	r3, #90	; 0x5a
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <myisr+0x2c>)
 8001974:	801a      	strh	r2, [r3, #0]
		cal_pwms();
 8001976:	f7ff fc1d 	bl	80011b4 <cal_pwms>
	}
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000260 	.word	0x20000260
 8001984:	20000216 	.word	0x20000216
 8001988:	20000214 	.word	0x20000214

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	fill_sin_table();
 8001992:	f7ff fb09 	bl	8000fa8 <fill_sin_table>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f001 fb55 	bl	8003044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f8c9 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 fb99 	bl	80020d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80019a2:	f000 fa97 	bl	8001ed4 <MX_TIM1_Init>
  MX_UART5_Init();
 80019a6:	f000 fb6b 	bl	8002080 <MX_UART5_Init>
  MX_ADC1_Init();
 80019aa:	f000 f931 	bl	8001c10 <MX_ADC1_Init>
  MX_ADC2_Init();
 80019ae:	f000 f9bd 	bl	8001d2c <MX_ADC2_Init>
  MX_ADC3_Init();
 80019b2:	f000 fa25 	bl	8001e00 <MX_ADC3_Init>
  // arr = freq
  // ccr = duty



  HAL_TIM_Base_Start_IT(&htim1);
 80019b6:	4850      	ldr	r0, [pc, #320]	; (8001af8 <main+0x16c>)
 80019b8:	f003 fa59 	bl	8004e6e <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019bc:	2100      	movs	r1, #0
 80019be:	484e      	ldr	r0, [pc, #312]	; (8001af8 <main+0x16c>)
 80019c0:	f003 fb68 	bl	8005094 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80019c4:	2100      	movs	r1, #0
 80019c6:	484c      	ldr	r0, [pc, #304]	; (8001af8 <main+0x16c>)
 80019c8:	f004 f9bf 	bl	8005d4a <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019cc:	2104      	movs	r1, #4
 80019ce:	484a      	ldr	r0, [pc, #296]	; (8001af8 <main+0x16c>)
 80019d0:	f003 fb60 	bl	8005094 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80019d4:	2104      	movs	r1, #4
 80019d6:	4848      	ldr	r0, [pc, #288]	; (8001af8 <main+0x16c>)
 80019d8:	f004 f9b7 	bl	8005d4a <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019dc:	2108      	movs	r1, #8
 80019de:	4846      	ldr	r0, [pc, #280]	; (8001af8 <main+0x16c>)
 80019e0:	f003 fb58 	bl	8005094 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80019e4:	2108      	movs	r1, #8
 80019e6:	4844      	ldr	r0, [pc, #272]	; (8001af8 <main+0x16c>)
 80019e8:	f004 f9af 	bl	8005d4a <HAL_TIMEx_PWMN_Start>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 80019ec:	210c      	movs	r1, #12
 80019ee:	4842      	ldr	r0, [pc, #264]	; (8001af8 <main+0x16c>)
 80019f0:	f003 fa96 	bl	8004f20 <HAL_TIM_OC_Start_IT>


  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <main+0x16c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2200      	movs	r2, #0
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <main+0x16c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a04:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <main+0x16c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	63da      	str	r2, [r3, #60]	; 0x3c


//  HAL_TIM_Base_Start(&htim8);  // encoder timer
//  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);

  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001a0c:	483b      	ldr	r0, [pc, #236]	; (8001afc <main+0x170>)
 8001a0e:	f001 ff4d 	bl	80038ac <HAL_ADCEx_InjectedStart_IT>

//  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc, 2);
//  HAL_ADC_Start_IT(&hadc2);

  HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001a12:	483b      	ldr	r0, [pc, #236]	; (8001b00 <main+0x174>)
 8001a14:	f001 ff4a 	bl	80038ac <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc3);
 8001a18:	483a      	ldr	r0, [pc, #232]	; (8001b04 <main+0x178>)
 8001a1a:	f001 ff47 	bl	80038ac <HAL_ADCEx_InjectedStart_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_TIM_SET_PRESCALER(&htim1, prescaler);
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <main+0x17c>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <main+0x16c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28

  start(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f7ff ff18 	bl	8001860 <start>
  while (1)
  {

	  counter+=1;
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <main+0x180>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a35      	ldr	r2, [pc, #212]	; (8001b0c <main+0x180>)
 8001a38:	6013      	str	r3, [r2, #0]
	  if (counter < 45000)
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <main+0x180>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d80b      	bhi.n	8001a5e <main+0xd2>
	  {
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4c:	4830      	ldr	r0, [pc, #192]	; (8001b10 <main+0x184>)
 8001a4e:	f002 fccd 	bl	80043ec <HAL_GPIO_WritePin>
		  if (counter == 42000)
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <main+0x180>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	e005      	b.n	8001a6a <main+0xde>

		  }
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a64:	482a      	ldr	r0, [pc, #168]	; (8001b10 <main+0x184>)
 8001a66:	f002 fcc1 	bl	80043ec <HAL_GPIO_WritePin>
	  }
	  if (counter > 90000)
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <main+0x180>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <main+0x188>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d902      	bls.n	8001a7a <main+0xee>
	  {
		  counter = 0;
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <main+0x180>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
	  }

	  int val = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4826      	ldr	r0, [pc, #152]	; (8001b18 <main+0x18c>)
 8001a7e:	f002 fc9d 	bl	80043bc <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	657b      	str	r3, [r7, #84]	; 0x54
	  if (val != last_state)
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <main+0x190>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d0cf      	beq.n	8001a30 <main+0xa4>
	  {
		  if (fault == 1)  // fault happened
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <main+0x194>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10f      	bne.n	8001ab8 <main+0x12c>
		  {
			  if (HAL_GPIO_ReadPin(VFO_GPIO_Port, VFO_Pin))  // no fault now
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4822      	ldr	r0, [pc, #136]	; (8001b24 <main+0x198>)
 8001a9c:	f002 fc8e 	bl	80043bc <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <main+0x12c>
				{
				  fault = 0;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <main+0x194>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
	      		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <main+0x184>)
 8001ab4:	f002 fc9a 	bl	80043ec <HAL_GPIO_WritePin>
				}
		  }
		  if (val)
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d017      	beq.n	8001aee <main+0x162>
//			  m+=0.1;
//			  if (m>1.0)
//			  {
//				  m=0;
//			  }
			  set_v+=1;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <main+0x19c>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <main+0x19c>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
			  if (set_v>50.0)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <main+0x19c>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b2c <main+0x1a0>
 8001adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae4:	dd03      	ble.n	8001aee <main+0x162>
			  {
				  set_v=2;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <main+0x19c>)
 8001ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aec:	601a      	str	r2, [r3, #0]
			  }

//			  angle+=10;
		  }
		  last_state = val;
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <main+0x190>)
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	6013      	str	r3, [r2, #0]
  {
 8001af4:	e79c      	b.n	8001a30 <main+0xa4>
 8001af6:	bf00      	nop
 8001af8:	20000d18 	.word	0x20000d18
 8001afc:	20000c7c 	.word	0x20000c7c
 8001b00:	2000080c 	.word	0x2000080c
 8001b04:	20000cc4 	.word	0x20000cc4
 8001b08:	20000002 	.word	0x20000002
 8001b0c:	20000210 	.word	0x20000210
 8001b10:	40021800 	.word	0x40021800
 8001b14:	00015f90 	.word	0x00015f90
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	2000020c 	.word	0x2000020c
 8001b20:	20000240 	.word	0x20000240
 8001b24:	40021000 	.word	0x40021000
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	42480000 	.word	0x42480000

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	2230      	movs	r2, #48	; 0x30
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f006 f8c2 	bl	8007cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <SystemClock_Config+0xd8>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <SystemClock_Config+0xd8>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6413      	str	r3, [r2, #64]	; 0x40
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <SystemClock_Config+0xd8>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <SystemClock_Config+0xdc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <SystemClock_Config+0xdc>)
 8001b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <SystemClock_Config+0xdc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ba4:	23b4      	movs	r3, #180	; 0xb4
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bac:	2303      	movs	r3, #3
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fc9b 	bl	80044f0 <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc0:	f000 ff1c 	bl	80029fc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bc4:	f002 fc44 	bl	8004450 <HAL_PWREx_EnableOverDrive>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001bce:	f000 ff15 	bl	80029fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001be2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2105      	movs	r1, #5
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 feed 	bl	80049d0 <HAL_RCC_ClockConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001bfc:	f000 fefe 	bl	80029fc <Error_Handler>
  }
}
 8001c00:	bf00      	nop
 8001c02:	3750      	adds	r7, #80	; 0x50
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40007000 	.word	0x40007000

08001c10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b090      	sub	sp, #64	; 0x40
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2220      	movs	r2, #32
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f006 f846 	bl	8007cc8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c3e:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <MX_ADC1_Init+0x114>)
 8001c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c4a:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c6c:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <MX_ADC1_Init+0x118>)
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c8a:	4825      	ldr	r0, [pc, #148]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001c8c:	f001 fa3e 	bl	800310c <HAL_ADC_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001c96:	f000 feb1 	bl	80029fc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_INJECSIMULT;
 8001c9a:	2315      	movs	r3, #21
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	481d      	ldr	r0, [pc, #116]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001caa:	f002 f893 	bl	8003dd4 <HAL_ADCEx_MultiModeConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001cb4:	f000 fea2 	bl	80029fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4815      	ldr	r0, [pc, #84]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001ccc:	f001 fbc0 	bl	8003450 <HAL_ADC_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001cd6:	f000 fe91 	bl	80029fc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_FALLING;
 8001cea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cee:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8001cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf4:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <MX_ADC1_Init+0x110>)
 8001d08:	f001 fece 	bl	8003aa8 <HAL_ADCEx_InjectedConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001d12:	f000 fe73 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3740      	adds	r7, #64	; 0x40
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000c7c 	.word	0x20000c7c
 8001d24:	40012000 	.word	0x40012000
 8001d28:	0f000001 	.word	0x0f000001

08001d2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d40:	463b      	mov	r3, r7
 8001d42:	2220      	movs	r2, #32
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 ffbe 	bl	8007cc8 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <MX_ADC2_Init+0xd0>)
 8001d50:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d58:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d8e:	481a      	ldr	r0, [pc, #104]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001d90:	f001 f9bc 	bl	800310c <HAL_ADC_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001d9a:	f000 fe2f 	bl	80029fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	4619      	mov	r1, r3
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001db2:	f001 fb4d 	bl	8003450 <HAL_ADC_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001dbc:	f000 fe1e 	bl	80029fc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ddc:	463b      	mov	r3, r7
 8001dde:	4619      	mov	r1, r3
 8001de0:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_ADC2_Init+0xcc>)
 8001de2:	f001 fe61 	bl	8003aa8 <HAL_ADCEx_InjectedConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_ADC2_Init+0xc4>
  {
    Error_Handler();
 8001dec:	f000 fe06 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	3730      	adds	r7, #48	; 0x30
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000080c 	.word	0x2000080c
 8001dfc:	40012100 	.word	0x40012100

08001e00 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e14:	463b      	mov	r3, r7
 8001e16:	2220      	movs	r2, #32
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f005 ff54 	bl	8007cc8 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e22:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <MX_ADC3_Init+0xd0>)
 8001e24:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e62:	481a      	ldr	r0, [pc, #104]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e64:	f001 f952 	bl	800310c <HAL_ADC_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8001e6e:	f000 fdc5 	bl	80029fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	4619      	mov	r1, r3
 8001e84:	4811      	ldr	r0, [pc, #68]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001e86:	f001 fae3 	bl	8003450 <HAL_ADC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001e90:	f000 fdb4 	bl	80029fc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001e94:	2303      	movs	r3, #3
 8001e96:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_ADC3_Init+0xcc>)
 8001eb6:	f001 fdf7 	bl	8003aa8 <HAL_ADCEx_InjectedConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8001ec0:	f000 fd9c 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000cc4 	.word	0x20000cc4
 8001ed0:	40012200 	.word	0x40012200

08001ed4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b096      	sub	sp, #88	; 0x58
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2220      	movs	r2, #32
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 fedb 	bl	8007cc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f12:	4b59      	ldr	r3, [pc, #356]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f14:	4a59      	ldr	r2, [pc, #356]	; (800207c <MX_TIM1_Init+0x1a8>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8001f18:	4b57      	ldr	r3, [pc, #348]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f1a:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001f1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001f26:	4b54      	ldr	r3, [pc, #336]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b52      	ldr	r3, [pc, #328]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f34:	4b50      	ldr	r3, [pc, #320]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f3a:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f40:	484d      	ldr	r0, [pc, #308]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f42:	f002 ff69 	bl	8004e18 <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f4c:	f000 fd56 	bl	80029fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4846      	ldr	r0, [pc, #280]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f5e:	f003 fb05 	bl	800556c <HAL_TIM_ConfigClockSource>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f68:	f000 fd48 	bl	80029fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f6c:	4842      	ldr	r0, [pc, #264]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f6e:	f003 f85b 	bl	8005028 <HAL_TIM_PWM_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001f78:	f000 fd40 	bl	80029fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001f7c:	483e      	ldr	r0, [pc, #248]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f7e:	f002 ff9a 	bl	8004eb6 <HAL_TIM_OC_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001f88:	f000 fd38 	bl	80029fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f8c:	2370      	movs	r3, #112	; 0x70
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4837      	ldr	r0, [pc, #220]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001f9c:	f003 ff00 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001fa6:	f000 fd29 	bl	80029fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001faa:	2360      	movs	r3, #96	; 0x60
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001fae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4829      	ldr	r0, [pc, #164]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001fd2:	f003 fa05 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001fdc:	f000 fd0e 	bl	80029fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4823      	ldr	r0, [pc, #140]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8001fea:	f003 f9f9 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001ff4:	f000 fd02 	bl	80029fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	4619      	mov	r1, r3
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8002002:	f003 f9ed 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800200c:	f000 fcf6 	bl	80029fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002010:	2330      	movs	r3, #48	; 0x30
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 400;
 8002014:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800201a:	2302      	movs	r3, #2
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	220c      	movs	r2, #12
 8002024:	4619      	mov	r1, r3
 8002026:	4814      	ldr	r0, [pc, #80]	; (8002078 <MX_TIM1_Init+0x1a4>)
 8002028:	f003 f97a 	bl	8005320 <HAL_TIM_OC_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002032:	f000 fce3 	bl	80029fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800204a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4807      	ldr	r0, [pc, #28]	; (8002078 <MX_TIM1_Init+0x1a4>)
 800205a:	f003 ff1d 	bl	8005e98 <HAL_TIMEx_ConfigBreakDeadTime>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8002064:	f000 fcca 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <MX_TIM1_Init+0x1a4>)
 800206a:	f000 fde3 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 800206e:	bf00      	nop
 8002070:	3758      	adds	r7, #88	; 0x58
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000d18 	.word	0x20000d18
 800207c:	40010000 	.word	0x40010000

08002080 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_UART5_Init+0x4c>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <MX_UART5_Init+0x50>)
 8002088:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_UART5_Init+0x4c>)
 800208c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002090:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_UART5_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_UART5_Init+0x4c>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_UART5_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_UART5_Init+0x4c>)
 80020a6:	2208      	movs	r2, #8
 80020a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <MX_UART5_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_UART5_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_UART5_Init+0x4c>)
 80020b8:	f003 ff79 	bl	8005fae <HAL_UART_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80020c2:	f000 fc9b 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000854 	.word	0x20000854
 80020d0:	40005000 	.word	0x40005000

080020d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	4bb1      	ldr	r3, [pc, #708]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4ab0      	ldr	r2, [pc, #704]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4bae      	ldr	r3, [pc, #696]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	4baa      	ldr	r3, [pc, #680]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4aa9      	ldr	r2, [pc, #676]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4ba7      	ldr	r3, [pc, #668]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	4ba3      	ldr	r3, [pc, #652]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4aa2      	ldr	r2, [pc, #648]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 800212c:	f043 0320 	orr.w	r3, r3, #32
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4ba0      	ldr	r3, [pc, #640]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	4b9c      	ldr	r3, [pc, #624]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a9b      	ldr	r2, [pc, #620]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b99      	ldr	r3, [pc, #612]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b95      	ldr	r3, [pc, #596]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a94      	ldr	r2, [pc, #592]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b8e      	ldr	r3, [pc, #568]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a8d      	ldr	r2, [pc, #564]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b8b      	ldr	r3, [pc, #556]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a86      	ldr	r2, [pc, #536]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 800219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b84      	ldr	r3, [pc, #528]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <MX_GPIO_Init+0x2e0>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2116      	movs	r1, #22
 80021ce:	487a      	ldr	r0, [pc, #488]	; (80023b8 <MX_GPIO_Init+0x2e4>)
 80021d0:	f002 f90c 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Relay0_Pin|Relay1_Pin|RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 80021da:	4878      	ldr	r0, [pc, #480]	; (80023bc <MX_GPIO_Init+0x2e8>)
 80021dc:	f002 f906 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, myio_Pin|myio2_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80021e6:	4876      	ldr	r0, [pc, #472]	; (80023c0 <MX_GPIO_Init+0x2ec>)
 80021e8:	f002 f900 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80021f2:	4874      	ldr	r0, [pc, #464]	; (80023c4 <MX_GPIO_Init+0x2f0>)
 80021f4:	f002 f8fa 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VFO_Pin */
  GPIO_InitStruct.Pin = VFO_Pin;
 80021f8:	2304      	movs	r3, #4
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VFO_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	486f      	ldr	r0, [pc, #444]	; (80023c8 <MX_GPIO_Init+0x2f4>)
 800220c:	f001 ff2c 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin 
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin 
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8002210:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002222:	230c      	movs	r3, #12
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	4619      	mov	r1, r3
 800222c:	4867      	ldr	r0, [pc, #412]	; (80023cc <MX_GPIO_Init+0x2f8>)
 800222e:	f001 ff1b 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002232:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002244:	2305      	movs	r3, #5
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	485f      	ldr	r0, [pc, #380]	; (80023cc <MX_GPIO_Init+0x2f8>)
 8002250:	f001 ff0a 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002266:	230e      	movs	r3, #14
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	4619      	mov	r1, r3
 8002270:	4856      	ldr	r0, [pc, #344]	; (80023cc <MX_GPIO_Init+0x2f8>)
 8002272:	f001 fef9 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002276:	2301      	movs	r3, #1
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002286:	230c      	movs	r3, #12
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800228a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228e:	4619      	mov	r1, r3
 8002290:	4849      	ldr	r0, [pc, #292]	; (80023b8 <MX_GPIO_Init+0x2e4>)
 8002292:	f001 fee9 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002296:	2316      	movs	r3, #22
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	4842      	ldr	r0, [pc, #264]	; (80023b8 <MX_GPIO_Init+0x2e4>)
 80022ae:	f001 fedb 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	483e      	ldr	r0, [pc, #248]	; (80023c0 <MX_GPIO_Init+0x2ec>)
 80022c6:	f001 fecf 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = VSYNC_Pin|G2_Pin;
 80022ca:	2350      	movs	r3, #80	; 0x50
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022da:	230e      	movs	r3, #14
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e2:	4619      	mov	r1, r3
 80022e4:	4836      	ldr	r0, [pc, #216]	; (80023c0 <MX_GPIO_Init+0x2ec>)
 80022e6:	f001 febf 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80022ea:	2320      	movs	r3, #32
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <MX_GPIO_Init+0x2fc>)
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fa:	4619      	mov	r1, r3
 80022fc:	482e      	ldr	r0, [pc, #184]	; (80023b8 <MX_GPIO_Init+0x2e4>)
 80022fe:	f001 feb3 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : R3_Pin */
  GPIO_InitStruct.Pin = R3_Pin;
 8002302:	2301      	movs	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002312:	2309      	movs	r3, #9
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	4619      	mov	r1, r3
 800231c:	482d      	ldr	r0, [pc, #180]	; (80023d4 <MX_GPIO_Init+0x300>)
 800231e:	f001 fea3 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002322:	2302      	movs	r3, #2
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002332:	2303      	movs	r3, #3
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	4619      	mov	r1, r3
 800233c:	4825      	ldr	r0, [pc, #148]	; (80023d4 <MX_GPIO_Init+0x300>)
 800233e:	f001 fe93 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002342:	2304      	movs	r3, #4
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002352:	4619      	mov	r1, r3
 8002354:	481f      	ldr	r0, [pc, #124]	; (80023d4 <MX_GPIO_Init+0x300>)
 8002356:	f001 fe87 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin 
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800235a:	f248 1333 	movw	r3, #33075	; 0x8133
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800236c:	230c      	movs	r3, #12
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_GPIO_Init+0x2f0>)
 8002378:	f001 fe76 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D11_Pin 
                           D12_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D11_Pin 
 800237c:	f24c 3380 	movw	r3, #50048	; 0xc380
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800238e:	230c      	movs	r3, #12
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	480b      	ldr	r0, [pc, #44]	; (80023c8 <MX_GPIO_Init+0x2f4>)
 800239a:	f001 fe65 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800239e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
 80023b0:	e012      	b.n	80023d8 <MX_GPIO_Init+0x304>
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40021800 	.word	0x40021800
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40021400 	.word	0x40021400
 80023d0:	10120000 	.word	0x10120000
 80023d4:	40020400 	.word	0x40020400
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d8:	230e      	movs	r3, #14
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e0:	4619      	mov	r1, r3
 80023e2:	4884      	ldr	r0, [pc, #528]	; (80025f4 <MX_GPIO_Init+0x520>)
 80023e4:	f001 fe40 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80023e8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80023fa:	230c      	movs	r3, #12
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002402:	4619      	mov	r1, r3
 8002404:	487b      	ldr	r0, [pc, #492]	; (80025f4 <MX_GPIO_Init+0x520>)
 8002406:	f001 fe2f 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800240a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241c:	4619      	mov	r1, r3
 800241e:	4875      	ldr	r0, [pc, #468]	; (80025f4 <MX_GPIO_Init+0x520>)
 8002420:	f001 fe22 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D0_Pin D1_Pin D2_Pin 
                           D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D0_Pin|D1_Pin|D2_Pin 
 8002424:	f24c 1303 	movw	r3, #49411	; 0xc103
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002436:	230c      	movs	r3, #12
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	4619      	mov	r1, r3
 8002440:	486d      	ldr	r0, [pc, #436]	; (80025f8 <MX_GPIO_Init+0x524>)
 8002442:	f001 fe11 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay0_Pin Relay1_Pin RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = Relay0_Pin|Relay1_Pin|RDX_Pin|WRX_DCX_Pin;
 8002446:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	4619      	mov	r1, r3
 800245e:	4866      	ldr	r0, [pc, #408]	; (80025f8 <MX_GPIO_Init+0x524>)
 8002460:	f001 fe02 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	4619      	mov	r1, r3
 8002478:	485f      	ldr	r0, [pc, #380]	; (80025f8 <MX_GPIO_Init+0x524>)
 800247a:	f001 fdf5 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800247e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002490:	230e      	movs	r3, #14
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002498:	4619      	mov	r1, r3
 800249a:	4858      	ldr	r0, [pc, #352]	; (80025fc <MX_GPIO_Init+0x528>)
 800249c:	f001 fde4 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : hall_1_Pin hall_2_Pin */
  GPIO_InitStruct.Pin = hall_1_Pin|hall_2_Pin;
 80024a0:	23c0      	movs	r3, #192	; 0xc0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024a4:	4b56      	ldr	r3, [pc, #344]	; (8002600 <MX_GPIO_Init+0x52c>)
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	4854      	ldr	r0, [pc, #336]	; (8002604 <MX_GPIO_Init+0x530>)
 80024b4:	f001 fdd8 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024ca:	2307      	movs	r3, #7
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	484c      	ldr	r0, [pc, #304]	; (8002608 <MX_GPIO_Init+0x534>)
 80024d6:	f001 fdc7 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : myio_Pin myio2_Pin */
  GPIO_InitStruct.Pin = myio_Pin|myio2_Pin;
 80024da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4845      	ldr	r0, [pc, #276]	; (8002608 <MX_GPIO_Init+0x534>)
 80024f4:	f001 fdb8 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <MX_GPIO_Init+0x538>)
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	483e      	ldr	r0, [pc, #248]	; (8002608 <MX_GPIO_Init+0x534>)
 800250e:	f001 fdab 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : R2_Pin */
  GPIO_InitStruct.Pin = R2_Pin;
 8002512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002524:	230e      	movs	r3, #14
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	4619      	mov	r1, r3
 800252e:	4835      	ldr	r0, [pc, #212]	; (8002604 <MX_GPIO_Init+0x530>)
 8002530:	f001 fd9a 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002534:	2348      	movs	r3, #72	; 0x48
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002544:	230e      	movs	r3, #14
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254c:	4619      	mov	r1, r3
 800254e:	482a      	ldr	r0, [pc, #168]	; (80025f8 <MX_GPIO_Init+0x524>)
 8002550:	f001 fd8a 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002554:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002566:	2309      	movs	r3, #9
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800256a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256e:	4619      	mov	r1, r3
 8002570:	4822      	ldr	r0, [pc, #136]	; (80025fc <MX_GPIO_Init+0x528>)
 8002572:	f001 fd79 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002576:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258c:	4619      	mov	r1, r3
 800258e:	481b      	ldr	r0, [pc, #108]	; (80025fc <MX_GPIO_Init+0x528>)
 8002590:	f001 fd6a 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002594:	2360      	movs	r3, #96	; 0x60
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025a4:	230c      	movs	r3, #12
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	4619      	mov	r1, r3
 80025ae:	4811      	ldr	r0, [pc, #68]	; (80025f4 <MX_GPIO_Init+0x520>)
 80025b0:	f001 fd5a 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : hall_0_Pin */
  GPIO_InitStruct.Pin = hall_0_Pin;
 80025b4:	2301      	movs	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_GPIO_Init+0x52c>)
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025bc:	2301      	movs	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(hall_0_GPIO_Port, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	4812      	ldr	r0, [pc, #72]	; (8002610 <MX_GPIO_Init+0x53c>)
 80025c8:	f001 fd4e 	bl	8004068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2006      	movs	r0, #6
 80025d2:	f001 fcfd 	bl	8003fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025d6:	2006      	movs	r0, #6
 80025d8:	f001 fd16 	bl	8004008 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2017      	movs	r0, #23
 80025e2:	f001 fcf5 	bl	8003fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025e6:	2017      	movs	r0, #23
 80025e8:	f001 fd0e 	bl	8004008 <HAL_NVIC_EnableIRQ>

}
 80025ec:	bf00      	nop
 80025ee:	3738      	adds	r7, #56	; 0x38
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021800 	.word	0x40021800
 8002600:	10310000 	.word	0x10310000
 8002604:	40020800 	.word	0x40020800
 8002608:	40020000 	.word	0x40020000
 800260c:	10110000 	.word	0x10110000
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]

	int vel2 = this_time - last_time ;
 800261e:	4b84      	ldr	r3, [pc, #528]	; (8002830 <HAL_GPIO_EXTI_Callback+0x21c>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b84      	ldr	r3, [pc, #528]	; (8002834 <HAL_GPIO_EXTI_Callback+0x220>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	61fb      	str	r3, [r7, #28]

//	vel2 = 10;
	if (vel2 < 100) // too fast prolly a glitch
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b63      	cmp	r3, #99	; 0x63
 800262e:	f340 80f1 	ble.w	8002814 <HAL_GPIO_EXTI_Callback+0x200>
	{
		return;
	}


	int a = HAL_GPIO_ReadPin(hall_0_GPIO_Port, hall_0_Pin);
 8002632:	2101      	movs	r1, #1
 8002634:	4880      	ldr	r0, [pc, #512]	; (8002838 <HAL_GPIO_EXTI_Callback+0x224>)
 8002636:	f001 fec1 	bl	80043bc <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	61bb      	str	r3, [r7, #24]
	int b = HAL_GPIO_ReadPin(hall_1_GPIO_Port, hall_1_Pin);
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	487e      	ldr	r0, [pc, #504]	; (800283c <HAL_GPIO_EXTI_Callback+0x228>)
 8002642:	f001 febb 	bl	80043bc <HAL_GPIO_ReadPin>
 8002646:	4603      	mov	r3, r0
 8002648:	617b      	str	r3, [r7, #20]
	int c = HAL_GPIO_ReadPin(hall_2_GPIO_Port, hall_2_Pin);
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	487b      	ldr	r0, [pc, #492]	; (800283c <HAL_GPIO_EXTI_Callback+0x228>)
 800264e:	f001 feb5 	bl	80043bc <HAL_GPIO_ReadPin>
 8002652:	4603      	mov	r3, r0
 8002654:	613b      	str	r3, [r7, #16]
	int last_rotor_angle = angle_rotor;
 8002656:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	60fb      	str	r3, [r7, #12]

	if (a && c){
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d021      	beq.n	80026a8 <HAL_GPIO_EXTI_Callback+0x94>
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01e      	beq.n	80026a8 <HAL_GPIO_EXTI_Callback+0x94>
		if (last_rotor_angle == 330 || last_rotor_angle == 90)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002670:	d003      	beq.n	800267a <HAL_GPIO_EXTI_Callback+0x66>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b5a      	cmp	r3, #90	; 0x5a
 8002676:	f040 80cf 	bne.w	8002818 <HAL_GPIO_EXTI_Callback+0x204>
		{
			angle_rotor = 30;
 800267a:	4b71      	ldr	r3, [pc, #452]	; (8002840 <HAL_GPIO_EXTI_Callback+0x22c>)
 800267c:	221e      	movs	r2, #30
 800267e:	801a      	strh	r2, [r3, #0]
			last_time = this_time;
 8002680:	4b6b      	ldr	r3, [pc, #428]	; (8002830 <HAL_GPIO_EXTI_Callback+0x21c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6b      	ldr	r2, [pc, #428]	; (8002834 <HAL_GPIO_EXTI_Callback+0x220>)
 8002686:	6013      	str	r3, [r2, #0]
			vel = vel2;
 8002688:	4a6e      	ldr	r2, [pc, #440]	; (8002844 <HAL_GPIO_EXTI_Callback+0x230>)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 1);
 800268e:	2201      	movs	r2, #1
 8002690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002694:	486c      	ldr	r0, [pc, #432]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 8002696:	f001 fea9 	bl	80043ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a0:	4869      	ldr	r0, [pc, #420]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 80026a2:	f001 fea3 	bl	80043ec <HAL_GPIO_WritePin>
		if (last_rotor_angle == 330 || last_rotor_angle == 90)
 80026a6:	e0b7      	b.n	8002818 <HAL_GPIO_EXTI_Callback+0x204>
		}
	}
	else if (!b && !c){
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d120      	bne.n	80026f0 <HAL_GPIO_EXTI_Callback+0xdc>
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11d      	bne.n	80026f0 <HAL_GPIO_EXTI_Callback+0xdc>
		if (last_rotor_angle == 30 || last_rotor_angle == 150)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b1e      	cmp	r3, #30
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_EXTI_Callback+0xae>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b96      	cmp	r3, #150	; 0x96
 80026be:	f040 80ad 	bne.w	800281c <HAL_GPIO_EXTI_Callback+0x208>
		{
			angle_rotor = 90;
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_GPIO_EXTI_Callback+0x22c>)
 80026c4:	225a      	movs	r2, #90	; 0x5a
 80026c6:	801a      	strh	r2, [r3, #0]
			last_time = this_time;
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_GPIO_EXTI_Callback+0x21c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a59      	ldr	r2, [pc, #356]	; (8002834 <HAL_GPIO_EXTI_Callback+0x220>)
 80026ce:	6013      	str	r3, [r2, #0]
			vel = vel2;
 80026d0:	4a5c      	ldr	r2, [pc, #368]	; (8002844 <HAL_GPIO_EXTI_Callback+0x230>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 1);
 80026d6:	2201      	movs	r2, #1
 80026d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026dc:	485a      	ldr	r0, [pc, #360]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 80026de:	f001 fe85 	bl	80043ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e8:	4857      	ldr	r0, [pc, #348]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 80026ea:	f001 fe7f 	bl	80043ec <HAL_GPIO_WritePin>
		if (last_rotor_angle == 30 || last_rotor_angle == 150)
 80026ee:	e095      	b.n	800281c <HAL_GPIO_EXTI_Callback+0x208>
		}
	}
	else if (a && b){
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <HAL_GPIO_EXTI_Callback+0x124>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01d      	beq.n	8002738 <HAL_GPIO_EXTI_Callback+0x124>
		if (last_rotor_angle == 90 || last_rotor_angle == 210)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b5a      	cmp	r3, #90	; 0x5a
 8002700:	d003      	beq.n	800270a <HAL_GPIO_EXTI_Callback+0xf6>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2bd2      	cmp	r3, #210	; 0xd2
 8002706:	f040 808b 	bne.w	8002820 <HAL_GPIO_EXTI_Callback+0x20c>
		{
			angle_rotor = 150;
 800270a:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_GPIO_EXTI_Callback+0x22c>)
 800270c:	2296      	movs	r2, #150	; 0x96
 800270e:	801a      	strh	r2, [r3, #0]
			last_time = this_time;
 8002710:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_GPIO_EXTI_Callback+0x21c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a47      	ldr	r2, [pc, #284]	; (8002834 <HAL_GPIO_EXTI_Callback+0x220>)
 8002716:	6013      	str	r3, [r2, #0]
			vel = vel2;
 8002718:	4a4a      	ldr	r2, [pc, #296]	; (8002844 <HAL_GPIO_EXTI_Callback+0x230>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 1);
 800271e:	2201      	movs	r2, #1
 8002720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002724:	4848      	ldr	r0, [pc, #288]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 8002726:	f001 fe61 	bl	80043ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002730:	4845      	ldr	r0, [pc, #276]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 8002732:	f001 fe5b 	bl	80043ec <HAL_GPIO_WritePin>
		if (last_rotor_angle == 90 || last_rotor_angle == 210)
 8002736:	e073      	b.n	8002820 <HAL_GPIO_EXTI_Callback+0x20c>
		}
	}
	else if (!a && !c){
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d120      	bne.n	8002780 <HAL_GPIO_EXTI_Callback+0x16c>
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11d      	bne.n	8002780 <HAL_GPIO_EXTI_Callback+0x16c>
		if (last_rotor_angle == 150 || last_rotor_angle == 270)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b96      	cmp	r3, #150	; 0x96
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_EXTI_Callback+0x13e>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002750:	d168      	bne.n	8002824 <HAL_GPIO_EXTI_Callback+0x210>
		{
			angle_rotor = 210;
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002754:	22d2      	movs	r2, #210	; 0xd2
 8002756:	801a      	strh	r2, [r3, #0]
			last_time = this_time;
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_GPIO_EXTI_Callback+0x21c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a35      	ldr	r2, [pc, #212]	; (8002834 <HAL_GPIO_EXTI_Callback+0x220>)
 800275e:	6013      	str	r3, [r2, #0]
			vel = vel2;
 8002760:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_GPIO_EXTI_Callback+0x230>)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 1);
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800276c:	4836      	ldr	r0, [pc, #216]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 800276e:	f001 fe3d 	bl	80043ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002778:	4833      	ldr	r0, [pc, #204]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 800277a:	f001 fe37 	bl	80043ec <HAL_GPIO_WritePin>
		if (last_rotor_angle == 150 || last_rotor_angle == 270)
 800277e:	e051      	b.n	8002824 <HAL_GPIO_EXTI_Callback+0x210>
		}
	}
	else if (b && c){
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d021      	beq.n	80027ca <HAL_GPIO_EXTI_Callback+0x1b6>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01e      	beq.n	80027ca <HAL_GPIO_EXTI_Callback+0x1b6>
		if (last_rotor_angle == 210 || last_rotor_angle == 330)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2bd2      	cmp	r3, #210	; 0xd2
 8002790:	d003      	beq.n	800279a <HAL_GPIO_EXTI_Callback+0x186>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002798:	d146      	bne.n	8002828 <HAL_GPIO_EXTI_Callback+0x214>
		{
			angle_rotor = 270;
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_GPIO_EXTI_Callback+0x22c>)
 800279c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80027a0:	801a      	strh	r2, [r3, #0]
			last_time = this_time;
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_GPIO_EXTI_Callback+0x21c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_GPIO_EXTI_Callback+0x220>)
 80027a8:	6013      	str	r3, [r2, #0]
			vel = vel2;
 80027aa:	4a26      	ldr	r2, [pc, #152]	; (8002844 <HAL_GPIO_EXTI_Callback+0x230>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 1);
 80027b0:	2201      	movs	r2, #1
 80027b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027b6:	4824      	ldr	r0, [pc, #144]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 80027b8:	f001 fe18 	bl	80043ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c2:	4821      	ldr	r0, [pc, #132]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 80027c4:	f001 fe12 	bl	80043ec <HAL_GPIO_WritePin>
		if (last_rotor_angle == 210 || last_rotor_angle == 330)
 80027c8:	e02e      	b.n	8002828 <HAL_GPIO_EXTI_Callback+0x214>
		}
	}
	else if (!a && !b){
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d12c      	bne.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d129      	bne.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		if (last_rotor_angle == 270 || last_rotor_angle == 30)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80027dc:	d002      	beq.n	80027e4 <HAL_GPIO_EXTI_Callback+0x1d0>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b1e      	cmp	r3, #30
 80027e2:	d122      	bne.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		{
			angle_rotor = 330;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_GPIO_EXTI_Callback+0x22c>)
 80027e6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80027ea:	801a      	strh	r2, [r3, #0]
			last_time = this_time;
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_GPIO_EXTI_Callback+0x21c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_GPIO_EXTI_Callback+0x220>)
 80027f2:	6013      	str	r3, [r2, #0]
			vel = vel2;
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <HAL_GPIO_EXTI_Callback+0x230>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 1);
 80027fa:	2201      	movs	r2, #1
 80027fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002800:	4811      	ldr	r0, [pc, #68]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 8002802:	f001 fdf3 	bl	80043ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(myio2_GPIO_Port, myio2_Pin, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <HAL_GPIO_EXTI_Callback+0x234>)
 800280e:	f001 fded 	bl	80043ec <HAL_GPIO_WritePin>
 8002812:	e00a      	b.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		return;
 8002814:	bf00      	nop
 8002816:	e008      	b.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		if (last_rotor_angle == 330 || last_rotor_angle == 90)
 8002818:	bf00      	nop
 800281a:	e006      	b.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		if (last_rotor_angle == 30 || last_rotor_angle == 150)
 800281c:	bf00      	nop
 800281e:	e004      	b.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		if (last_rotor_angle == 90 || last_rotor_angle == 210)
 8002820:	bf00      	nop
 8002822:	e002      	b.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		if (last_rotor_angle == 150 || last_rotor_angle == 270)
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <HAL_GPIO_EXTI_Callback+0x216>
		if (last_rotor_angle == 210 || last_rotor_angle == 330)
 8002828:	bf00      	nop
//			{
//				angle_rotor = 60;
//			}
//		}
//	}
}
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000234 	.word	0x20000234
 8002834:	20000230 	.word	0x20000230
 8002838:	40021000 	.word	0x40021000
 800283c:	40020800 	.word	0x40020800
 8002840:	20000216 	.word	0x20000216
 8002844:	20000238 	.word	0x20000238
 8002848:	40020000 	.word	0x40020000

0800284c <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	b093      	sub	sp, #76	; 0x4c
 8002850:	af0a      	add	r7, sp, #40	; 0x28
 8002852:	6178      	str	r0, [r7, #20]
		HAL_GPIO_WritePin(myio_GPIO_Port, myio_Pin, 1);
 8002854:	2201      	movs	r2, #1
 8002856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800285a:	483e      	ldr	r0, [pc, #248]	; (8002954 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800285c:	f001 fdc6 	bl	80043ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(myio_GPIO_Port, myio_Pin, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002866:	483b      	ldr	r0, [pc, #236]	; (8002954 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 8002868:	f001 fdc0 	bl	80043ec <HAL_GPIO_WritePin>
//		HAL_GPIO_TogglePin(myio_GPIO_Port, myio_Pin);
//		adc[0] = HAL_ADCEx_InjectedGetValue(&hadc2, 1);
		adc[0] += HAL_ADCEx_InjectedGetValue(&hadc1, 1);
 800286c:	2101      	movs	r1, #1
 800286e:	483a      	ldr	r0, [pc, #232]	; (8002958 <HAL_ADCEx_InjectedConvCpltCallback+0x10c>)
 8002870:	f001 f8e2 	bl	8003a38 <HAL_ADCEx_InjectedGetValue>
 8002874:	4602      	mov	r2, r0
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a37      	ldr	r2, [pc, #220]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800287e:	6013      	str	r3, [r2, #0]
		adc[1] += HAL_ADCEx_InjectedGetValue(&hadc2, 1);
 8002880:	2101      	movs	r1, #1
 8002882:	4837      	ldr	r0, [pc, #220]	; (8002960 <HAL_ADCEx_InjectedConvCpltCallback+0x114>)
 8002884:	f001 f8d8 	bl	8003a38 <HAL_ADCEx_InjectedGetValue>
 8002888:	4602      	mov	r2, r0
 800288a:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4413      	add	r3, r2
 8002890:	4a32      	ldr	r2, [pc, #200]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 8002892:	6053      	str	r3, [r2, #4]
		adc[2] += HAL_ADCEx_InjectedGetValue(&hadc3, 1);
 8002894:	2101      	movs	r1, #1
 8002896:	4833      	ldr	r0, [pc, #204]	; (8002964 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8002898:	f001 f8ce 	bl	8003a38 <HAL_ADCEx_InjectedGetValue>
 800289c:	4602      	mov	r2, r0
 800289e:	4b2f      	ldr	r3, [pc, #188]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 80028a6:	6093      	str	r3, [r2, #8]


		if (cycle_count == 100 )
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d146      	bne.n	800293e <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
//				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
//				set_v = 5;
//				error = 0;
//
//			}
			int length = sprintf(tx_buffer, "%d,%d,%f,%d,%d,%f,%u,%u,%u\r\n", vel, error, integral, angle, angle_rotor, m, adc[0], adc[1], adc[2]);
 80028b0:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	60f9      	str	r1, [r7, #12]
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe51 	bl	8000568 <__aeabi_f2d>
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe42 	bl	8000568 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	491c      	ldr	r1, [pc, #112]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 80028ea:	6809      	ldr	r1, [r1, #0]
 80028ec:	481b      	ldr	r0, [pc, #108]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 80028ee:	6840      	ldr	r0, [r0, #4]
 80028f0:	4e1a      	ldr	r6, [pc, #104]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 80028f2:	68b6      	ldr	r6, [r6, #8]
 80028f4:	9608      	str	r6, [sp, #32]
 80028f6:	9007      	str	r0, [sp, #28]
 80028f8:	9106      	str	r1, [sp, #24]
 80028fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	9003      	str	r0, [sp, #12]
 8002902:	68b8      	ldr	r0, [r7, #8]
 8002904:	9002      	str	r0, [sp, #8]
 8002906:	e9cd 4500 	strd	r4, r5, [sp]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	491d      	ldr	r1, [pc, #116]	; (8002984 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8002912:	f005 fe3d 	bl	8008590 <siprintf>
 8002916:	61f8      	str	r0, [r7, #28]

			HAL_UART_Transmit_IT(&huart5, tx_buffer, length);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	491a      	ldr	r1, [pc, #104]	; (8002988 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8002920:	481a      	ldr	r0, [pc, #104]	; (800298c <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8002922:	f003 fb91 	bl	8006048 <HAL_UART_Transmit_IT>
			cycle_count = 0;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8002928:	2200      	movs	r2, #0
 800292a:	801a      	strh	r2, [r3, #0]
			adc[0] = 0;
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
			adc[1] = 0;
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 8002934:	2200      	movs	r2, #0
 8002936:	605a      	str	r2, [r3, #4]
			adc[2] = 0;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
//			HAL_GPIO_WritePin(myio_GPIO_Port, myio_Pin, 1);

		}
		cycle_count+=1;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8002948:	801a      	strh	r2, [r3, #0]
//			tx_bytes = 0;
//			cycle_count = 0;

//
//		}
}
 800294a:	bf00      	nop
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002952:	bf00      	nop
 8002954:	40020000 	.word	0x40020000
 8002958:	20000c7c 	.word	0x20000c7c
 800295c:	20000d0c 	.word	0x20000d0c
 8002960:	2000080c 	.word	0x2000080c
 8002964:	20000cc4 	.word	0x20000cc4
 8002968:	2000025c 	.word	0x2000025c
 800296c:	20000238 	.word	0x20000238
 8002970:	2000022c 	.word	0x2000022c
 8002974:	20000224 	.word	0x20000224
 8002978:	20000214 	.word	0x20000214
 800297c:	20000216 	.word	0x20000216
 8002980:	2000021c 	.word	0x2000021c
 8002984:	08009d68 	.word	0x08009d68
 8002988:	20000894 	.word	0x20000894
 800298c:	20000854 	.word	0x20000854

08002990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  if (htim->Instance == TIM6) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10a      	bne.n	80029b8 <HAL_TIM_PeriodElapsedCallback+0x28>

    elapsed_ms++;
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	4a10      	ldr	r2, [pc, #64]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80029aa:	6013      	str	r3, [r2, #0]
//    	}
//		last_angle = angle;
//
//	//    pid();
//    }
    if (fault == 0)
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_PeriodElapsedCallback+0x28>
//		{
//			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
//			fault = 1;
//
//		}
		pid();
 80029b4:	f7fe fb2e 	bl	8001014 <pid>
    }
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PeriodElapsedCallback+0x36>
    HAL_IncTick();
 80029c2:	f000 fb61 	bl	8003088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d106      	bne.n	80029de <HAL_TIM_PeriodElapsedCallback+0x4e>
	  myisr();
 80029d0:	f7fe ffc4 	bl	800195c <myisr>
	  this_time++;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80029dc:	6013      	str	r3, [r2, #0]
////	  {
////		  underflow = 0;
////	  }
//  }
  /* USER CODE END Callback 1 */
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40001000 	.word	0x40001000
 80029ec:	2000023c 	.word	0x2000023c
 80029f0:	20000240 	.word	0x20000240
 80029f4:	40010000 	.word	0x40010000
 80029f8:	20000234 	.word	0x20000234

080029fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a51      	ldr	r2, [pc, #324]	; (8002bc0 <HAL_ADC_MspInit+0x164>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d130      	bne.n	8002ae0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aba:	2303      	movs	r3, #3
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	483f      	ldr	r0, [pc, #252]	; (8002bc8 <HAL_ADC_MspInit+0x16c>)
 8002aca:	f001 facd 	bl	8004068 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2012      	movs	r0, #18
 8002ad4:	f001 fa7c 	bl	8003fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ad8:	2012      	movs	r0, #18
 8002ada:	f001 fa95 	bl	8004008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ade:	e06a      	b.n	8002bb6 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a39      	ldr	r2, [pc, #228]	; (8002bcc <HAL_ADC_MspInit+0x170>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d130      	bne.n	8002b4c <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4a34      	ldr	r2, [pc, #208]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af8:	6453      	str	r3, [r2, #68]	; 0x44
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a2d      	ldr	r2, [pc, #180]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b22:	2304      	movs	r3, #4
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b26:	2303      	movs	r3, #3
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b32:	4619      	mov	r1, r3
 8002b34:	4824      	ldr	r0, [pc, #144]	; (8002bc8 <HAL_ADC_MspInit+0x16c>)
 8002b36:	f001 fa97 	bl	8004068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2012      	movs	r0, #18
 8002b40:	f001 fa46 	bl	8003fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b44:	2012      	movs	r0, #18
 8002b46:	f001 fa5f 	bl	8004008 <HAL_NVIC_EnableIRQ>
}
 8002b4a:	e034      	b.n	8002bb6 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1f      	ldr	r2, [pc, #124]	; (8002bd0 <HAL_ADC_MspInit+0x174>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d12f      	bne.n	8002bb6 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b64:	6453      	str	r3, [r2, #68]	; 0x44
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_ADC_MspInit+0x168>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b8e:	2308      	movs	r3, #8
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b92:	2303      	movs	r3, #3
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <HAL_ADC_MspInit+0x16c>)
 8002ba2:	f001 fa61 	bl	8004068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2012      	movs	r0, #18
 8002bac:	f001 fa10 	bl	8003fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002bb0:	2012      	movs	r0, #18
 8002bb2:	f001 fa29 	bl	8004008 <HAL_NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3738      	adds	r7, #56	; 0x38
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40012000 	.word	0x40012000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40012100 	.word	0x40012100
 8002bd0:	40012200 	.word	0x40012200

08002bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <HAL_TIM_Base_MspInit+0x58>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d11d      	bne.n	8002c22 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_TIM_Base_MspInit+0x5c>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <HAL_TIM_Base_MspInit+0x5c>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <HAL_TIM_Base_MspInit+0x5c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2100      	movs	r1, #0
 8002c06:	2019      	movs	r0, #25
 8002c08:	f001 f9e2 	bl	8003fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c0c:	2019      	movs	r0, #25
 8002c0e:	f001 f9fb 	bl	8004008 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	201b      	movs	r0, #27
 8002c18:	f001 f9da 	bl	8003fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c1c:	201b      	movs	r0, #27
 8002c1e:	f001 f9f3 	bl	8004008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_TIM_MspPostInit+0xa8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d13d      	bne.n	8002cd2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_TIM_MspPostInit+0xac>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <HAL_TIM_MspPostInit+0xac>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_TIM_MspPostInit+0xac>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_TIM_MspPostInit+0xac>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_TIM_MspPostInit+0xac>)
 8002c7c:	f043 0310 	orr.w	r3, r3, #16
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_TIM_MspPostInit+0xac>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002c8e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480e      	ldr	r0, [pc, #56]	; (8002ce4 <HAL_TIM_MspPostInit+0xb0>)
 8002cac:	f001 f9dc 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002cb0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <HAL_TIM_MspPostInit+0xb4>)
 8002cce:	f001 f9cb 	bl	8004068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cd2:	bf00      	nop
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40021000 	.word	0x40021000

08002cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <HAL_UART_MspInit+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d152      	bne.n	8002db4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_UART_MspInit+0xd4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d74:	2308      	movs	r3, #8
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <HAL_UART_MspInit+0xd8>)
 8002d80:	f001 f972 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d84:	2304      	movs	r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	2303      	movs	r3, #3
 8002d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d94:	2308      	movs	r3, #8
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	480a      	ldr	r0, [pc, #40]	; (8002dc8 <HAL_UART_MspInit+0xdc>)
 8002da0:	f001 f962 	bl	8004068 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	2035      	movs	r0, #53	; 0x35
 8002daa:	f001 f911 	bl	8003fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002dae:	2035      	movs	r0, #53	; 0x35
 8002db0:	f001 f92a 	bl	8004008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002db4:	bf00      	nop
 8002db6:	3728      	adds	r7, #40	; 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40005000 	.word	0x40005000
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020c00 	.word	0x40020c00

08002dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	; 0x30
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002ddc:	2200      	movs	r2, #0
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	2036      	movs	r0, #54	; 0x36
 8002de2:	f001 f8f5 	bl	8003fd0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002de6:	2036      	movs	r0, #54	; 0x36
 8002de8:	f001 f90e 	bl	8004008 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_InitTick+0xa4>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_InitTick+0xa4>)
 8002df6:	f043 0310 	orr.w	r3, r3, #16
 8002dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_InitTick+0xa4>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e08:	f107 0210 	add.w	r2, r7, #16
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 ffce 	bl	8004db4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e18:	f001 ffa4 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <HAL_InitTick+0xa8>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0c9b      	lsrs	r3, r3, #18
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_InitTick+0xac>)
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <HAL_InitTick+0xb0>)
 8002e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <HAL_InitTick+0xac>)
 8002e38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e3e:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_InitTick+0xac>)
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_InitTick+0xac>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_InitTick+0xac>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e50:	4809      	ldr	r0, [pc, #36]	; (8002e78 <HAL_InitTick+0xac>)
 8002e52:	f001 ffe1 	bl	8004e18 <HAL_TIM_Base_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e5c:	4806      	ldr	r0, [pc, #24]	; (8002e78 <HAL_InitTick+0xac>)
 8002e5e:	f002 f806 	bl	8004e6e <HAL_TIM_Base_Start_IT>
 8002e62:	4603      	mov	r3, r0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3730      	adds	r7, #48	; 0x30
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	431bde83 	.word	0x431bde83
 8002e78:	20000d58 	.word	0x20000d58
 8002e7c:	40001000 	.word	0x40001000

08002e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <HardFault_Handler+0x4>

08002e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <MemManage_Handler+0x4>

08002e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e9e:	e7fe      	b.n	8002e9e <BusFault_Handler+0x4>

08002ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <UsageFault_Handler+0x4>

08002ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f001 faa3 	bl	8004420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ee4:	4805      	ldr	r0, [pc, #20]	; (8002efc <ADC_IRQHandler+0x1c>)
 8002ee6:	f000 f954 	bl	8003192 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <ADC_IRQHandler+0x20>)
 8002eec:	f000 f951 	bl	8003192 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002ef0:	4804      	ldr	r0, [pc, #16]	; (8002f04 <ADC_IRQHandler+0x24>)
 8002ef2:	f000 f94e 	bl	8003192 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000c7c 	.word	0x20000c7c
 8002f00:	2000080c 	.word	0x2000080c
 8002f04:	20000cc4 	.word	0x20000cc4

08002f08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002f0c:	2040      	movs	r0, #64	; 0x40
 8002f0e:	f001 fa87 	bl	8004420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002f12:	2080      	movs	r0, #128	; 0x80
 8002f14:	f001 fa84 	bl	8004420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f22:	f002 f8f5 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000d18 	.word	0x20000d18

08002f30 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <TIM1_CC_IRQHandler+0x10>)
 8002f36:	f002 f8eb 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000d18 	.word	0x20000d18

08002f44 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <UART5_IRQHandler+0x10>)
 8002f4a:	f003 f8c3 	bl	80060d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000854 	.word	0x20000854

08002f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <TIM6_DAC_IRQHandler+0x10>)
 8002f5e:	f002 f8d7 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000d58 	.word	0x20000d58

08002f6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <_sbrk+0x50>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <_sbrk+0x16>
		heap_end = &end;
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <_sbrk+0x50>)
 8002f7e:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <_sbrk+0x54>)
 8002f80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <_sbrk+0x50>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <_sbrk+0x50>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	466a      	mov	r2, sp
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d907      	bls.n	8002fa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002f96:	f004 fe6d 	bl	8007c74 <__errno>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	e006      	b.n	8002fb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <_sbrk+0x50>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <_sbrk+0x50>)
 8002fb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000264 	.word	0x20000264
 8002fc0:	20000da0 	.word	0x20000da0

08002fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <SystemInit+0x28>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <SystemInit+0x28>)
 8002fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SystemInit+0x28>)
 8002fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fde:	609a      	str	r2, [r3, #8]
#endif
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003028 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ff6:	e003      	b.n	8003000 <LoopCopyDataInit>

08002ff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ffe:	3104      	adds	r1, #4

08003000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003008:	d3f6      	bcc.n	8002ff8 <CopyDataInit>
  ldr  r2, =_sbss
 800300a:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800300c:	e002      	b.n	8003014 <LoopFillZerobss>

0800300e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800300e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003010:	f842 3b04 	str.w	r3, [r2], #4

08003014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003018:	d3f9      	bcc.n	800300e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800301a:	f7ff ffd3 	bl	8002fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301e:	f004 fe2f 	bl	8007c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003022:	f7fe fcb3 	bl	800198c <main>
  bx  lr    
 8003026:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003028:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800302c:	0800a1e8 	.word	0x0800a1e8
  ldr  r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003034:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8003038:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800303c:	20000da0 	.word	0x20000da0

08003040 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003040:	e7fe      	b.n	8003040 <CAN1_RX0_IRQHandler>
	...

08003044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_Init+0x40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <HAL_Init+0x40>)
 800304e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_Init+0x40>)
 800305a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_Init+0x40>)
 8003066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306c:	2003      	movs	r0, #3
 800306e:	f000 ffa4 	bl	8003fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003072:	2000      	movs	r0, #0
 8003074:	f7ff feaa 	bl	8002dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003078:	f7ff fcc8 	bl	8002a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023c00 	.word	0x40023c00

08003088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000001c 	.word	0x2000001c
 80030ac:	20000d98 	.word	0x20000d98

080030b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000d98 	.word	0x20000d98

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_Delay+0x40>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	2000001c 	.word	0x2000001c

0800310c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e033      	b.n	800318a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff fc96 	bl	8002a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003152:	f023 0302 	bic.w	r3, r3, #2
 8003156:	f043 0202 	orr.w	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 faa8 	bl	80036b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
 800317a:	e001      	b.n	8003180 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d049      	beq.n	8003268 <HAL_ADC_IRQHandler+0xd6>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d046      	beq.n	8003268 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d12b      	bne.n	8003258 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d127      	bne.n	8003258 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003220:	2b00      	cmp	r3, #0
 8003222:	d119      	bne.n	8003258 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0220 	bic.w	r2, r2, #32
 8003232:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8db 	bl	8003414 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f06f 0212 	mvn.w	r2, #18
 8003266:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d057      	beq.n	800334a <HAL_ADC_IRQHandler+0x1b8>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d054      	beq.n	800334a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d139      	bne.n	800333a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d006      	beq.n	80032e2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d12b      	bne.n	800333a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d124      	bne.n	800333a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11d      	bne.n	800333a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003314:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fa86 	bl	800284c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 020c 	mvn.w	r2, #12
 8003348:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d017      	beq.n	80033ac <HAL_ADC_IRQHandler+0x21a>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d014      	beq.n	80033ac <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10d      	bne.n	80033ac <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f843 	bl	8003428 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0201 	mvn.w	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_ADC_IRQHandler+0x27a>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f043 0202 	orr.w	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0220 	mvn.w	r2, #32
 80033fa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f81d 	bl	800343c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0220 	mvn.w	r2, #32
 800340a:	601a      	str	r2, [r3, #0]
  }
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1c>
 8003468:	2302      	movs	r3, #2
 800346a:	e113      	b.n	8003694 <HAL_ADC_ConfigChannel+0x244>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b09      	cmp	r3, #9
 800347a:	d925      	bls.n	80034c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68d9      	ldr	r1, [r3, #12]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	3b1e      	subs	r3, #30
 8003492:	2207      	movs	r2, #7
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43da      	mvns	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	400a      	ands	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68d9      	ldr	r1, [r3, #12]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	4603      	mov	r3, r0
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4403      	add	r3, r0
 80034ba:	3b1e      	subs	r3, #30
 80034bc:	409a      	lsls	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e022      	b.n	800350e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6919      	ldr	r1, [r3, #16]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	2207      	movs	r2, #7
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6919      	ldr	r1, [r3, #16]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4403      	add	r3, r0
 8003504:	409a      	lsls	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b06      	cmp	r3, #6
 8003514:	d824      	bhi.n	8003560 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	3b05      	subs	r3, #5
 8003528:	221f      	movs	r2, #31
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	400a      	ands	r2, r1
 8003536:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	4618      	mov	r0, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b05      	subs	r3, #5
 8003552:	fa00 f203 	lsl.w	r2, r0, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
 800355e:	e04c      	b.n	80035fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d824      	bhi.n	80035b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b23      	subs	r3, #35	; 0x23
 800357a:	221f      	movs	r2, #31
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43da      	mvns	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	400a      	ands	r2, r1
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	3b23      	subs	r3, #35	; 0x23
 80035a4:	fa00 f203 	lsl.w	r2, r0, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
 80035b0:	e023      	b.n	80035fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3b41      	subs	r3, #65	; 0x41
 80035c4:	221f      	movs	r2, #31
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	3b41      	subs	r3, #65	; 0x41
 80035ee:	fa00 f203 	lsl.w	r2, r0, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_ADC_ConfigChannel+0x250>)
 80035fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_ADC_ConfigChannel+0x254>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10f      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1d8>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b12      	cmp	r3, #18
 800360e:	d10b      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_ADC_ConfigChannel+0x254>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d12b      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_ADC_ConfigChannel+0x258>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x1f4>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b11      	cmp	r3, #17
 8003642:	d122      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_ADC_ConfigChannel+0x258>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_ADC_ConfigChannel+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_ADC_ConfigChannel+0x260>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	0c9a      	lsrs	r2, r3, #18
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800367c:	e002      	b.n	8003684 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3b01      	subs	r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f9      	bne.n	800367e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012300 	.word	0x40012300
 80036a4:	40012000 	.word	0x40012000
 80036a8:	10000012 	.word	0x10000012
 80036ac:	20000014 	.word	0x20000014
 80036b0:	431bde83 	.word	0x431bde83

080036b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036bc:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <ADC_Init+0x1f0>)
 80036be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	021a      	lsls	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800370c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <ADC_Init+0x1f4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800375a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6899      	ldr	r1, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800377c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e00f      	b.n	80037b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0202 	bic.w	r2, r2, #2
 80037c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e1b      	ldrb	r3, [r3, #24]
 80037cc:	005a      	lsls	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	3b01      	subs	r3, #1
 800380c:	035a      	lsls	r2, r3, #13
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	e007      	b.n	8003828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003826:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	3b01      	subs	r3, #1
 8003844:	051a      	lsls	r2, r3, #20
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800385c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800386a:	025a      	lsls	r2, r3, #9
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	029a      	lsls	r2, r3, #10
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012300 	.word	0x40012300
 80038a8:	0f000001 	.word	0x0f000001

080038ac <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_ADCEx_InjectedStart_IT+0x22>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0a5      	b.n	8003a1a <HAL_ADCEx_InjectedStart_IT+0x16e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d018      	beq.n	8003916 <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038f4:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <HAL_ADCEx_InjectedStart_IT+0x17c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a4c      	ldr	r2, [pc, #304]	; (8003a2c <HAL_ADCEx_InjectedStart_IT+0x180>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9a      	lsrs	r2, r3, #18
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003908:	e002      	b.n	8003910 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3b01      	subs	r3, #1
 800390e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f9      	bne.n	800390a <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d179      	bne.n	8003a18 <HAL_ADCEx_InjectedStart_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0204 	mvn.w	r2, #4
 800395a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800396a:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800396c:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <HAL_ADCEx_InjectedStart_IT+0x184>)
 800396e:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	2b00      	cmp	r3, #0
 800397a:	d124      	bne.n	80039c6 <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d034      	beq.n	8003a18 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d031      	beq.n	8003a18 <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	e028      	b.n	8003a18 <HAL_ADCEx_InjectedStart_IT+0x16c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a0f      	ldr	r2, [pc, #60]	; (8003a34 <HAL_ADCEx_InjectedStart_IT+0x188>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10d      	bne.n	8003a18 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a16:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000014 	.word	0x20000014
 8003a2c:	431bde83 	.word	0x431bde83
 8003a30:	40012300 	.word	0x40012300
 8003a34:	40012000 	.word	0x40012000

08003a38 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0204 	mvn.w	r2, #4
 8003a4e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d81f      	bhi.n	8003a98 <HAL_ADCEx_InjectedGetValue+0x60>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <HAL_ADCEx_InjectedGetValue+0x28>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a8f 	.word	0x08003a8f
 8003a64:	08003a85 	.word	0x08003a85
 8003a68:	08003a7b 	.word	0x08003a7b
 8003a6c:	08003a71 	.word	0x08003a71
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a76:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8003a78:	e00f      	b.n	8003a9a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8003a82:	e00a      	b.n	8003a9a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003a8c:	e005      	b.n	8003a9a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003a96:	e000      	b.n	8003a9a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8003a98:	bf00      	nop
  }
  return tmp;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e17b      	b.n	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x310>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d925      	bls.n	8003b1c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68d9      	ldr	r1, [r3, #12]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3b1e      	subs	r3, #30
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43da      	mvns	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	400a      	ands	r2, r1
 8003af4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68d9      	ldr	r1, [r3, #12]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	4603      	mov	r3, r0
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4403      	add	r3, r0
 8003b0e:	3b1e      	subs	r3, #30
 8003b10:	409a      	lsls	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	e022      	b.n	8003b62 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6919      	ldr	r1, [r3, #16]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	2207      	movs	r2, #7
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43da      	mvns	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6919      	ldr	r1, [r3, #16]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4618      	mov	r0, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4403      	add	r3, r0
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	051a      	lsls	r2, r3, #20
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	3303      	adds	r3, #3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	221f      	movs	r2, #31
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3303      	adds	r3, #3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	fa00 f203 	lsl.w	r2, r0, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4a73      	ldr	r2, [pc, #460]	; (8003dc4 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6899      	ldr	r1, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	e00f      	b.n	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003c5e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	7d5b      	ldrb	r3, [r3, #21]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	e007      	b.n	8003c8a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c88:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7d1b      	ldrb	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	e007      	b.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cb2:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d017      	beq.n	8003cec <HAL_ADCEx_InjectedConfigChannel+0x244>
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d029      	beq.n	8003d14 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d13b      	bne.n	8003d3c <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003cd2:	f023 030f 	bic.w	r3, r3, #15
 8003cd6:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6959      	ldr	r1, [r3, #20]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	615a      	str	r2, [r3, #20]
      break;
 8003cea:	e03b      	b.n	8003d64 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003cfa:	f023 030f 	bic.w	r3, r3, #15
 8003cfe:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	619a      	str	r2, [r3, #24]
      break;
 8003d12:	e027      	b.n	8003d64 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d22:	f023 030f 	bic.w	r3, r3, #15
 8003d26:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69d9      	ldr	r1, [r3, #28]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e013      	b.n	8003d64 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d4a:	f023 030f 	bic.w	r3, r3, #15
 8003d4e:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a19      	ldr	r1, [r3, #32]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	621a      	str	r2, [r3, #32]
      break;
 8003d62:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d64:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8003d66:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d109      	bne.n	8003d86 <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b12      	cmp	r3, #18
 8003d78:	d105      	bne.n	8003d86 <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10e      	bne.n	8003dae <HAL_ADCEx_InjectedConfigChannel+0x306>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b11      	cmp	r3, #17
 8003da0:	d105      	bne.n	8003dae <HAL_ADCEx_InjectedConfigChannel+0x306>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	000f0001 	.word	0x000f0001
 8003dc8:	40012300 	.word	0x40012300
 8003dcc:	40012000 	.word	0x40012000
 8003dd0:	10000012 	.word	0x10000012

08003dd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e031      	b.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 021f 	bic.w	r2, r3, #31
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40012300 	.word	0x40012300

08003e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e92:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	60d3      	str	r3, [r2, #12]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f003 0307 	and.w	r3, r3, #7
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	db0b      	blt.n	8003eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	f003 021f 	and.w	r2, r3, #31
 8003edc:	4907      	ldr	r1, [pc, #28]	; (8003efc <__NVIC_EnableIRQ+0x38>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000e100 	.word	0xe000e100

08003f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db0a      	blt.n	8003f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	490c      	ldr	r1, [pc, #48]	; (8003f4c <__NVIC_SetPriority+0x4c>)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	0112      	lsls	r2, r2, #4
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	440b      	add	r3, r1
 8003f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f28:	e00a      	b.n	8003f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4908      	ldr	r1, [pc, #32]	; (8003f50 <__NVIC_SetPriority+0x50>)
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	3b04      	subs	r3, #4
 8003f38:	0112      	lsls	r2, r2, #4
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	761a      	strb	r2, [r3, #24]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000e100 	.word	0xe000e100
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f1c3 0307 	rsb	r3, r3, #7
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	bf28      	it	cs
 8003f72:	2304      	movcs	r3, #4
 8003f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d902      	bls.n	8003f84 <NVIC_EncodePriority+0x30>
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3b03      	subs	r3, #3
 8003f82:	e000      	b.n	8003f86 <NVIC_EncodePriority+0x32>
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f88:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43da      	mvns	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	401a      	ands	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	43d9      	mvns	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	4313      	orrs	r3, r2
         );
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff4c 	bl	8003e60 <__NVIC_SetPriorityGrouping>
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe2:	f7ff ff61 	bl	8003ea8 <__NVIC_GetPriorityGrouping>
 8003fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f7ff ffb1 	bl	8003f54 <NVIC_EncodePriority>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff80 	bl	8003f00 <__NVIC_SetPriority>
}
 8004000:	bf00      	nop
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff54 	bl	8003ec4 <__NVIC_EnableIRQ>
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e00c      	b.n	800405c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2205      	movs	r2, #5
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e177      	b.n	8004374 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	f040 8166 	bne.w	800436e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d00b      	beq.n	80040c2 <HAL_GPIO_Init+0x5a>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040b6:	2b11      	cmp	r3, #17
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b12      	cmp	r3, #18
 80040c0:	d130      	bne.n	8004124 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2203      	movs	r2, #3
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f8:	2201      	movs	r2, #1
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 0201 	and.w	r2, r3, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0xfc>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b12      	cmp	r3, #18
 8004162:	d123      	bne.n	80041ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80c0 	beq.w	800436e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <HAL_GPIO_Init+0x320>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	4a64      	ldr	r2, [pc, #400]	; (8004388 <HAL_GPIO_Init+0x320>)
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fc:	6453      	str	r3, [r2, #68]	; 0x44
 80041fe:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_GPIO_Init+0x320>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800420a:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_GPIO_Init+0x324>)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	3302      	adds	r3, #2
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a57      	ldr	r2, [pc, #348]	; (8004390 <HAL_GPIO_Init+0x328>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d037      	beq.n	80042a6 <HAL_GPIO_Init+0x23e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a56      	ldr	r2, [pc, #344]	; (8004394 <HAL_GPIO_Init+0x32c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d031      	beq.n	80042a2 <HAL_GPIO_Init+0x23a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a55      	ldr	r2, [pc, #340]	; (8004398 <HAL_GPIO_Init+0x330>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <HAL_GPIO_Init+0x236>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a54      	ldr	r2, [pc, #336]	; (800439c <HAL_GPIO_Init+0x334>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d025      	beq.n	800429a <HAL_GPIO_Init+0x232>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a53      	ldr	r2, [pc, #332]	; (80043a0 <HAL_GPIO_Init+0x338>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <HAL_GPIO_Init+0x22e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a52      	ldr	r2, [pc, #328]	; (80043a4 <HAL_GPIO_Init+0x33c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d019      	beq.n	8004292 <HAL_GPIO_Init+0x22a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a51      	ldr	r2, [pc, #324]	; (80043a8 <HAL_GPIO_Init+0x340>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_GPIO_Init+0x226>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a50      	ldr	r2, [pc, #320]	; (80043ac <HAL_GPIO_Init+0x344>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00d      	beq.n	800428a <HAL_GPIO_Init+0x222>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4f      	ldr	r2, [pc, #316]	; (80043b0 <HAL_GPIO_Init+0x348>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <HAL_GPIO_Init+0x21e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4e      	ldr	r2, [pc, #312]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_GPIO_Init+0x21a>
 800427e:	2309      	movs	r3, #9
 8004280:	e012      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004282:	230a      	movs	r3, #10
 8004284:	e010      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004286:	2308      	movs	r3, #8
 8004288:	e00e      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800428a:	2307      	movs	r3, #7
 800428c:	e00c      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800428e:	2306      	movs	r3, #6
 8004290:	e00a      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004292:	2305      	movs	r3, #5
 8004294:	e008      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004296:	2304      	movs	r3, #4
 8004298:	e006      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800429a:	2303      	movs	r3, #3
 800429c:	e004      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800429e:	2302      	movs	r3, #2
 80042a0:	e002      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 80042a6:	2300      	movs	r3, #0
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	f002 0203 	and.w	r2, r2, #3
 80042ae:	0092      	lsls	r2, r2, #2
 80042b0:	4093      	lsls	r3, r2
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b8:	4934      	ldr	r1, [pc, #208]	; (800438c <HAL_GPIO_Init+0x324>)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c6:	4b3c      	ldr	r3, [pc, #240]	; (80043b8 <HAL_GPIO_Init+0x350>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ea:	4a33      	ldr	r2, [pc, #204]	; (80043b8 <HAL_GPIO_Init+0x350>)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042f0:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <HAL_GPIO_Init+0x350>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004314:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <HAL_GPIO_Init+0x350>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <HAL_GPIO_Init+0x350>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800433e:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_GPIO_Init+0x350>)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004344:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <HAL_GPIO_Init+0x350>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_GPIO_Init+0x350>)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3301      	adds	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	f67f ae84 	bls.w	8004084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800437c:	bf00      	nop
 800437e:	3724      	adds	r7, #36	; 0x24
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40023800 	.word	0x40023800
 800438c:	40013800 	.word	0x40013800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40020800 	.word	0x40020800
 800439c:	40020c00 	.word	0x40020c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40021400 	.word	0x40021400
 80043a8:	40021800 	.word	0x40021800
 80043ac:	40021c00 	.word	0x40021c00
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40022400 	.word	0x40022400
 80043b8:	40013c00 	.word	0x40013c00

080043bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	887b      	ldrh	r3, [r7, #2]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
 80043d8:	e001      	b.n	80043de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
 80043f8:	4613      	mov	r3, r2
 80043fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043fc:	787b      	ldrb	r3, [r7, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004408:	e003      	b.n	8004412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800440a:	887b      	ldrh	r3, [r7, #2]
 800440c:	041a      	lsls	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	619a      	str	r2, [r3, #24]
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004436:	4a05      	ldr	r2, [pc, #20]	; (800444c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe f8e8 	bl	8002614 <HAL_GPIO_EXTI_Callback>
  }
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40013c00 	.word	0x40013c00

08004450 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800447c:	f7fe fe18 	bl	80030b0 <HAL_GetTick>
 8004480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004482:	e009      	b.n	8004498 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004484:	f7fe fe14 	bl	80030b0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004492:	d901      	bls.n	8004498 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e01f      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004498:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d1ee      	bne.n	8004484 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ac:	f7fe fe00 	bl	80030b0 <HAL_GetTick>
 80044b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044b2:	e009      	b.n	80044c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044b4:	f7fe fdfc 	bl	80030b0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c2:	d901      	bls.n	80044c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e007      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d4:	d1ee      	bne.n	80044b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40023800 	.word	0x40023800
 80044e4:	420e0040 	.word	0x420e0040
 80044e8:	40007000 	.word	0x40007000
 80044ec:	420e0044 	.word	0x420e0044

080044f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e25b      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d075      	beq.n	80045fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800450e:	4ba3      	ldr	r3, [pc, #652]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b04      	cmp	r3, #4
 8004518:	d00c      	beq.n	8004534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451a:	4ba0      	ldr	r3, [pc, #640]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004522:	2b08      	cmp	r3, #8
 8004524:	d112      	bne.n	800454c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004526:	4b9d      	ldr	r3, [pc, #628]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004532:	d10b      	bne.n	800454c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	4b99      	ldr	r3, [pc, #612]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d05b      	beq.n	80045f8 <HAL_RCC_OscConfig+0x108>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d157      	bne.n	80045f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e236      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004554:	d106      	bne.n	8004564 <HAL_RCC_OscConfig+0x74>
 8004556:	4b91      	ldr	r3, [pc, #580]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a90      	ldr	r2, [pc, #576]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xb0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x98>
 800456e:	4b8b      	ldr	r3, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a8a      	ldr	r2, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b88      	ldr	r3, [pc, #544]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a87      	ldr	r2, [pc, #540]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xb0>
 8004588:	4b84      	ldr	r3, [pc, #528]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a83      	ldr	r2, [pc, #524]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a80      	ldr	r2, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe fd82 	bl	80030b0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fe fd7e 	bl	80030b0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1fb      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xc0>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fe fd6e 	bl	80030b0 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fe fd6a 	bl	80030b0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1e7      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	4b6c      	ldr	r3, [pc, #432]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0xe8>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004612:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11c      	bne.n	8004658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461e:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	4b5c      	ldr	r3, [pc, #368]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCC_OscConfig+0x152>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1bb      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b56      	ldr	r3, [pc, #344]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4952      	ldr	r1, [pc, #328]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	e03a      	b.n	80046ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004660:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <HAL_RCC_OscConfig+0x2b0>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe fd23 	bl	80030b0 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466e:	f7fe fd1f 	bl	80030b0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e19c      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	4b46      	ldr	r3, [pc, #280]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4940      	ldr	r1, [pc, #256]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a2:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <HAL_RCC_OscConfig+0x2b0>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fe fd02 	bl	80030b0 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b0:	f7fe fcfe 	bl	80030b0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e17b      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d030      	beq.n	800473c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <HAL_RCC_OscConfig+0x2b4>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fe fce2 	bl	80030b0 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fe fcde 	bl	80030b0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e15b      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x200>
 800470e:	e015      	b.n	800473c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004710:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x2b4>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004716:	f7fe fccb 	bl	80030b0 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800471e:	f7fe fcc7 	bl	80030b0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e144      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b1a      	ldr	r3, [pc, #104]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f0      	bne.n	800471e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80a0 	beq.w	800488a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCC_OscConfig+0x2b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d121      	bne.n	80047ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_RCC_OscConfig+0x2b8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <HAL_RCC_OscConfig+0x2b8>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fe fc8d 	bl	80030b0 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	e011      	b.n	80047be <HAL_RCC_OscConfig+0x2ce>
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	42470000 	.word	0x42470000
 80047a4:	42470e80 	.word	0x42470e80
 80047a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ac:	f7fe fc80 	bl	80030b0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0fd      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b81      	ldr	r3, [pc, #516]	; (80049c4 <HAL_RCC_OscConfig+0x4d4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d106      	bne.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
 80047d2:	4b7d      	ldr	r3, [pc, #500]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a7c      	ldr	r2, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e01c      	b.n	800481a <HAL_RCC_OscConfig+0x32a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d10c      	bne.n	8004802 <HAL_RCC_OscConfig+0x312>
 80047e8:	4b77      	ldr	r3, [pc, #476]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a76      	ldr	r2, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
 80047f4:	4b74      	ldr	r3, [pc, #464]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a73      	ldr	r2, [pc, #460]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e00b      	b.n	800481a <HAL_RCC_OscConfig+0x32a>
 8004802:	4b71      	ldr	r3, [pc, #452]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a70      	ldr	r2, [pc, #448]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	4b6e      	ldr	r3, [pc, #440]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a6d      	ldr	r2, [pc, #436]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fe fc45 	bl	80030b0 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fe fc41 	bl	80030b0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0bc      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b61      	ldr	r3, [pc, #388]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ee      	beq.n	800482a <HAL_RCC_OscConfig+0x33a>
 800484c:	e014      	b.n	8004878 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484e:	f7fe fc2f 	bl	80030b0 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004854:	e00a      	b.n	800486c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fe fc2b 	bl	80030b0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	; 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e0a6      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486c:	4b56      	ldr	r3, [pc, #344]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ee      	bne.n	8004856 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b52      	ldr	r3, [pc, #328]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a51      	ldr	r2, [pc, #324]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8092 	beq.w	80049b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004894:	4b4c      	ldr	r3, [pc, #304]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d05c      	beq.n	800495a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d141      	bne.n	800492c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b48      	ldr	r3, [pc, #288]	; (80049cc <HAL_RCC_OscConfig+0x4dc>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fe fbff 	bl	80030b0 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fe fbfb 	bl	80030b0 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e078      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c8:	4b3f      	ldr	r3, [pc, #252]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f0      	bne.n	80048b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	019b      	lsls	r3, r3, #6
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	3b01      	subs	r3, #1
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	061b      	lsls	r3, r3, #24
 80048f8:	4933      	ldr	r1, [pc, #204]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048fe:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_RCC_OscConfig+0x4dc>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fe fbd4 	bl	80030b0 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fe fbd0 	bl	80030b0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e04d      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x41c>
 800492a:	e045      	b.n	80049b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492c:	4b27      	ldr	r3, [pc, #156]	; (80049cc <HAL_RCC_OscConfig+0x4dc>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004932:	f7fe fbbd 	bl	80030b0 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493a:	f7fe fbb9 	bl	80030b0 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e036      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494c:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f0      	bne.n	800493a <HAL_RCC_OscConfig+0x44a>
 8004958:	e02e      	b.n	80049b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e029      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <HAL_RCC_OscConfig+0x4d8>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	429a      	cmp	r2, r3
 8004978:	d11c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d115      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800498e:	4013      	ands	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004994:	4293      	cmp	r3, r2
 8004996:	d10d      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40007000 	.word	0x40007000
 80049c8:	40023800 	.word	0x40023800
 80049cc:	42470060 	.word	0x42470060

080049d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0cc      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b68      	ldr	r3, [pc, #416]	; (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d90c      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b65      	ldr	r3, [pc, #404]	; (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0b8      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a58      	ldr	r2, [pc, #352]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a52      	ldr	r2, [pc, #328]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	494d      	ldr	r1, [pc, #308]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d044      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d119      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8e:	4b3f      	ldr	r3, [pc, #252]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e06f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9e:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e067      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4934      	ldr	r1, [pc, #208]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fe faf6 	bl	80030b0 <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fe faf2 	bl	80030b0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e04f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d20c      	bcs.n	8004b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e032      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4916      	ldr	r1, [pc, #88]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	490e      	ldr	r1, [pc, #56]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b56:	f000 f821 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	5cd3      	ldrb	r3, [r2, r3]
 8004b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_ClockConfig+0x1c8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe f928 	bl	8002dcc <HAL_InitTick>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023c00 	.word	0x40023c00
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	08009d88 	.word	0x08009d88
 8004b94:	20000014 	.word	0x20000014
 8004b98:	20000018 	.word	0x20000018

08004b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	2300      	movs	r3, #0
 8004bac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb2:	4b63      	ldr	r3, [pc, #396]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d007      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x32>
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d008      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x38>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 80b4 	bne.w	8004d30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b5e      	ldr	r3, [pc, #376]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bca:	60bb      	str	r3, [r7, #8]
       break;
 8004bcc:	e0b3      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bce:	4b5e      	ldr	r3, [pc, #376]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004bd0:	60bb      	str	r3, [r7, #8]
      break;
 8004bd2:	e0b0      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd4:	4b5a      	ldr	r3, [pc, #360]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bde:	4b58      	ldr	r3, [pc, #352]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04a      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bea:	4b55      	ldr	r3, [pc, #340]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	ea03 0501 	and.w	r5, r3, r1
 8004c00:	ea04 0602 	and.w	r6, r4, r2
 8004c04:	4629      	mov	r1, r5
 8004c06:	4632      	mov	r2, r6
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	f04f 0400 	mov.w	r4, #0
 8004c10:	0154      	lsls	r4, r2, #5
 8004c12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c16:	014b      	lsls	r3, r1, #5
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	1b49      	subs	r1, r1, r5
 8004c1e:	eb62 0206 	sbc.w	r2, r2, r6
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	f04f 0400 	mov.w	r4, #0
 8004c2a:	0194      	lsls	r4, r2, #6
 8004c2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c30:	018b      	lsls	r3, r1, #6
 8004c32:	1a5b      	subs	r3, r3, r1
 8004c34:	eb64 0402 	sbc.w	r4, r4, r2
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	00e2      	lsls	r2, r4, #3
 8004c42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c46:	00d9      	lsls	r1, r3, #3
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4614      	mov	r4, r2
 8004c4c:	195b      	adds	r3, r3, r5
 8004c4e:	eb44 0406 	adc.w	r4, r4, r6
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	0262      	lsls	r2, r4, #9
 8004c5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c60:	0259      	lsls	r1, r3, #9
 8004c62:	460b      	mov	r3, r1
 8004c64:	4614      	mov	r4, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	4621      	mov	r1, r4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f04f 0400 	mov.w	r4, #0
 8004c70:	461a      	mov	r2, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	f7fc f818 	bl	8000ca8 <__aeabi_uldivmod>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e049      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c80:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	f04f 0400 	mov.w	r4, #0
 8004c8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	ea03 0501 	and.w	r5, r3, r1
 8004c96:	ea04 0602 	and.w	r6, r4, r2
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	f04f 0400 	mov.w	r4, #0
 8004ca6:	0154      	lsls	r4, r2, #5
 8004ca8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cac:	014b      	lsls	r3, r1, #5
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	1b49      	subs	r1, r1, r5
 8004cb4:	eb62 0206 	sbc.w	r2, r2, r6
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	f04f 0400 	mov.w	r4, #0
 8004cc0:	0194      	lsls	r4, r2, #6
 8004cc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cc6:	018b      	lsls	r3, r1, #6
 8004cc8:	1a5b      	subs	r3, r3, r1
 8004cca:	eb64 0402 	sbc.w	r4, r4, r2
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cdc:	00d9      	lsls	r1, r3, #3
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	195b      	adds	r3, r3, r5
 8004ce4:	eb44 0406 	adc.w	r4, r4, r6
 8004ce8:	f04f 0100 	mov.w	r1, #0
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	02a2      	lsls	r2, r4, #10
 8004cf2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cf6:	0299      	lsls	r1, r3, #10
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4614      	mov	r4, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	4621      	mov	r1, r4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	461a      	mov	r2, r3
 8004d08:	4623      	mov	r3, r4
 8004d0a:	f7fb ffcd 	bl	8000ca8 <__aeabi_uldivmod>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	460c      	mov	r4, r1
 8004d12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	60bb      	str	r3, [r7, #8]
      break;
 8004d2e:	e002      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d32:	60bb      	str	r3, [r7, #8]
      break;
 8004d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d36:	68bb      	ldr	r3, [r7, #8]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000014 	.word	0x20000014

08004d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d68:	f7ff fff0 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d6c:	4601      	mov	r1, r0
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0a9b      	lsrs	r3, r3, #10
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4a03      	ldr	r2, [pc, #12]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	08009d98 	.word	0x08009d98

08004d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d90:	f7ff ffdc 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d94:	4601      	mov	r1, r0
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	0b5b      	lsrs	r3, r3, #13
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4a03      	ldr	r2, [pc, #12]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da2:	5cd3      	ldrb	r3, [r2, r3]
 8004da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	08009d98 	.word	0x08009d98

08004db4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dc4:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0203 	and.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_RCC_GetClockConfig+0x60>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 020f 	and.w	r2, r3, #15
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40023c00 	.word	0x40023c00

08004e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e01d      	b.n	8004e66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fd fec8 	bl	8002bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 fc68 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0201 	orr.w	r2, r2, #1
 8004e84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e01d      	b.n	8004f04 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f815 	bl	8004f0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f000 fc19 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d841      	bhi.n	8004fb4 <HAL_TIM_OC_Start_IT+0x94>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <HAL_TIM_OC_Start_IT+0x18>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f6d 	.word	0x08004f6d
 8004f3c:	08004fb5 	.word	0x08004fb5
 8004f40:	08004fb5 	.word	0x08004fb5
 8004f44:	08004fb5 	.word	0x08004fb5
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004fb5 	.word	0x08004fb5
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08004fb5 	.word	0x08004fb5
 8004f58:	08004f91 	.word	0x08004f91
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fb5 	.word	0x08004fb5
 8004f64:	08004fb5 	.word	0x08004fb5
 8004f68:	08004fa3 	.word	0x08004fa3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0202 	orr.w	r2, r2, #2
 8004f7a:	60da      	str	r2, [r3, #12]
      break;
 8004f7c:	e01b      	b.n	8004fb6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0204 	orr.w	r2, r2, #4
 8004f8c:	60da      	str	r2, [r3, #12]
      break;
 8004f8e:	e012      	b.n	8004fb6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0208 	orr.w	r2, r2, #8
 8004f9e:	60da      	str	r2, [r3, #12]
      break;
 8004fa0:	e009      	b.n	8004fb6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0210 	orr.w	r2, r2, #16
 8004fb0:	60da      	str	r2, [r3, #12]
      break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8004fb4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fe9e 	bl	8005d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <HAL_TIM_OC_Start_IT+0x100>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIM_OC_Start_IT+0xb8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a14      	ldr	r2, [pc, #80]	; (8005024 <HAL_TIM_OC_Start_IT+0x104>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_OC_Start_IT+0xbc>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_TIM_OC_Start_IT+0xbe>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b06      	cmp	r3, #6
 8005002:	d007      	beq.n	8005014 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40010400 	.word	0x40010400

08005028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e01d      	b.n	8005076 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f815 	bl	800507e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fb60 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2201      	movs	r2, #1
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fe2a 	bl	8005d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <HAL_TIM_PWM_Start+0x74>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_PWM_Start+0x2c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <HAL_TIM_PWM_Start+0x78>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_TIM_PWM_Start+0x30>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_TIM_PWM_Start+0x32>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b06      	cmp	r3, #6
 80050ea:	d007      	beq.n	80050fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400

08005110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0202 	mvn.w	r2, #2
 800513c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 facb 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fabd 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 face 	bl	8005702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0204 	mvn.w	r2, #4
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 faa1 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa93 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 faa4 	bl	8005702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0208 	mvn.w	r2, #8
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa77 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa69 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fa7a 	bl	8005702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b10      	cmp	r3, #16
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b10      	cmp	r3, #16
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0210 	mvn.w	r2, #16
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2208      	movs	r2, #8
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa4d 	bl	80056ee <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa3f 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa50 	bl	8005702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0201 	mvn.w	r2, #1
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd fb7e 	bl	8002990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fe48 	bl	8005f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa15 	bl	8005716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b20      	cmp	r3, #32
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0220 	mvn.w	r2, #32
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fe12 	bl	8005f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005336:	2302      	movs	r3, #2
 8005338:	e04e      	b.n	80053d8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	d839      	bhi.n	80053c4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005350:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	0800538d 	.word	0x0800538d
 800535c:	080053c5 	.word	0x080053c5
 8005360:	080053c5 	.word	0x080053c5
 8005364:	080053c5 	.word	0x080053c5
 8005368:	0800539b 	.word	0x0800539b
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053c5 	.word	0x080053c5
 8005374:	080053c5 	.word	0x080053c5
 8005378:	080053a9 	.word	0x080053a9
 800537c:	080053c5 	.word	0x080053c5
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053c5 	.word	0x080053c5
 8005388:	080053b7 	.word	0x080053b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fa6a 	bl	800586c <TIM_OC1_SetConfig>
      break;
 8005398:	e015      	b.n	80053c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fad3 	bl	800594c <TIM_OC2_SetConfig>
      break;
 80053a6:	e00e      	b.n	80053c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fb42 	bl	8005a38 <TIM_OC3_SetConfig>
      break;
 80053b4:	e007      	b.n	80053c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fbaf 	bl	8005b20 <TIM_OC4_SetConfig>
      break;
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80053c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0b4      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x184>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b0c      	cmp	r3, #12
 800540e:	f200 809f 	bhi.w	8005550 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	0800544d 	.word	0x0800544d
 800541c:	08005551 	.word	0x08005551
 8005420:	08005551 	.word	0x08005551
 8005424:	08005551 	.word	0x08005551
 8005428:	0800548d 	.word	0x0800548d
 800542c:	08005551 	.word	0x08005551
 8005430:	08005551 	.word	0x08005551
 8005434:	08005551 	.word	0x08005551
 8005438:	080054cf 	.word	0x080054cf
 800543c:	08005551 	.word	0x08005551
 8005440:	08005551 	.word	0x08005551
 8005444:	08005551 	.word	0x08005551
 8005448:	0800550f 	.word	0x0800550f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fa0a 	bl	800586c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0208 	orr.w	r2, r2, #8
 8005466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0204 	bic.w	r2, r2, #4
 8005476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6999      	ldr	r1, [r3, #24]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	619a      	str	r2, [r3, #24]
      break;
 800548a:	e062      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fa5a 	bl	800594c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6999      	ldr	r1, [r3, #24]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	619a      	str	r2, [r3, #24]
      break;
 80054cc:	e041      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 faaf 	bl	8005a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0208 	orr.w	r2, r2, #8
 80054e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0204 	bic.w	r2, r2, #4
 80054f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69d9      	ldr	r1, [r3, #28]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	61da      	str	r2, [r3, #28]
      break;
 800550c:	e021      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fb03 	bl	8005b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69d9      	ldr	r1, [r3, #28]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	021a      	lsls	r2, r3, #8
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	61da      	str	r2, [r3, #28]
      break;
 800554e:	e000      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005550:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_TIM_ConfigClockSource+0x18>
 8005580:	2302      	movs	r3, #2
 8005582:	e0a6      	b.n	80056d2 <HAL_TIM_ConfigClockSource+0x166>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d067      	beq.n	800568c <HAL_TIM_ConfigClockSource+0x120>
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d80b      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x6c>
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d073      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0x140>
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d802      	bhi.n	80055ce <HAL_TIM_ConfigClockSource+0x62>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d06f      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80055cc:	e078      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d06c      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0x140>
 80055d2:	2b30      	cmp	r3, #48	; 0x30
 80055d4:	d06a      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80055d6:	e073      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055d8:	2b70      	cmp	r3, #112	; 0x70
 80055da:	d00d      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0x8c>
 80055dc:	2b70      	cmp	r3, #112	; 0x70
 80055de:	d804      	bhi.n	80055ea <HAL_TIM_ConfigClockSource+0x7e>
 80055e0:	2b50      	cmp	r3, #80	; 0x50
 80055e2:	d033      	beq.n	800564c <HAL_TIM_ConfigClockSource+0xe0>
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d041      	beq.n	800566c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80055e8:	e06a      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ee:	d066      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x152>
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f4:	d017      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055f6:	e063      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6899      	ldr	r1, [r3, #8]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f000 fb5a 	bl	8005cc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800561a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	609a      	str	r2, [r3, #8]
      break;
 8005624:	e04c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6899      	ldr	r1, [r3, #8]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f000 fb43 	bl	8005cc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005648:	609a      	str	r2, [r3, #8]
      break;
 800564a:	e039      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	461a      	mov	r2, r3
 800565a:	f000 fab7 	bl	8005bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2150      	movs	r1, #80	; 0x50
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fb10 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 800566a:	e029      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	461a      	mov	r2, r3
 800567a:	f000 fad6 	bl	8005c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2160      	movs	r1, #96	; 0x60
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fb00 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 800568a:	e019      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	461a      	mov	r2, r3
 800569a:	f000 fa97 	bl	8005bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2140      	movs	r1, #64	; 0x40
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 faf0 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 80056aa:	e009      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 fae7 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 80056bc:	e000      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80056be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a40      	ldr	r2, [pc, #256]	; (8005840 <TIM_Base_SetConfig+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d00f      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3d      	ldr	r2, [pc, #244]	; (8005844 <TIM_Base_SetConfig+0x118>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00b      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3c      	ldr	r2, [pc, #240]	; (8005848 <TIM_Base_SetConfig+0x11c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3b      	ldr	r2, [pc, #236]	; (800584c <TIM_Base_SetConfig+0x120>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3a      	ldr	r2, [pc, #232]	; (8005850 <TIM_Base_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d108      	bne.n	800577e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2f      	ldr	r2, [pc, #188]	; (8005840 <TIM_Base_SetConfig+0x114>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d02b      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d027      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <TIM_Base_SetConfig+0x118>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d023      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2b      	ldr	r2, [pc, #172]	; (8005848 <TIM_Base_SetConfig+0x11c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01f      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2a      	ldr	r2, [pc, #168]	; (800584c <TIM_Base_SetConfig+0x120>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01b      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a29      	ldr	r2, [pc, #164]	; (8005850 <TIM_Base_SetConfig+0x124>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d017      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <TIM_Base_SetConfig+0x128>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <TIM_Base_SetConfig+0x12c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00f      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a26      	ldr	r2, [pc, #152]	; (800585c <TIM_Base_SetConfig+0x130>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00b      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <TIM_Base_SetConfig+0x134>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a24      	ldr	r2, [pc, #144]	; (8005864 <TIM_Base_SetConfig+0x138>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a23      	ldr	r2, [pc, #140]	; (8005868 <TIM_Base_SetConfig+0x13c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <TIM_Base_SetConfig+0x114>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0xf8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <TIM_Base_SetConfig+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d103      	bne.n	800582c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	615a      	str	r2, [r3, #20]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40010400 	.word	0x40010400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800
 8005860:	40001800 	.word	0x40001800
 8005864:	40001c00 	.word	0x40001c00
 8005868:	40002000 	.word	0x40002000

0800586c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 0302 	bic.w	r3, r3, #2
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a20      	ldr	r2, [pc, #128]	; (8005944 <TIM_OC1_SetConfig+0xd8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC1_SetConfig+0x64>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <TIM_OC1_SetConfig+0xdc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10c      	bne.n	80058ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0308 	bic.w	r3, r3, #8
 80058d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 0304 	bic.w	r3, r3, #4
 80058e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a15      	ldr	r2, [pc, #84]	; (8005944 <TIM_OC1_SetConfig+0xd8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC1_SetConfig+0x8e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <TIM_OC1_SetConfig+0xdc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d111      	bne.n	800591e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	621a      	str	r2, [r3, #32]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40010000 	.word	0x40010000
 8005948:	40010400 	.word	0x40010400

0800594c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 0210 	bic.w	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0320 	bic.w	r3, r3, #32
 8005996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <TIM_OC2_SetConfig+0xe4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_OC2_SetConfig+0x68>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <TIM_OC2_SetConfig+0xe8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10d      	bne.n	80059d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <TIM_OC2_SetConfig+0xe4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC2_SetConfig+0x94>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <TIM_OC2_SetConfig+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d113      	bne.n	8005a08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <TIM_OC3_SetConfig+0xe0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC3_SetConfig+0x66>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <TIM_OC3_SetConfig+0xe4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10d      	bne.n	8005aba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <TIM_OC3_SetConfig+0xe0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_OC3_SetConfig+0x92>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <TIM_OC3_SetConfig+0xe4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d113      	bne.n	8005af2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40010400 	.word	0x40010400

08005b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	031b      	lsls	r3, r3, #12
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a12      	ldr	r2, [pc, #72]	; (8005bc4 <TIM_OC4_SetConfig+0xa4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC4_SetConfig+0x68>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <TIM_OC4_SetConfig+0xa8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d109      	bne.n	8005b9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	019b      	lsls	r3, r3, #6
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40010400 	.word	0x40010400

08005bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0201 	bic.w	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f023 030a 	bic.w	r3, r3, #10
 8005c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b087      	sub	sp, #28
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0210 	bic.w	r2, r3, #16
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	031b      	lsls	r3, r3, #12
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f043 0307 	orr.w	r3, r3, #7
 8005cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	021a      	lsls	r2, r3, #8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	609a      	str	r2, [r3, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2201      	movs	r2, #1
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1a      	ldr	r2, [r3, #32]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	fa01 f303 	lsl.w	r3, r1, r3
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f901 	bl	8005f64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b06      	cmp	r3, #6
 8005d82:	d007      	beq.n	8005d94 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e05a      	b.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d022      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d01d      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d018      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10c      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40001800 	.word	0x40001800

08005e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e03d      	b.n	8005f30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2204      	movs	r2, #4
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1a      	ldr	r2, [r3, #32]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e03f      	b.n	8006040 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fc fe89 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2224      	movs	r2, #36	; 0x24
 8005fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 faae 	bl	8006554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006006:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006016:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006026:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b20      	cmp	r3, #32
 8006060:	d130      	bne.n	80060c4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_Transmit_IT+0x26>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e029      	b.n	80060c6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_UART_Transmit_IT+0x38>
 800607c:	2302      	movs	r3, #2
 800607e:	e022      	b.n	80060c6 <HAL_UART_Transmit_IT+0x7e>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2221      	movs	r2, #33	; 0x21
 80060a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e000      	b.n	80060c6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
	...

080060d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10d      	bne.n	8006126 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_UART_IRQHandler+0x52>
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f996 	bl	8006450 <UART_Receive_IT>
      return;
 8006124:	e0d1      	b.n	80062ca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80b0 	beq.w	800628e <HAL_UART_IRQHandler+0x1ba>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <HAL_UART_IRQHandler+0x70>
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 80a5 	beq.w	800628e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_UART_IRQHandler+0x90>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615c:	f043 0201 	orr.w	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_UART_IRQHandler+0xb0>
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	f043 0202 	orr.w	r2, r3, #2
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <HAL_UART_IRQHandler+0xd0>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619c:	f043 0204 	orr.w	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <HAL_UART_IRQHandler+0xfa>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_UART_IRQHandler+0xee>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	f043 0208 	orr.w	r2, r3, #8
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d078      	beq.n	80062c8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_UART_IRQHandler+0x11c>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f930 	bl	8006450 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	bf0c      	ite	eq
 80061fe:	2301      	moveq	r3, #1
 8006200:	2300      	movne	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <HAL_UART_IRQHandler+0x144>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d031      	beq.n	800627c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f879 	bl	8006310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d123      	bne.n	8006274 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006248:	4a21      	ldr	r2, [pc, #132]	; (80062d0 <HAL_UART_IRQHandler+0x1fc>)
 800624a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	4618      	mov	r0, r3
 8006252:	f7fd fee7 	bl	8004024 <HAL_DMA_Abort_IT>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d016      	beq.n	800628a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006266:	4610      	mov	r0, r2
 8006268:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626a:	e00e      	b.n	800628a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f845 	bl	80062fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006272:	e00a      	b.n	800628a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f841 	bl	80062fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	e006      	b.n	800628a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f83d 	bl	80062fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006288:	e01e      	b.n	80062c8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	bf00      	nop
    return;
 800628c:	e01c      	b.n	80062c8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_UART_IRQHandler+0x1d6>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f866 	bl	8006374 <UART_Transmit_IT>
    return;
 80062a8:	e00f      	b.n	80062ca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_UART_IRQHandler+0x1f6>
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8ae 	bl	8006420 <UART_EndTransmit_IT>
    return;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <HAL_UART_IRQHandler+0x1f6>
    return;
 80062c8:	bf00      	nop
  }
}
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	0800634d 	.word	0x0800634d

080062d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006326:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff ffc8 	bl	80062fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b21      	cmp	r3, #33	; 0x21
 8006386:	d144      	bne.n	8006412 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	d11a      	bne.n	80063c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d105      	bne.n	80063bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	621a      	str	r2, [r3, #32]
 80063ba:	e00e      	b.n	80063da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	621a      	str	r2, [r3, #32]
 80063c6:	e008      	b.n	80063da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6211      	str	r1, [r2, #32]
 80063d2:	781a      	ldrb	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4619      	mov	r1, r3
 80063e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10f      	bne.n	800640e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800640c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e000      	b.n	8006414 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006412:	2302      	movs	r3, #2
  }
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006436:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ff47 	bl	80062d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b22      	cmp	r3, #34	; 0x22
 8006462:	d171      	bne.n	8006548 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646c:	d123      	bne.n	80064b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10e      	bne.n	800649a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	; 0x28
 8006498:	e029      	b.n	80064ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
 80064b4:	e01b      	b.n	80064ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6858      	ldr	r0, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	1c59      	adds	r1, r3, #1
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6291      	str	r1, [r2, #40]	; 0x28
 80064ce:	b2c2      	uxtb	r2, r0
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e00c      	b.n	80064ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	1c58      	adds	r0, r3, #1
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	6288      	str	r0, [r1, #40]	; 0x28
 80064e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4619      	mov	r1, r3
 80064fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d120      	bne.n	8006544 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0220 	bic.w	r2, r2, #32
 8006510:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006520:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fed4 	bl	80062e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e002      	b.n	800654a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006596:	f023 030c 	bic.w	r3, r3, #12
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	430b      	orrs	r3, r1
 80065a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c2:	f040 818b 	bne.w	80068dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4ac1      	ldr	r2, [pc, #772]	; (80068d0 <UART_SetConfig+0x37c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d005      	beq.n	80065dc <UART_SetConfig+0x88>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4abf      	ldr	r2, [pc, #764]	; (80068d4 <UART_SetConfig+0x380>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	f040 80bd 	bne.w	8006756 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065dc:	f7fe fbd6 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 80065e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	461d      	mov	r5, r3
 80065e6:	f04f 0600 	mov.w	r6, #0
 80065ea:	46a8      	mov	r8, r5
 80065ec:	46b1      	mov	r9, r6
 80065ee:	eb18 0308 	adds.w	r3, r8, r8
 80065f2:	eb49 0409 	adc.w	r4, r9, r9
 80065f6:	4698      	mov	r8, r3
 80065f8:	46a1      	mov	r9, r4
 80065fa:	eb18 0805 	adds.w	r8, r8, r5
 80065fe:	eb49 0906 	adc.w	r9, r9, r6
 8006602:	f04f 0100 	mov.w	r1, #0
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800660e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006612:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006616:	4688      	mov	r8, r1
 8006618:	4691      	mov	r9, r2
 800661a:	eb18 0005 	adds.w	r0, r8, r5
 800661e:	eb49 0106 	adc.w	r1, r9, r6
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	461d      	mov	r5, r3
 8006628:	f04f 0600 	mov.w	r6, #0
 800662c:	196b      	adds	r3, r5, r5
 800662e:	eb46 0406 	adc.w	r4, r6, r6
 8006632:	461a      	mov	r2, r3
 8006634:	4623      	mov	r3, r4
 8006636:	f7fa fb37 	bl	8000ca8 <__aeabi_uldivmod>
 800663a:	4603      	mov	r3, r0
 800663c:	460c      	mov	r4, r1
 800663e:	461a      	mov	r2, r3
 8006640:	4ba5      	ldr	r3, [pc, #660]	; (80068d8 <UART_SetConfig+0x384>)
 8006642:	fba3 2302 	umull	r2, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	461d      	mov	r5, r3
 8006650:	f04f 0600 	mov.w	r6, #0
 8006654:	46a9      	mov	r9, r5
 8006656:	46b2      	mov	sl, r6
 8006658:	eb19 0309 	adds.w	r3, r9, r9
 800665c:	eb4a 040a 	adc.w	r4, sl, sl
 8006660:	4699      	mov	r9, r3
 8006662:	46a2      	mov	sl, r4
 8006664:	eb19 0905 	adds.w	r9, r9, r5
 8006668:	eb4a 0a06 	adc.w	sl, sl, r6
 800666c:	f04f 0100 	mov.w	r1, #0
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006678:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800667c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006680:	4689      	mov	r9, r1
 8006682:	4692      	mov	sl, r2
 8006684:	eb19 0005 	adds.w	r0, r9, r5
 8006688:	eb4a 0106 	adc.w	r1, sl, r6
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	461d      	mov	r5, r3
 8006692:	f04f 0600 	mov.w	r6, #0
 8006696:	196b      	adds	r3, r5, r5
 8006698:	eb46 0406 	adc.w	r4, r6, r6
 800669c:	461a      	mov	r2, r3
 800669e:	4623      	mov	r3, r4
 80066a0:	f7fa fb02 	bl	8000ca8 <__aeabi_uldivmod>
 80066a4:	4603      	mov	r3, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	461a      	mov	r2, r3
 80066aa:	4b8b      	ldr	r3, [pc, #556]	; (80068d8 <UART_SetConfig+0x384>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a86      	ldr	r2, [pc, #536]	; (80068d8 <UART_SetConfig+0x384>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066cc:	4498      	add	r8, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	461d      	mov	r5, r3
 80066d2:	f04f 0600 	mov.w	r6, #0
 80066d6:	46a9      	mov	r9, r5
 80066d8:	46b2      	mov	sl, r6
 80066da:	eb19 0309 	adds.w	r3, r9, r9
 80066de:	eb4a 040a 	adc.w	r4, sl, sl
 80066e2:	4699      	mov	r9, r3
 80066e4:	46a2      	mov	sl, r4
 80066e6:	eb19 0905 	adds.w	r9, r9, r5
 80066ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80066ee:	f04f 0100 	mov.w	r1, #0
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006702:	4689      	mov	r9, r1
 8006704:	4692      	mov	sl, r2
 8006706:	eb19 0005 	adds.w	r0, r9, r5
 800670a:	eb4a 0106 	adc.w	r1, sl, r6
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	461d      	mov	r5, r3
 8006714:	f04f 0600 	mov.w	r6, #0
 8006718:	196b      	adds	r3, r5, r5
 800671a:	eb46 0406 	adc.w	r4, r6, r6
 800671e:	461a      	mov	r2, r3
 8006720:	4623      	mov	r3, r4
 8006722:	f7fa fac1 	bl	8000ca8 <__aeabi_uldivmod>
 8006726:	4603      	mov	r3, r0
 8006728:	460c      	mov	r4, r1
 800672a:	461a      	mov	r2, r3
 800672c:	4b6a      	ldr	r3, [pc, #424]	; (80068d8 <UART_SetConfig+0x384>)
 800672e:	fba3 1302 	umull	r1, r3, r3, r2
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	2164      	movs	r1, #100	; 0x64
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	3332      	adds	r3, #50	; 0x32
 8006740:	4a65      	ldr	r2, [pc, #404]	; (80068d8 <UART_SetConfig+0x384>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	f003 0207 	and.w	r2, r3, #7
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4442      	add	r2, r8
 8006752:	609a      	str	r2, [r3, #8]
 8006754:	e26f      	b.n	8006c36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006756:	f7fe fb05 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 800675a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	461d      	mov	r5, r3
 8006760:	f04f 0600 	mov.w	r6, #0
 8006764:	46a8      	mov	r8, r5
 8006766:	46b1      	mov	r9, r6
 8006768:	eb18 0308 	adds.w	r3, r8, r8
 800676c:	eb49 0409 	adc.w	r4, r9, r9
 8006770:	4698      	mov	r8, r3
 8006772:	46a1      	mov	r9, r4
 8006774:	eb18 0805 	adds.w	r8, r8, r5
 8006778:	eb49 0906 	adc.w	r9, r9, r6
 800677c:	f04f 0100 	mov.w	r1, #0
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006788:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800678c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006790:	4688      	mov	r8, r1
 8006792:	4691      	mov	r9, r2
 8006794:	eb18 0005 	adds.w	r0, r8, r5
 8006798:	eb49 0106 	adc.w	r1, r9, r6
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	461d      	mov	r5, r3
 80067a2:	f04f 0600 	mov.w	r6, #0
 80067a6:	196b      	adds	r3, r5, r5
 80067a8:	eb46 0406 	adc.w	r4, r6, r6
 80067ac:	461a      	mov	r2, r3
 80067ae:	4623      	mov	r3, r4
 80067b0:	f7fa fa7a 	bl	8000ca8 <__aeabi_uldivmod>
 80067b4:	4603      	mov	r3, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b47      	ldr	r3, [pc, #284]	; (80068d8 <UART_SetConfig+0x384>)
 80067bc:	fba3 2302 	umull	r2, r3, r3, r2
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	461d      	mov	r5, r3
 80067ca:	f04f 0600 	mov.w	r6, #0
 80067ce:	46a9      	mov	r9, r5
 80067d0:	46b2      	mov	sl, r6
 80067d2:	eb19 0309 	adds.w	r3, r9, r9
 80067d6:	eb4a 040a 	adc.w	r4, sl, sl
 80067da:	4699      	mov	r9, r3
 80067dc:	46a2      	mov	sl, r4
 80067de:	eb19 0905 	adds.w	r9, r9, r5
 80067e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80067e6:	f04f 0100 	mov.w	r1, #0
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067fa:	4689      	mov	r9, r1
 80067fc:	4692      	mov	sl, r2
 80067fe:	eb19 0005 	adds.w	r0, r9, r5
 8006802:	eb4a 0106 	adc.w	r1, sl, r6
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	461d      	mov	r5, r3
 800680c:	f04f 0600 	mov.w	r6, #0
 8006810:	196b      	adds	r3, r5, r5
 8006812:	eb46 0406 	adc.w	r4, r6, r6
 8006816:	461a      	mov	r2, r3
 8006818:	4623      	mov	r3, r4
 800681a:	f7fa fa45 	bl	8000ca8 <__aeabi_uldivmod>
 800681e:	4603      	mov	r3, r0
 8006820:	460c      	mov	r4, r1
 8006822:	461a      	mov	r2, r3
 8006824:	4b2c      	ldr	r3, [pc, #176]	; (80068d8 <UART_SetConfig+0x384>)
 8006826:	fba3 1302 	umull	r1, r3, r3, r2
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2164      	movs	r1, #100	; 0x64
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	3332      	adds	r3, #50	; 0x32
 8006838:	4a27      	ldr	r2, [pc, #156]	; (80068d8 <UART_SetConfig+0x384>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006846:	4498      	add	r8, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	461d      	mov	r5, r3
 800684c:	f04f 0600 	mov.w	r6, #0
 8006850:	46a9      	mov	r9, r5
 8006852:	46b2      	mov	sl, r6
 8006854:	eb19 0309 	adds.w	r3, r9, r9
 8006858:	eb4a 040a 	adc.w	r4, sl, sl
 800685c:	4699      	mov	r9, r3
 800685e:	46a2      	mov	sl, r4
 8006860:	eb19 0905 	adds.w	r9, r9, r5
 8006864:	eb4a 0a06 	adc.w	sl, sl, r6
 8006868:	f04f 0100 	mov.w	r1, #0
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006874:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006878:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800687c:	4689      	mov	r9, r1
 800687e:	4692      	mov	sl, r2
 8006880:	eb19 0005 	adds.w	r0, r9, r5
 8006884:	eb4a 0106 	adc.w	r1, sl, r6
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	461d      	mov	r5, r3
 800688e:	f04f 0600 	mov.w	r6, #0
 8006892:	196b      	adds	r3, r5, r5
 8006894:	eb46 0406 	adc.w	r4, r6, r6
 8006898:	461a      	mov	r2, r3
 800689a:	4623      	mov	r3, r4
 800689c:	f7fa fa04 	bl	8000ca8 <__aeabi_uldivmod>
 80068a0:	4603      	mov	r3, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	461a      	mov	r2, r3
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <UART_SetConfig+0x384>)
 80068a8:	fba3 1302 	umull	r1, r3, r3, r2
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	2164      	movs	r1, #100	; 0x64
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	3332      	adds	r3, #50	; 0x32
 80068ba:	4a07      	ldr	r2, [pc, #28]	; (80068d8 <UART_SetConfig+0x384>)
 80068bc:	fba2 2303 	umull	r2, r3, r2, r3
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	f003 0207 	and.w	r2, r3, #7
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4442      	add	r2, r8
 80068cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80068ce:	e1b2      	b.n	8006c36 <UART_SetConfig+0x6e2>
 80068d0:	40011000 	.word	0x40011000
 80068d4:	40011400 	.word	0x40011400
 80068d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4ad7      	ldr	r2, [pc, #860]	; (8006c40 <UART_SetConfig+0x6ec>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d005      	beq.n	80068f2 <UART_SetConfig+0x39e>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4ad6      	ldr	r2, [pc, #856]	; (8006c44 <UART_SetConfig+0x6f0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	f040 80d1 	bne.w	8006a94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f2:	f7fe fa4b 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 80068f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	469a      	mov	sl, r3
 80068fc:	f04f 0b00 	mov.w	fp, #0
 8006900:	46d0      	mov	r8, sl
 8006902:	46d9      	mov	r9, fp
 8006904:	eb18 0308 	adds.w	r3, r8, r8
 8006908:	eb49 0409 	adc.w	r4, r9, r9
 800690c:	4698      	mov	r8, r3
 800690e:	46a1      	mov	r9, r4
 8006910:	eb18 080a 	adds.w	r8, r8, sl
 8006914:	eb49 090b 	adc.w	r9, r9, fp
 8006918:	f04f 0100 	mov.w	r1, #0
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006924:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006928:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800692c:	4688      	mov	r8, r1
 800692e:	4691      	mov	r9, r2
 8006930:	eb1a 0508 	adds.w	r5, sl, r8
 8006934:	eb4b 0609 	adc.w	r6, fp, r9
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4619      	mov	r1, r3
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	f04f 0400 	mov.w	r4, #0
 800694a:	0094      	lsls	r4, r2, #2
 800694c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006950:	008b      	lsls	r3, r1, #2
 8006952:	461a      	mov	r2, r3
 8006954:	4623      	mov	r3, r4
 8006956:	4628      	mov	r0, r5
 8006958:	4631      	mov	r1, r6
 800695a:	f7fa f9a5 	bl	8000ca8 <__aeabi_uldivmod>
 800695e:	4603      	mov	r3, r0
 8006960:	460c      	mov	r4, r1
 8006962:	461a      	mov	r2, r3
 8006964:	4bb8      	ldr	r3, [pc, #736]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006966:	fba3 2302 	umull	r2, r3, r3, r2
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	469b      	mov	fp, r3
 8006974:	f04f 0c00 	mov.w	ip, #0
 8006978:	46d9      	mov	r9, fp
 800697a:	46e2      	mov	sl, ip
 800697c:	eb19 0309 	adds.w	r3, r9, r9
 8006980:	eb4a 040a 	adc.w	r4, sl, sl
 8006984:	4699      	mov	r9, r3
 8006986:	46a2      	mov	sl, r4
 8006988:	eb19 090b 	adds.w	r9, r9, fp
 800698c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006990:	f04f 0100 	mov.w	r1, #0
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800699c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069a4:	4689      	mov	r9, r1
 80069a6:	4692      	mov	sl, r2
 80069a8:	eb1b 0509 	adds.w	r5, fp, r9
 80069ac:	eb4c 060a 	adc.w	r6, ip, sl
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	f04f 0400 	mov.w	r4, #0
 80069c2:	0094      	lsls	r4, r2, #2
 80069c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069c8:	008b      	lsls	r3, r1, #2
 80069ca:	461a      	mov	r2, r3
 80069cc:	4623      	mov	r3, r4
 80069ce:	4628      	mov	r0, r5
 80069d0:	4631      	mov	r1, r6
 80069d2:	f7fa f969 	bl	8000ca8 <__aeabi_uldivmod>
 80069d6:	4603      	mov	r3, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	461a      	mov	r2, r3
 80069dc:	4b9a      	ldr	r3, [pc, #616]	; (8006c48 <UART_SetConfig+0x6f4>)
 80069de:	fba3 1302 	umull	r1, r3, r3, r2
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	2164      	movs	r1, #100	; 0x64
 80069e6:	fb01 f303 	mul.w	r3, r1, r3
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	3332      	adds	r3, #50	; 0x32
 80069f0:	4a95      	ldr	r2, [pc, #596]	; (8006c48 <UART_SetConfig+0x6f4>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069fc:	4498      	add	r8, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	469b      	mov	fp, r3
 8006a02:	f04f 0c00 	mov.w	ip, #0
 8006a06:	46d9      	mov	r9, fp
 8006a08:	46e2      	mov	sl, ip
 8006a0a:	eb19 0309 	adds.w	r3, r9, r9
 8006a0e:	eb4a 040a 	adc.w	r4, sl, sl
 8006a12:	4699      	mov	r9, r3
 8006a14:	46a2      	mov	sl, r4
 8006a16:	eb19 090b 	adds.w	r9, r9, fp
 8006a1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a1e:	f04f 0100 	mov.w	r1, #0
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a32:	4689      	mov	r9, r1
 8006a34:	4692      	mov	sl, r2
 8006a36:	eb1b 0509 	adds.w	r5, fp, r9
 8006a3a:	eb4c 060a 	adc.w	r6, ip, sl
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	4619      	mov	r1, r3
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	f04f 0400 	mov.w	r4, #0
 8006a50:	0094      	lsls	r4, r2, #2
 8006a52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a56:	008b      	lsls	r3, r1, #2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	4631      	mov	r1, r6
 8006a60:	f7fa f922 	bl	8000ca8 <__aeabi_uldivmod>
 8006a64:	4603      	mov	r3, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4b77      	ldr	r3, [pc, #476]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	2164      	movs	r1, #100	; 0x64
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	3332      	adds	r3, #50	; 0x32
 8006a7e:	4a72      	ldr	r2, [pc, #456]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006a80:	fba2 2303 	umull	r2, r3, r2, r3
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	f003 020f 	and.w	r2, r3, #15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4442      	add	r2, r8
 8006a90:	609a      	str	r2, [r3, #8]
 8006a92:	e0d0      	b.n	8006c36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a94:	f7fe f966 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8006a98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	469a      	mov	sl, r3
 8006a9e:	f04f 0b00 	mov.w	fp, #0
 8006aa2:	46d0      	mov	r8, sl
 8006aa4:	46d9      	mov	r9, fp
 8006aa6:	eb18 0308 	adds.w	r3, r8, r8
 8006aaa:	eb49 0409 	adc.w	r4, r9, r9
 8006aae:	4698      	mov	r8, r3
 8006ab0:	46a1      	mov	r9, r4
 8006ab2:	eb18 080a 	adds.w	r8, r8, sl
 8006ab6:	eb49 090b 	adc.w	r9, r9, fp
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ac6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006aca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ace:	4688      	mov	r8, r1
 8006ad0:	4691      	mov	r9, r2
 8006ad2:	eb1a 0508 	adds.w	r5, sl, r8
 8006ad6:	eb4b 0609 	adc.w	r6, fp, r9
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	f04f 0400 	mov.w	r4, #0
 8006aec:	0094      	lsls	r4, r2, #2
 8006aee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006af2:	008b      	lsls	r3, r1, #2
 8006af4:	461a      	mov	r2, r3
 8006af6:	4623      	mov	r3, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	4631      	mov	r1, r6
 8006afc:	f7fa f8d4 	bl	8000ca8 <__aeabi_uldivmod>
 8006b00:	4603      	mov	r3, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b50      	ldr	r3, [pc, #320]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006b08:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	469b      	mov	fp, r3
 8006b16:	f04f 0c00 	mov.w	ip, #0
 8006b1a:	46d9      	mov	r9, fp
 8006b1c:	46e2      	mov	sl, ip
 8006b1e:	eb19 0309 	adds.w	r3, r9, r9
 8006b22:	eb4a 040a 	adc.w	r4, sl, sl
 8006b26:	4699      	mov	r9, r3
 8006b28:	46a2      	mov	sl, r4
 8006b2a:	eb19 090b 	adds.w	r9, r9, fp
 8006b2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b46:	4689      	mov	r9, r1
 8006b48:	4692      	mov	sl, r2
 8006b4a:	eb1b 0509 	adds.w	r5, fp, r9
 8006b4e:	eb4c 060a 	adc.w	r6, ip, sl
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	4619      	mov	r1, r3
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	f04f 0400 	mov.w	r4, #0
 8006b64:	0094      	lsls	r4, r2, #2
 8006b66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b6a:	008b      	lsls	r3, r1, #2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4623      	mov	r3, r4
 8006b70:	4628      	mov	r0, r5
 8006b72:	4631      	mov	r1, r6
 8006b74:	f7fa f898 	bl	8000ca8 <__aeabi_uldivmod>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006b80:	fba3 1302 	umull	r1, r3, r3, r2
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	2164      	movs	r1, #100	; 0x64
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	3332      	adds	r3, #50	; 0x32
 8006b92:	4a2d      	ldr	r2, [pc, #180]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b9e:	4498      	add	r8, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	469b      	mov	fp, r3
 8006ba4:	f04f 0c00 	mov.w	ip, #0
 8006ba8:	46d9      	mov	r9, fp
 8006baa:	46e2      	mov	sl, ip
 8006bac:	eb19 0309 	adds.w	r3, r9, r9
 8006bb0:	eb4a 040a 	adc.w	r4, sl, sl
 8006bb4:	4699      	mov	r9, r3
 8006bb6:	46a2      	mov	sl, r4
 8006bb8:	eb19 090b 	adds.w	r9, r9, fp
 8006bbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bd4:	4689      	mov	r9, r1
 8006bd6:	4692      	mov	sl, r2
 8006bd8:	eb1b 0509 	adds.w	r5, fp, r9
 8006bdc:	eb4c 060a 	adc.w	r6, ip, sl
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	f04f 0400 	mov.w	r4, #0
 8006bf2:	0094      	lsls	r4, r2, #2
 8006bf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bf8:	008b      	lsls	r3, r1, #2
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4623      	mov	r3, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	4631      	mov	r1, r6
 8006c02:	f7fa f851 	bl	8000ca8 <__aeabi_uldivmod>
 8006c06:	4603      	mov	r3, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	2164      	movs	r1, #100	; 0x64
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	3332      	adds	r3, #50	; 0x32
 8006c20:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <UART_SetConfig+0x6f4>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4442      	add	r2, r8
 8006c32:	609a      	str	r2, [r3, #8]
}
 8006c34:	e7ff      	b.n	8006c36 <UART_SetConfig+0x6e2>
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c40:	40011000 	.word	0x40011000
 8006c44:	40011400 	.word	0x40011400
 8006c48:	51eb851f 	.word	0x51eb851f
 8006c4c:	00000000 	.word	0x00000000

08006c50 <sin>:
 8006c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c52:	ec51 0b10 	vmov	r0, r1, d0
 8006c56:	4a20      	ldr	r2, [pc, #128]	; (8006cd8 <sin+0x88>)
 8006c58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	dc07      	bgt.n	8006c70 <sin+0x20>
 8006c60:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006cd0 <sin+0x80>
 8006c64:	2000      	movs	r0, #0
 8006c66:	f000 fe37 	bl	80078d8 <__kernel_sin>
 8006c6a:	ec51 0b10 	vmov	r0, r1, d0
 8006c6e:	e007      	b.n	8006c80 <sin+0x30>
 8006c70:	4a1a      	ldr	r2, [pc, #104]	; (8006cdc <sin+0x8c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	dd09      	ble.n	8006c8a <sin+0x3a>
 8006c76:	ee10 2a10 	vmov	r2, s0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	f7f9 fb14 	bl	80002a8 <__aeabi_dsub>
 8006c80:	ec41 0b10 	vmov	d0, r0, r1
 8006c84:	b005      	add	sp, #20
 8006c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c8a:	4668      	mov	r0, sp
 8006c8c:	f000 f828 	bl	8006ce0 <__ieee754_rem_pio2>
 8006c90:	f000 0003 	and.w	r0, r0, #3
 8006c94:	2801      	cmp	r0, #1
 8006c96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c9a:	ed9d 0b00 	vldr	d0, [sp]
 8006c9e:	d004      	beq.n	8006caa <sin+0x5a>
 8006ca0:	2802      	cmp	r0, #2
 8006ca2:	d005      	beq.n	8006cb0 <sin+0x60>
 8006ca4:	b970      	cbnz	r0, 8006cc4 <sin+0x74>
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e7dd      	b.n	8006c66 <sin+0x16>
 8006caa:	f000 fa0d 	bl	80070c8 <__kernel_cos>
 8006cae:	e7dc      	b.n	8006c6a <sin+0x1a>
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	f000 fe11 	bl	80078d8 <__kernel_sin>
 8006cb6:	ec53 2b10 	vmov	r2, r3, d0
 8006cba:	ee10 0a10 	vmov	r0, s0
 8006cbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006cc2:	e7dd      	b.n	8006c80 <sin+0x30>
 8006cc4:	f000 fa00 	bl	80070c8 <__kernel_cos>
 8006cc8:	e7f5      	b.n	8006cb6 <sin+0x66>
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w
	...
 8006cd8:	3fe921fb 	.word	0x3fe921fb
 8006cdc:	7fefffff 	.word	0x7fefffff

08006ce0 <__ieee754_rem_pio2>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	ec57 6b10 	vmov	r6, r7, d0
 8006ce8:	4bc3      	ldr	r3, [pc, #780]	; (8006ff8 <__ieee754_rem_pio2+0x318>)
 8006cea:	b08d      	sub	sp, #52	; 0x34
 8006cec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006cf0:	4598      	cmp	r8, r3
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	9704      	str	r7, [sp, #16]
 8006cf6:	dc07      	bgt.n	8006d08 <__ieee754_rem_pio2+0x28>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	ed84 0b00 	vstr	d0, [r4]
 8006d00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006d04:	2500      	movs	r5, #0
 8006d06:	e027      	b.n	8006d58 <__ieee754_rem_pio2+0x78>
 8006d08:	4bbc      	ldr	r3, [pc, #752]	; (8006ffc <__ieee754_rem_pio2+0x31c>)
 8006d0a:	4598      	cmp	r8, r3
 8006d0c:	dc75      	bgt.n	8006dfa <__ieee754_rem_pio2+0x11a>
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	4dbb      	ldr	r5, [pc, #748]	; (8007000 <__ieee754_rem_pio2+0x320>)
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	ee10 0a10 	vmov	r0, s0
 8006d18:	a3a9      	add	r3, pc, #676	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x2e0>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	4639      	mov	r1, r7
 8006d20:	dd36      	ble.n	8006d90 <__ieee754_rem_pio2+0xb0>
 8006d22:	f7f9 fac1 	bl	80002a8 <__aeabi_dsub>
 8006d26:	45a8      	cmp	r8, r5
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	d018      	beq.n	8006d60 <__ieee754_rem_pio2+0x80>
 8006d2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x2e8>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f7f9 fab8 	bl	80002a8 <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8006d40:	4630      	mov	r0, r6
 8006d42:	4639      	mov	r1, r7
 8006d44:	f7f9 fab0 	bl	80002a8 <__aeabi_dsub>
 8006d48:	a39f      	add	r3, pc, #636	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x2e8>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 faab 	bl	80002a8 <__aeabi_dsub>
 8006d52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d56:	2501      	movs	r5, #1
 8006d58:	4628      	mov	r0, r5
 8006d5a:	b00d      	add	sp, #52	; 0x34
 8006d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d60:	a39b      	add	r3, pc, #620	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x2f0>)
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f7f9 fa9f 	bl	80002a8 <__aeabi_dsub>
 8006d6a:	a39b      	add	r3, pc, #620	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2f8>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	4606      	mov	r6, r0
 8006d72:	460f      	mov	r7, r1
 8006d74:	f7f9 fa98 	bl	80002a8 <__aeabi_dsub>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	e9c4 2300 	strd	r2, r3, [r4]
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fa90 	bl	80002a8 <__aeabi_dsub>
 8006d88:	a393      	add	r3, pc, #588	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2f8>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	e7de      	b.n	8006d4e <__ieee754_rem_pio2+0x6e>
 8006d90:	f7f9 fa8c 	bl	80002ac <__adddf3>
 8006d94:	45a8      	cmp	r8, r5
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	d016      	beq.n	8006dca <__ieee754_rem_pio2+0xea>
 8006d9c:	a38a      	add	r3, pc, #552	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x2e8>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fa83 	bl	80002ac <__adddf3>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	e9c4 2300 	strd	r2, r3, [r4]
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	f7f9 fa79 	bl	80002a8 <__aeabi_dsub>
 8006db6:	a384      	add	r3, pc, #528	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x2e8>)
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	f7f9 fa76 	bl	80002ac <__adddf3>
 8006dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8006dc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006dc8:	e7c6      	b.n	8006d58 <__ieee754_rem_pio2+0x78>
 8006dca:	a381      	add	r3, pc, #516	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x2f0>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f7f9 fa6c 	bl	80002ac <__adddf3>
 8006dd4:	a380      	add	r3, pc, #512	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2f8>)
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	f7f9 fa65 	bl	80002ac <__adddf3>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	e9c4 2300 	strd	r2, r3, [r4]
 8006dea:	4630      	mov	r0, r6
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 fa5b 	bl	80002a8 <__aeabi_dsub>
 8006df2:	a379      	add	r3, pc, #484	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2f8>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	e7e0      	b.n	8006dbc <__ieee754_rem_pio2+0xdc>
 8006dfa:	4b82      	ldr	r3, [pc, #520]	; (8007004 <__ieee754_rem_pio2+0x324>)
 8006dfc:	4598      	cmp	r8, r3
 8006dfe:	f300 80d0 	bgt.w	8006fa2 <__ieee754_rem_pio2+0x2c2>
 8006e02:	f000 fe23 	bl	8007a4c <fabs>
 8006e06:	ec57 6b10 	vmov	r6, r7, d0
 8006e0a:	ee10 0a10 	vmov	r0, s0
 8006e0e:	a374      	add	r3, pc, #464	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x300>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	4639      	mov	r1, r7
 8006e16:	f7f9 fbff 	bl	8000618 <__aeabi_dmul>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4b7a      	ldr	r3, [pc, #488]	; (8007008 <__ieee754_rem_pio2+0x328>)
 8006e1e:	f7f9 fa45 	bl	80002ac <__adddf3>
 8006e22:	f7f9 fea9 	bl	8000b78 <__aeabi_d2iz>
 8006e26:	4605      	mov	r5, r0
 8006e28:	f7f9 fb8c 	bl	8000544 <__aeabi_i2d>
 8006e2c:	a364      	add	r3, pc, #400	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x2e0>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e36:	f7f9 fbef 	bl	8000618 <__aeabi_dmul>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	f7f9 fa31 	bl	80002a8 <__aeabi_dsub>
 8006e46:	a360      	add	r3, pc, #384	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x2e8>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	468b      	mov	fp, r1
 8006e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e54:	f7f9 fbe0 	bl	8000618 <__aeabi_dmul>
 8006e58:	2d1f      	cmp	r5, #31
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	460f      	mov	r7, r1
 8006e5e:	dc0c      	bgt.n	8006e7a <__ieee754_rem_pio2+0x19a>
 8006e60:	1e6a      	subs	r2, r5, #1
 8006e62:	4b6a      	ldr	r3, [pc, #424]	; (800700c <__ieee754_rem_pio2+0x32c>)
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	4543      	cmp	r3, r8
 8006e6a:	d006      	beq.n	8006e7a <__ieee754_rem_pio2+0x19a>
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	4650      	mov	r0, sl
 8006e72:	4659      	mov	r1, fp
 8006e74:	f7f9 fa18 	bl	80002a8 <__aeabi_dsub>
 8006e78:	e00e      	b.n	8006e98 <__ieee754_rem_pio2+0x1b8>
 8006e7a:	4632      	mov	r2, r6
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	4650      	mov	r0, sl
 8006e80:	4659      	mov	r1, fp
 8006e82:	f7f9 fa11 	bl	80002a8 <__aeabi_dsub>
 8006e86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	9a05      	ldr	r2, [sp, #20]
 8006e8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	dc02      	bgt.n	8006e9e <__ieee754_rem_pio2+0x1be>
 8006e98:	e9c4 0100 	strd	r0, r1, [r4]
 8006e9c:	e039      	b.n	8006f12 <__ieee754_rem_pio2+0x232>
 8006e9e:	a34c      	add	r3, pc, #304	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x2f0>)
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea8:	f7f9 fbb6 	bl	8000618 <__aeabi_dmul>
 8006eac:	4606      	mov	r6, r0
 8006eae:	460f      	mov	r7, r1
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	4659      	mov	r1, fp
 8006eb8:	f7f9 f9f6 	bl	80002a8 <__aeabi_dsub>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	4689      	mov	r9, r1
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	4659      	mov	r1, fp
 8006ec8:	f7f9 f9ee 	bl	80002a8 <__aeabi_dsub>
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	f7f9 f9ea 	bl	80002a8 <__aeabi_dsub>
 8006ed4:	a340      	add	r3, pc, #256	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2f8>)
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	4606      	mov	r6, r0
 8006edc:	460f      	mov	r7, r1
 8006ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee2:	f7f9 fb99 	bl	8000618 <__aeabi_dmul>
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	463b      	mov	r3, r7
 8006eea:	f7f9 f9dd 	bl	80002a8 <__aeabi_dsub>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460f      	mov	r7, r1
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 f9d5 	bl	80002a8 <__aeabi_dsub>
 8006efe:	9a05      	ldr	r2, [sp, #20]
 8006f00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b31      	cmp	r3, #49	; 0x31
 8006f08:	dc20      	bgt.n	8006f4c <__ieee754_rem_pio2+0x26c>
 8006f0a:	e9c4 0100 	strd	r0, r1, [r4]
 8006f0e:	46c2      	mov	sl, r8
 8006f10:	46cb      	mov	fp, r9
 8006f12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006f16:	4650      	mov	r0, sl
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7f9 f9c3 	bl	80002a8 <__aeabi_dsub>
 8006f22:	463b      	mov	r3, r7
 8006f24:	4632      	mov	r2, r6
 8006f26:	f7f9 f9bf 	bl	80002a8 <__aeabi_dsub>
 8006f2a:	9b04      	ldr	r3, [sp, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f32:	f6bf af11 	bge.w	8006d58 <__ieee754_rem_pio2+0x78>
 8006f36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	f8c4 8000 	str.w	r8, [r4]
 8006f40:	60a0      	str	r0, [r4, #8]
 8006f42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f46:	60e3      	str	r3, [r4, #12]
 8006f48:	426d      	negs	r5, r5
 8006f4a:	e705      	b.n	8006d58 <__ieee754_rem_pio2+0x78>
 8006f4c:	a326      	add	r3, pc, #152	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x308>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f56:	f7f9 fb5f 	bl	8000618 <__aeabi_dmul>
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	460f      	mov	r7, r1
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 f99f 	bl	80002a8 <__aeabi_dsub>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 f997 	bl	80002a8 <__aeabi_dsub>
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	f7f9 f993 	bl	80002a8 <__aeabi_dsub>
 8006f82:	a31b      	add	r3, pc, #108	; (adr r3, 8006ff0 <__ieee754_rem_pio2+0x310>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	4606      	mov	r6, r0
 8006f8a:	460f      	mov	r7, r1
 8006f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f90:	f7f9 fb42 	bl	8000618 <__aeabi_dmul>
 8006f94:	4632      	mov	r2, r6
 8006f96:	463b      	mov	r3, r7
 8006f98:	f7f9 f986 	bl	80002a8 <__aeabi_dsub>
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	460f      	mov	r7, r1
 8006fa0:	e764      	b.n	8006e6c <__ieee754_rem_pio2+0x18c>
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <__ieee754_rem_pio2+0x330>)
 8006fa4:	4598      	cmp	r8, r3
 8006fa6:	dd35      	ble.n	8007014 <__ieee754_rem_pio2+0x334>
 8006fa8:	ee10 2a10 	vmov	r2, s0
 8006fac:	463b      	mov	r3, r7
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 f979 	bl	80002a8 <__aeabi_dsub>
 8006fb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006fba:	e9c4 0100 	strd	r0, r1, [r4]
 8006fbe:	e6a1      	b.n	8006d04 <__ieee754_rem_pio2+0x24>
 8006fc0:	54400000 	.word	0x54400000
 8006fc4:	3ff921fb 	.word	0x3ff921fb
 8006fc8:	1a626331 	.word	0x1a626331
 8006fcc:	3dd0b461 	.word	0x3dd0b461
 8006fd0:	1a600000 	.word	0x1a600000
 8006fd4:	3dd0b461 	.word	0x3dd0b461
 8006fd8:	2e037073 	.word	0x2e037073
 8006fdc:	3ba3198a 	.word	0x3ba3198a
 8006fe0:	6dc9c883 	.word	0x6dc9c883
 8006fe4:	3fe45f30 	.word	0x3fe45f30
 8006fe8:	2e000000 	.word	0x2e000000
 8006fec:	3ba3198a 	.word	0x3ba3198a
 8006ff0:	252049c1 	.word	0x252049c1
 8006ff4:	397b839a 	.word	0x397b839a
 8006ff8:	3fe921fb 	.word	0x3fe921fb
 8006ffc:	4002d97b 	.word	0x4002d97b
 8007000:	3ff921fb 	.word	0x3ff921fb
 8007004:	413921fb 	.word	0x413921fb
 8007008:	3fe00000 	.word	0x3fe00000
 800700c:	08009da0 	.word	0x08009da0
 8007010:	7fefffff 	.word	0x7fefffff
 8007014:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007018:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800701c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007020:	4630      	mov	r0, r6
 8007022:	460f      	mov	r7, r1
 8007024:	f7f9 fda8 	bl	8000b78 <__aeabi_d2iz>
 8007028:	f7f9 fa8c 	bl	8000544 <__aeabi_i2d>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4630      	mov	r0, r6
 8007032:	4639      	mov	r1, r7
 8007034:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007038:	f7f9 f936 	bl	80002a8 <__aeabi_dsub>
 800703c:	2200      	movs	r2, #0
 800703e:	4b1f      	ldr	r3, [pc, #124]	; (80070bc <__ieee754_rem_pio2+0x3dc>)
 8007040:	f7f9 faea 	bl	8000618 <__aeabi_dmul>
 8007044:	460f      	mov	r7, r1
 8007046:	4606      	mov	r6, r0
 8007048:	f7f9 fd96 	bl	8000b78 <__aeabi_d2iz>
 800704c:	f7f9 fa7a 	bl	8000544 <__aeabi_i2d>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4630      	mov	r0, r6
 8007056:	4639      	mov	r1, r7
 8007058:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800705c:	f7f9 f924 	bl	80002a8 <__aeabi_dsub>
 8007060:	2200      	movs	r2, #0
 8007062:	4b16      	ldr	r3, [pc, #88]	; (80070bc <__ieee754_rem_pio2+0x3dc>)
 8007064:	f7f9 fad8 	bl	8000618 <__aeabi_dmul>
 8007068:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800706c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007070:	f04f 0803 	mov.w	r8, #3
 8007074:	2600      	movs	r6, #0
 8007076:	2700      	movs	r7, #0
 8007078:	4632      	mov	r2, r6
 800707a:	463b      	mov	r3, r7
 800707c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007080:	f108 3aff 	add.w	sl, r8, #4294967295
 8007084:	f7f9 fd30 	bl	8000ae8 <__aeabi_dcmpeq>
 8007088:	b9b0      	cbnz	r0, 80070b8 <__ieee754_rem_pio2+0x3d8>
 800708a:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <__ieee754_rem_pio2+0x3e0>)
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2302      	movs	r3, #2
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	462a      	mov	r2, r5
 8007094:	4643      	mov	r3, r8
 8007096:	4621      	mov	r1, r4
 8007098:	a806      	add	r0, sp, #24
 800709a:	f000 f8dd 	bl	8007258 <__kernel_rem_pio2>
 800709e:	9b04      	ldr	r3, [sp, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	4605      	mov	r5, r0
 80070a4:	f6bf ae58 	bge.w	8006d58 <__ieee754_rem_pio2+0x78>
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	68e3      	ldr	r3, [r4, #12]
 80070b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070b6:	e746      	b.n	8006f46 <__ieee754_rem_pio2+0x266>
 80070b8:	46d0      	mov	r8, sl
 80070ba:	e7dd      	b.n	8007078 <__ieee754_rem_pio2+0x398>
 80070bc:	41700000 	.word	0x41700000
 80070c0:	08009e20 	.word	0x08009e20
 80070c4:	00000000 	.word	0x00000000

080070c8 <__kernel_cos>:
 80070c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	ec59 8b10 	vmov	r8, r9, d0
 80070d0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80070d4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80070d8:	ed2d 8b02 	vpush	{d8}
 80070dc:	eeb0 8a41 	vmov.f32	s16, s2
 80070e0:	eef0 8a61 	vmov.f32	s17, s3
 80070e4:	da07      	bge.n	80070f6 <__kernel_cos+0x2e>
 80070e6:	ee10 0a10 	vmov	r0, s0
 80070ea:	4649      	mov	r1, r9
 80070ec:	f7f9 fd44 	bl	8000b78 <__aeabi_d2iz>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	f000 8089 	beq.w	8007208 <__kernel_cos+0x140>
 80070f6:	4642      	mov	r2, r8
 80070f8:	464b      	mov	r3, r9
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fa8b 	bl	8000618 <__aeabi_dmul>
 8007102:	2200      	movs	r2, #0
 8007104:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <__kernel_cos+0x178>)
 8007106:	4604      	mov	r4, r0
 8007108:	460d      	mov	r5, r1
 800710a:	f7f9 fa85 	bl	8000618 <__aeabi_dmul>
 800710e:	a340      	add	r3, pc, #256	; (adr r3, 8007210 <__kernel_cos+0x148>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	4682      	mov	sl, r0
 8007116:	468b      	mov	fp, r1
 8007118:	4620      	mov	r0, r4
 800711a:	4629      	mov	r1, r5
 800711c:	f7f9 fa7c 	bl	8000618 <__aeabi_dmul>
 8007120:	a33d      	add	r3, pc, #244	; (adr r3, 8007218 <__kernel_cos+0x150>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f7f9 f8c1 	bl	80002ac <__adddf3>
 800712a:	4622      	mov	r2, r4
 800712c:	462b      	mov	r3, r5
 800712e:	f7f9 fa73 	bl	8000618 <__aeabi_dmul>
 8007132:	a33b      	add	r3, pc, #236	; (adr r3, 8007220 <__kernel_cos+0x158>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f7f9 f8b6 	bl	80002a8 <__aeabi_dsub>
 800713c:	4622      	mov	r2, r4
 800713e:	462b      	mov	r3, r5
 8007140:	f7f9 fa6a 	bl	8000618 <__aeabi_dmul>
 8007144:	a338      	add	r3, pc, #224	; (adr r3, 8007228 <__kernel_cos+0x160>)
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 f8af 	bl	80002ac <__adddf3>
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	f7f9 fa61 	bl	8000618 <__aeabi_dmul>
 8007156:	a336      	add	r3, pc, #216	; (adr r3, 8007230 <__kernel_cos+0x168>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 f8a4 	bl	80002a8 <__aeabi_dsub>
 8007160:	4622      	mov	r2, r4
 8007162:	462b      	mov	r3, r5
 8007164:	f7f9 fa58 	bl	8000618 <__aeabi_dmul>
 8007168:	a333      	add	r3, pc, #204	; (adr r3, 8007238 <__kernel_cos+0x170>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 f89d 	bl	80002ac <__adddf3>
 8007172:	4622      	mov	r2, r4
 8007174:	462b      	mov	r3, r5
 8007176:	f7f9 fa4f 	bl	8000618 <__aeabi_dmul>
 800717a:	4622      	mov	r2, r4
 800717c:	462b      	mov	r3, r5
 800717e:	f7f9 fa4b 	bl	8000618 <__aeabi_dmul>
 8007182:	ec53 2b18 	vmov	r2, r3, d8
 8007186:	4604      	mov	r4, r0
 8007188:	460d      	mov	r5, r1
 800718a:	4640      	mov	r0, r8
 800718c:	4649      	mov	r1, r9
 800718e:	f7f9 fa43 	bl	8000618 <__aeabi_dmul>
 8007192:	460b      	mov	r3, r1
 8007194:	4602      	mov	r2, r0
 8007196:	4629      	mov	r1, r5
 8007198:	4620      	mov	r0, r4
 800719a:	f7f9 f885 	bl	80002a8 <__aeabi_dsub>
 800719e:	4b29      	ldr	r3, [pc, #164]	; (8007244 <__kernel_cos+0x17c>)
 80071a0:	429e      	cmp	r6, r3
 80071a2:	4680      	mov	r8, r0
 80071a4:	4689      	mov	r9, r1
 80071a6:	dc11      	bgt.n	80071cc <__kernel_cos+0x104>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4650      	mov	r0, sl
 80071ae:	4659      	mov	r1, fp
 80071b0:	f7f9 f87a 	bl	80002a8 <__aeabi_dsub>
 80071b4:	460b      	mov	r3, r1
 80071b6:	4924      	ldr	r1, [pc, #144]	; (8007248 <__kernel_cos+0x180>)
 80071b8:	4602      	mov	r2, r0
 80071ba:	2000      	movs	r0, #0
 80071bc:	f7f9 f874 	bl	80002a8 <__aeabi_dsub>
 80071c0:	ecbd 8b02 	vpop	{d8}
 80071c4:	ec41 0b10 	vmov	d0, r0, r1
 80071c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	4b1f      	ldr	r3, [pc, #124]	; (800724c <__kernel_cos+0x184>)
 80071ce:	491e      	ldr	r1, [pc, #120]	; (8007248 <__kernel_cos+0x180>)
 80071d0:	429e      	cmp	r6, r3
 80071d2:	bfcc      	ite	gt
 80071d4:	4d1e      	ldrgt	r5, [pc, #120]	; (8007250 <__kernel_cos+0x188>)
 80071d6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80071da:	2400      	movs	r4, #0
 80071dc:	4622      	mov	r2, r4
 80071de:	462b      	mov	r3, r5
 80071e0:	2000      	movs	r0, #0
 80071e2:	f7f9 f861 	bl	80002a8 <__aeabi_dsub>
 80071e6:	4622      	mov	r2, r4
 80071e8:	4606      	mov	r6, r0
 80071ea:	460f      	mov	r7, r1
 80071ec:	462b      	mov	r3, r5
 80071ee:	4650      	mov	r0, sl
 80071f0:	4659      	mov	r1, fp
 80071f2:	f7f9 f859 	bl	80002a8 <__aeabi_dsub>
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	f7f9 f855 	bl	80002a8 <__aeabi_dsub>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4630      	mov	r0, r6
 8007204:	4639      	mov	r1, r7
 8007206:	e7d9      	b.n	80071bc <__kernel_cos+0xf4>
 8007208:	2000      	movs	r0, #0
 800720a:	490f      	ldr	r1, [pc, #60]	; (8007248 <__kernel_cos+0x180>)
 800720c:	e7d8      	b.n	80071c0 <__kernel_cos+0xf8>
 800720e:	bf00      	nop
 8007210:	be8838d4 	.word	0xbe8838d4
 8007214:	bda8fae9 	.word	0xbda8fae9
 8007218:	bdb4b1c4 	.word	0xbdb4b1c4
 800721c:	3e21ee9e 	.word	0x3e21ee9e
 8007220:	809c52ad 	.word	0x809c52ad
 8007224:	3e927e4f 	.word	0x3e927e4f
 8007228:	19cb1590 	.word	0x19cb1590
 800722c:	3efa01a0 	.word	0x3efa01a0
 8007230:	16c15177 	.word	0x16c15177
 8007234:	3f56c16c 	.word	0x3f56c16c
 8007238:	5555554c 	.word	0x5555554c
 800723c:	3fa55555 	.word	0x3fa55555
 8007240:	3fe00000 	.word	0x3fe00000
 8007244:	3fd33332 	.word	0x3fd33332
 8007248:	3ff00000 	.word	0x3ff00000
 800724c:	3fe90000 	.word	0x3fe90000
 8007250:	3fd20000 	.word	0x3fd20000
 8007254:	00000000 	.word	0x00000000

08007258 <__kernel_rem_pio2>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	ed2d 8b02 	vpush	{d8}
 8007260:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007264:	1ed4      	subs	r4, r2, #3
 8007266:	9308      	str	r3, [sp, #32]
 8007268:	9101      	str	r1, [sp, #4]
 800726a:	4bc5      	ldr	r3, [pc, #788]	; (8007580 <__kernel_rem_pio2+0x328>)
 800726c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800726e:	9009      	str	r0, [sp, #36]	; 0x24
 8007270:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	9b08      	ldr	r3, [sp, #32]
 8007278:	3b01      	subs	r3, #1
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	2318      	movs	r3, #24
 800727e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007282:	f06f 0317 	mvn.w	r3, #23
 8007286:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800728a:	fb04 3303 	mla	r3, r4, r3, r3
 800728e:	eb03 0a02 	add.w	sl, r3, r2
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	9a07      	ldr	r2, [sp, #28]
 8007296:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007570 <__kernel_rem_pio2+0x318>
 800729a:	eb03 0802 	add.w	r8, r3, r2
 800729e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80072a0:	1aa7      	subs	r7, r4, r2
 80072a2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80072a6:	ae22      	add	r6, sp, #136	; 0x88
 80072a8:	2500      	movs	r5, #0
 80072aa:	4545      	cmp	r5, r8
 80072ac:	dd13      	ble.n	80072d6 <__kernel_rem_pio2+0x7e>
 80072ae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007570 <__kernel_rem_pio2+0x318>
 80072b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80072b6:	2600      	movs	r6, #0
 80072b8:	9b04      	ldr	r3, [sp, #16]
 80072ba:	429e      	cmp	r6, r3
 80072bc:	dc32      	bgt.n	8007324 <__kernel_rem_pio2+0xcc>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	9302      	str	r3, [sp, #8]
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	199d      	adds	r5, r3, r6
 80072c6:	ab22      	add	r3, sp, #136	; 0x88
 80072c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072cc:	9306      	str	r3, [sp, #24]
 80072ce:	ec59 8b18 	vmov	r8, r9, d8
 80072d2:	2700      	movs	r7, #0
 80072d4:	e01f      	b.n	8007316 <__kernel_rem_pio2+0xbe>
 80072d6:	42ef      	cmn	r7, r5
 80072d8:	d407      	bmi.n	80072ea <__kernel_rem_pio2+0x92>
 80072da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80072de:	f7f9 f931 	bl	8000544 <__aeabi_i2d>
 80072e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072e6:	3501      	adds	r5, #1
 80072e8:	e7df      	b.n	80072aa <__kernel_rem_pio2+0x52>
 80072ea:	ec51 0b18 	vmov	r0, r1, d8
 80072ee:	e7f8      	b.n	80072e2 <__kernel_rem_pio2+0x8a>
 80072f0:	9906      	ldr	r1, [sp, #24]
 80072f2:	9d02      	ldr	r5, [sp, #8]
 80072f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80072f8:	9106      	str	r1, [sp, #24]
 80072fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80072fe:	9502      	str	r5, [sp, #8]
 8007300:	f7f9 f98a 	bl	8000618 <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f8 ffce 	bl	80002ac <__adddf3>
 8007310:	3701      	adds	r7, #1
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	9b07      	ldr	r3, [sp, #28]
 8007318:	429f      	cmp	r7, r3
 800731a:	dde9      	ble.n	80072f0 <__kernel_rem_pio2+0x98>
 800731c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007320:	3601      	adds	r6, #1
 8007322:	e7c9      	b.n	80072b8 <__kernel_rem_pio2+0x60>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	aa0e      	add	r2, sp, #56	; 0x38
 8007328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800732c:	930c      	str	r3, [sp, #48]	; 0x30
 800732e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007330:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007334:	9c04      	ldr	r4, [sp, #16]
 8007336:	930b      	str	r3, [sp, #44]	; 0x2c
 8007338:	ab9a      	add	r3, sp, #616	; 0x268
 800733a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800733e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007346:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800734a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800734e:	ab9a      	add	r3, sp, #616	; 0x268
 8007350:	445b      	add	r3, fp
 8007352:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007356:	2500      	movs	r5, #0
 8007358:	1b63      	subs	r3, r4, r5
 800735a:	2b00      	cmp	r3, #0
 800735c:	dc78      	bgt.n	8007450 <__kernel_rem_pio2+0x1f8>
 800735e:	4650      	mov	r0, sl
 8007360:	ec49 8b10 	vmov	d0, r8, r9
 8007364:	f000 fc00 	bl	8007b68 <scalbn>
 8007368:	ec57 6b10 	vmov	r6, r7, d0
 800736c:	2200      	movs	r2, #0
 800736e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007372:	ee10 0a10 	vmov	r0, s0
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 f94e 	bl	8000618 <__aeabi_dmul>
 800737c:	ec41 0b10 	vmov	d0, r0, r1
 8007380:	f000 fb6e 	bl	8007a60 <floor>
 8007384:	2200      	movs	r2, #0
 8007386:	ec51 0b10 	vmov	r0, r1, d0
 800738a:	4b7e      	ldr	r3, [pc, #504]	; (8007584 <__kernel_rem_pio2+0x32c>)
 800738c:	f7f9 f944 	bl	8000618 <__aeabi_dmul>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4630      	mov	r0, r6
 8007396:	4639      	mov	r1, r7
 8007398:	f7f8 ff86 	bl	80002a8 <__aeabi_dsub>
 800739c:	460f      	mov	r7, r1
 800739e:	4606      	mov	r6, r0
 80073a0:	f7f9 fbea 	bl	8000b78 <__aeabi_d2iz>
 80073a4:	9006      	str	r0, [sp, #24]
 80073a6:	f7f9 f8cd 	bl	8000544 <__aeabi_i2d>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4630      	mov	r0, r6
 80073b0:	4639      	mov	r1, r7
 80073b2:	f7f8 ff79 	bl	80002a8 <__aeabi_dsub>
 80073b6:	f1ba 0f00 	cmp.w	sl, #0
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	dd6c      	ble.n	800749a <__kernel_rem_pio2+0x242>
 80073c0:	1e62      	subs	r2, r4, #1
 80073c2:	ab0e      	add	r3, sp, #56	; 0x38
 80073c4:	f1ca 0118 	rsb	r1, sl, #24
 80073c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80073cc:	9d06      	ldr	r5, [sp, #24]
 80073ce:	fa40 f301 	asr.w	r3, r0, r1
 80073d2:	441d      	add	r5, r3
 80073d4:	408b      	lsls	r3, r1
 80073d6:	1ac0      	subs	r0, r0, r3
 80073d8:	ab0e      	add	r3, sp, #56	; 0x38
 80073da:	9506      	str	r5, [sp, #24]
 80073dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80073e0:	f1ca 0317 	rsb	r3, sl, #23
 80073e4:	fa40 f303 	asr.w	r3, r0, r3
 80073e8:	9302      	str	r3, [sp, #8]
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dd62      	ble.n	80074b6 <__kernel_rem_pio2+0x25e>
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	2200      	movs	r2, #0
 80073f4:	3301      	adds	r3, #1
 80073f6:	9306      	str	r3, [sp, #24]
 80073f8:	4615      	mov	r5, r2
 80073fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80073fe:	4294      	cmp	r4, r2
 8007400:	f300 8095 	bgt.w	800752e <__kernel_rem_pio2+0x2d6>
 8007404:	f1ba 0f00 	cmp.w	sl, #0
 8007408:	dd07      	ble.n	800741a <__kernel_rem_pio2+0x1c2>
 800740a:	f1ba 0f01 	cmp.w	sl, #1
 800740e:	f000 80a2 	beq.w	8007556 <__kernel_rem_pio2+0x2fe>
 8007412:	f1ba 0f02 	cmp.w	sl, #2
 8007416:	f000 80c1 	beq.w	800759c <__kernel_rem_pio2+0x344>
 800741a:	9b02      	ldr	r3, [sp, #8]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d14a      	bne.n	80074b6 <__kernel_rem_pio2+0x25e>
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	2000      	movs	r0, #0
 8007426:	4958      	ldr	r1, [pc, #352]	; (8007588 <__kernel_rem_pio2+0x330>)
 8007428:	f7f8 ff3e 	bl	80002a8 <__aeabi_dsub>
 800742c:	4606      	mov	r6, r0
 800742e:	460f      	mov	r7, r1
 8007430:	2d00      	cmp	r5, #0
 8007432:	d040      	beq.n	80074b6 <__kernel_rem_pio2+0x25e>
 8007434:	4650      	mov	r0, sl
 8007436:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007578 <__kernel_rem_pio2+0x320>
 800743a:	f000 fb95 	bl	8007b68 <scalbn>
 800743e:	4630      	mov	r0, r6
 8007440:	4639      	mov	r1, r7
 8007442:	ec53 2b10 	vmov	r2, r3, d0
 8007446:	f7f8 ff2f 	bl	80002a8 <__aeabi_dsub>
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	e032      	b.n	80074b6 <__kernel_rem_pio2+0x25e>
 8007450:	2200      	movs	r2, #0
 8007452:	4b4e      	ldr	r3, [pc, #312]	; (800758c <__kernel_rem_pio2+0x334>)
 8007454:	4640      	mov	r0, r8
 8007456:	4649      	mov	r1, r9
 8007458:	f7f9 f8de 	bl	8000618 <__aeabi_dmul>
 800745c:	f7f9 fb8c 	bl	8000b78 <__aeabi_d2iz>
 8007460:	f7f9 f870 	bl	8000544 <__aeabi_i2d>
 8007464:	2200      	movs	r2, #0
 8007466:	4b4a      	ldr	r3, [pc, #296]	; (8007590 <__kernel_rem_pio2+0x338>)
 8007468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800746c:	f7f9 f8d4 	bl	8000618 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f8 ff16 	bl	80002a8 <__aeabi_dsub>
 800747c:	f7f9 fb7c 	bl	8000b78 <__aeabi_d2iz>
 8007480:	ab0e      	add	r3, sp, #56	; 0x38
 8007482:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007486:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800748a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748e:	f7f8 ff0d 	bl	80002ac <__adddf3>
 8007492:	3501      	adds	r5, #1
 8007494:	4680      	mov	r8, r0
 8007496:	4689      	mov	r9, r1
 8007498:	e75e      	b.n	8007358 <__kernel_rem_pio2+0x100>
 800749a:	d105      	bne.n	80074a8 <__kernel_rem_pio2+0x250>
 800749c:	1e63      	subs	r3, r4, #1
 800749e:	aa0e      	add	r2, sp, #56	; 0x38
 80074a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80074a4:	15c3      	asrs	r3, r0, #23
 80074a6:	e79f      	b.n	80073e8 <__kernel_rem_pio2+0x190>
 80074a8:	2200      	movs	r2, #0
 80074aa:	4b3a      	ldr	r3, [pc, #232]	; (8007594 <__kernel_rem_pio2+0x33c>)
 80074ac:	f7f9 fb3a 	bl	8000b24 <__aeabi_dcmpge>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d139      	bne.n	8007528 <__kernel_rem_pio2+0x2d0>
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	4630      	mov	r0, r6
 80074bc:	4639      	mov	r1, r7
 80074be:	f7f9 fb13 	bl	8000ae8 <__aeabi_dcmpeq>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f000 80c7 	beq.w	8007656 <__kernel_rem_pio2+0x3fe>
 80074c8:	1e65      	subs	r5, r4, #1
 80074ca:	462b      	mov	r3, r5
 80074cc:	2200      	movs	r2, #0
 80074ce:	9904      	ldr	r1, [sp, #16]
 80074d0:	428b      	cmp	r3, r1
 80074d2:	da6a      	bge.n	80075aa <__kernel_rem_pio2+0x352>
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	f000 8088 	beq.w	80075ea <__kernel_rem_pio2+0x392>
 80074da:	ab0e      	add	r3, sp, #56	; 0x38
 80074dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80074e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80b4 	beq.w	8007652 <__kernel_rem_pio2+0x3fa>
 80074ea:	4650      	mov	r0, sl
 80074ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007578 <__kernel_rem_pio2+0x320>
 80074f0:	f000 fb3a 	bl	8007b68 <scalbn>
 80074f4:	00ec      	lsls	r4, r5, #3
 80074f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80074f8:	191e      	adds	r6, r3, r4
 80074fa:	ec59 8b10 	vmov	r8, r9, d0
 80074fe:	f106 0a08 	add.w	sl, r6, #8
 8007502:	462f      	mov	r7, r5
 8007504:	2f00      	cmp	r7, #0
 8007506:	f280 80df 	bge.w	80076c8 <__kernel_rem_pio2+0x470>
 800750a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007570 <__kernel_rem_pio2+0x318>
 800750e:	f04f 0a00 	mov.w	sl, #0
 8007512:	eba5 030a 	sub.w	r3, r5, sl
 8007516:	2b00      	cmp	r3, #0
 8007518:	f2c0 810a 	blt.w	8007730 <__kernel_rem_pio2+0x4d8>
 800751c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007598 <__kernel_rem_pio2+0x340>
 8007520:	ec59 8b18 	vmov	r8, r9, d8
 8007524:	2700      	movs	r7, #0
 8007526:	e0f5      	b.n	8007714 <__kernel_rem_pio2+0x4bc>
 8007528:	2302      	movs	r3, #2
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	e760      	b.n	80073f0 <__kernel_rem_pio2+0x198>
 800752e:	ab0e      	add	r3, sp, #56	; 0x38
 8007530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007534:	b94d      	cbnz	r5, 800754a <__kernel_rem_pio2+0x2f2>
 8007536:	b12b      	cbz	r3, 8007544 <__kernel_rem_pio2+0x2ec>
 8007538:	a80e      	add	r0, sp, #56	; 0x38
 800753a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800753e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007542:	2301      	movs	r3, #1
 8007544:	3201      	adds	r2, #1
 8007546:	461d      	mov	r5, r3
 8007548:	e759      	b.n	80073fe <__kernel_rem_pio2+0x1a6>
 800754a:	a80e      	add	r0, sp, #56	; 0x38
 800754c:	1acb      	subs	r3, r1, r3
 800754e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007552:	462b      	mov	r3, r5
 8007554:	e7f6      	b.n	8007544 <__kernel_rem_pio2+0x2ec>
 8007556:	1e62      	subs	r2, r4, #1
 8007558:	ab0e      	add	r3, sp, #56	; 0x38
 800755a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007562:	a90e      	add	r1, sp, #56	; 0x38
 8007564:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007568:	e757      	b.n	800741a <__kernel_rem_pio2+0x1c2>
 800756a:	bf00      	nop
 800756c:	f3af 8000 	nop.w
	...
 800757c:	3ff00000 	.word	0x3ff00000
 8007580:	08009f68 	.word	0x08009f68
 8007584:	40200000 	.word	0x40200000
 8007588:	3ff00000 	.word	0x3ff00000
 800758c:	3e700000 	.word	0x3e700000
 8007590:	41700000 	.word	0x41700000
 8007594:	3fe00000 	.word	0x3fe00000
 8007598:	08009f28 	.word	0x08009f28
 800759c:	1e62      	subs	r2, r4, #1
 800759e:	ab0e      	add	r3, sp, #56	; 0x38
 80075a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80075a8:	e7db      	b.n	8007562 <__kernel_rem_pio2+0x30a>
 80075aa:	a90e      	add	r1, sp, #56	; 0x38
 80075ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	430a      	orrs	r2, r1
 80075b4:	e78b      	b.n	80074ce <__kernel_rem_pio2+0x276>
 80075b6:	3301      	adds	r3, #1
 80075b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80075bc:	2900      	cmp	r1, #0
 80075be:	d0fa      	beq.n	80075b6 <__kernel_rem_pio2+0x35e>
 80075c0:	9a08      	ldr	r2, [sp, #32]
 80075c2:	4422      	add	r2, r4
 80075c4:	00d2      	lsls	r2, r2, #3
 80075c6:	a922      	add	r1, sp, #136	; 0x88
 80075c8:	18e3      	adds	r3, r4, r3
 80075ca:	9206      	str	r2, [sp, #24]
 80075cc:	440a      	add	r2, r1
 80075ce:	9302      	str	r3, [sp, #8]
 80075d0:	f10b 0108 	add.w	r1, fp, #8
 80075d4:	f102 0308 	add.w	r3, r2, #8
 80075d8:	1c66      	adds	r6, r4, #1
 80075da:	910a      	str	r1, [sp, #40]	; 0x28
 80075dc:	2500      	movs	r5, #0
 80075de:	930d      	str	r3, [sp, #52]	; 0x34
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	42b3      	cmp	r3, r6
 80075e4:	da04      	bge.n	80075f0 <__kernel_rem_pio2+0x398>
 80075e6:	461c      	mov	r4, r3
 80075e8:	e6a6      	b.n	8007338 <__kernel_rem_pio2+0xe0>
 80075ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ec:	2301      	movs	r3, #1
 80075ee:	e7e3      	b.n	80075b8 <__kernel_rem_pio2+0x360>
 80075f0:	9b06      	ldr	r3, [sp, #24]
 80075f2:	18ef      	adds	r7, r5, r3
 80075f4:	ab22      	add	r3, sp, #136	; 0x88
 80075f6:	441f      	add	r7, r3
 80075f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80075fe:	f7f8 ffa1 	bl	8000544 <__aeabi_i2d>
 8007602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007604:	461c      	mov	r4, r3
 8007606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007608:	e9c7 0100 	strd	r0, r1, [r7]
 800760c:	eb03 0b05 	add.w	fp, r3, r5
 8007610:	2700      	movs	r7, #0
 8007612:	f04f 0800 	mov.w	r8, #0
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	9b07      	ldr	r3, [sp, #28]
 800761c:	429f      	cmp	r7, r3
 800761e:	dd08      	ble.n	8007632 <__kernel_rem_pio2+0x3da>
 8007620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007622:	aa72      	add	r2, sp, #456	; 0x1c8
 8007624:	18eb      	adds	r3, r5, r3
 8007626:	4413      	add	r3, r2
 8007628:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800762c:	3601      	adds	r6, #1
 800762e:	3508      	adds	r5, #8
 8007630:	e7d6      	b.n	80075e0 <__kernel_rem_pio2+0x388>
 8007632:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007636:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800763a:	f7f8 ffed 	bl	8000618 <__aeabi_dmul>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 fe31 	bl	80002ac <__adddf3>
 800764a:	3701      	adds	r7, #1
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	e7e3      	b.n	800761a <__kernel_rem_pio2+0x3c2>
 8007652:	3d01      	subs	r5, #1
 8007654:	e741      	b.n	80074da <__kernel_rem_pio2+0x282>
 8007656:	f1ca 0000 	rsb	r0, sl, #0
 800765a:	ec47 6b10 	vmov	d0, r6, r7
 800765e:	f000 fa83 	bl	8007b68 <scalbn>
 8007662:	ec57 6b10 	vmov	r6, r7, d0
 8007666:	2200      	movs	r2, #0
 8007668:	4b99      	ldr	r3, [pc, #612]	; (80078d0 <__kernel_rem_pio2+0x678>)
 800766a:	ee10 0a10 	vmov	r0, s0
 800766e:	4639      	mov	r1, r7
 8007670:	f7f9 fa58 	bl	8000b24 <__aeabi_dcmpge>
 8007674:	b1f8      	cbz	r0, 80076b6 <__kernel_rem_pio2+0x45e>
 8007676:	2200      	movs	r2, #0
 8007678:	4b96      	ldr	r3, [pc, #600]	; (80078d4 <__kernel_rem_pio2+0x67c>)
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	f7f8 ffcb 	bl	8000618 <__aeabi_dmul>
 8007682:	f7f9 fa79 	bl	8000b78 <__aeabi_d2iz>
 8007686:	4680      	mov	r8, r0
 8007688:	f7f8 ff5c 	bl	8000544 <__aeabi_i2d>
 800768c:	2200      	movs	r2, #0
 800768e:	4b90      	ldr	r3, [pc, #576]	; (80078d0 <__kernel_rem_pio2+0x678>)
 8007690:	f7f8 ffc2 	bl	8000618 <__aeabi_dmul>
 8007694:	460b      	mov	r3, r1
 8007696:	4602      	mov	r2, r0
 8007698:	4639      	mov	r1, r7
 800769a:	4630      	mov	r0, r6
 800769c:	f7f8 fe04 	bl	80002a8 <__aeabi_dsub>
 80076a0:	f7f9 fa6a 	bl	8000b78 <__aeabi_d2iz>
 80076a4:	1c65      	adds	r5, r4, #1
 80076a6:	ab0e      	add	r3, sp, #56	; 0x38
 80076a8:	f10a 0a18 	add.w	sl, sl, #24
 80076ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80076b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80076b4:	e719      	b.n	80074ea <__kernel_rem_pio2+0x292>
 80076b6:	4630      	mov	r0, r6
 80076b8:	4639      	mov	r1, r7
 80076ba:	f7f9 fa5d 	bl	8000b78 <__aeabi_d2iz>
 80076be:	ab0e      	add	r3, sp, #56	; 0x38
 80076c0:	4625      	mov	r5, r4
 80076c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80076c6:	e710      	b.n	80074ea <__kernel_rem_pio2+0x292>
 80076c8:	ab0e      	add	r3, sp, #56	; 0x38
 80076ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80076ce:	f7f8 ff39 	bl	8000544 <__aeabi_i2d>
 80076d2:	4642      	mov	r2, r8
 80076d4:	464b      	mov	r3, r9
 80076d6:	f7f8 ff9f 	bl	8000618 <__aeabi_dmul>
 80076da:	2200      	movs	r2, #0
 80076dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80076e0:	4b7c      	ldr	r3, [pc, #496]	; (80078d4 <__kernel_rem_pio2+0x67c>)
 80076e2:	4640      	mov	r0, r8
 80076e4:	4649      	mov	r1, r9
 80076e6:	f7f8 ff97 	bl	8000618 <__aeabi_dmul>
 80076ea:	3f01      	subs	r7, #1
 80076ec:	4680      	mov	r8, r0
 80076ee:	4689      	mov	r9, r1
 80076f0:	e708      	b.n	8007504 <__kernel_rem_pio2+0x2ac>
 80076f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80076fe:	f7f8 ff8b 	bl	8000618 <__aeabi_dmul>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4640      	mov	r0, r8
 8007708:	4649      	mov	r1, r9
 800770a:	f7f8 fdcf 	bl	80002ac <__adddf3>
 800770e:	3701      	adds	r7, #1
 8007710:	4680      	mov	r8, r0
 8007712:	4689      	mov	r9, r1
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	429f      	cmp	r7, r3
 8007718:	dc01      	bgt.n	800771e <__kernel_rem_pio2+0x4c6>
 800771a:	45ba      	cmp	sl, r7
 800771c:	dae9      	bge.n	80076f2 <__kernel_rem_pio2+0x49a>
 800771e:	ab4a      	add	r3, sp, #296	; 0x128
 8007720:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007724:	e9c3 8900 	strd	r8, r9, [r3]
 8007728:	f10a 0a01 	add.w	sl, sl, #1
 800772c:	3e08      	subs	r6, #8
 800772e:	e6f0      	b.n	8007512 <__kernel_rem_pio2+0x2ba>
 8007730:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007732:	2b03      	cmp	r3, #3
 8007734:	d85b      	bhi.n	80077ee <__kernel_rem_pio2+0x596>
 8007736:	e8df f003 	tbb	[pc, r3]
 800773a:	264a      	.short	0x264a
 800773c:	0226      	.short	0x0226
 800773e:	ab9a      	add	r3, sp, #616	; 0x268
 8007740:	441c      	add	r4, r3
 8007742:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007746:	46a2      	mov	sl, r4
 8007748:	46ab      	mov	fp, r5
 800774a:	f1bb 0f00 	cmp.w	fp, #0
 800774e:	dc6c      	bgt.n	800782a <__kernel_rem_pio2+0x5d2>
 8007750:	46a2      	mov	sl, r4
 8007752:	46ab      	mov	fp, r5
 8007754:	f1bb 0f01 	cmp.w	fp, #1
 8007758:	f300 8086 	bgt.w	8007868 <__kernel_rem_pio2+0x610>
 800775c:	2000      	movs	r0, #0
 800775e:	2100      	movs	r1, #0
 8007760:	2d01      	cmp	r5, #1
 8007762:	f300 80a0 	bgt.w	80078a6 <__kernel_rem_pio2+0x64e>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800776c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 809e 	bne.w	80078b2 <__kernel_rem_pio2+0x65a>
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	e9c3 7800 	strd	r7, r8, [r3]
 800777c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007780:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007784:	e033      	b.n	80077ee <__kernel_rem_pio2+0x596>
 8007786:	3408      	adds	r4, #8
 8007788:	ab4a      	add	r3, sp, #296	; 0x128
 800778a:	441c      	add	r4, r3
 800778c:	462e      	mov	r6, r5
 800778e:	2000      	movs	r0, #0
 8007790:	2100      	movs	r1, #0
 8007792:	2e00      	cmp	r6, #0
 8007794:	da3a      	bge.n	800780c <__kernel_rem_pio2+0x5b4>
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d03d      	beq.n	8007818 <__kernel_rem_pio2+0x5c0>
 800779c:	4602      	mov	r2, r0
 800779e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a2:	9c01      	ldr	r4, [sp, #4]
 80077a4:	e9c4 2300 	strd	r2, r3, [r4]
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80077b0:	f7f8 fd7a 	bl	80002a8 <__aeabi_dsub>
 80077b4:	ae4c      	add	r6, sp, #304	; 0x130
 80077b6:	2401      	movs	r4, #1
 80077b8:	42a5      	cmp	r5, r4
 80077ba:	da30      	bge.n	800781e <__kernel_rem_pio2+0x5c6>
 80077bc:	9b02      	ldr	r3, [sp, #8]
 80077be:	b113      	cbz	r3, 80077c6 <__kernel_rem_pio2+0x56e>
 80077c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077c4:	4619      	mov	r1, r3
 80077c6:	9b01      	ldr	r3, [sp, #4]
 80077c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80077cc:	e00f      	b.n	80077ee <__kernel_rem_pio2+0x596>
 80077ce:	ab9a      	add	r3, sp, #616	; 0x268
 80077d0:	441c      	add	r4, r3
 80077d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80077d6:	2000      	movs	r0, #0
 80077d8:	2100      	movs	r1, #0
 80077da:	2d00      	cmp	r5, #0
 80077dc:	da10      	bge.n	8007800 <__kernel_rem_pio2+0x5a8>
 80077de:	9b02      	ldr	r3, [sp, #8]
 80077e0:	b113      	cbz	r3, 80077e8 <__kernel_rem_pio2+0x590>
 80077e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077e6:	4619      	mov	r1, r3
 80077e8:	9b01      	ldr	r3, [sp, #4]
 80077ea:	e9c3 0100 	strd	r0, r1, [r3]
 80077ee:	9b06      	ldr	r3, [sp, #24]
 80077f0:	f003 0007 	and.w	r0, r3, #7
 80077f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80077f8:	ecbd 8b02 	vpop	{d8}
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007804:	f7f8 fd52 	bl	80002ac <__adddf3>
 8007808:	3d01      	subs	r5, #1
 800780a:	e7e6      	b.n	80077da <__kernel_rem_pio2+0x582>
 800780c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007810:	f7f8 fd4c 	bl	80002ac <__adddf3>
 8007814:	3e01      	subs	r6, #1
 8007816:	e7bc      	b.n	8007792 <__kernel_rem_pio2+0x53a>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	e7c1      	b.n	80077a2 <__kernel_rem_pio2+0x54a>
 800781e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007822:	f7f8 fd43 	bl	80002ac <__adddf3>
 8007826:	3401      	adds	r4, #1
 8007828:	e7c6      	b.n	80077b8 <__kernel_rem_pio2+0x560>
 800782a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800782e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007832:	4640      	mov	r0, r8
 8007834:	ec53 2b17 	vmov	r2, r3, d7
 8007838:	4649      	mov	r1, r9
 800783a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800783e:	f7f8 fd35 	bl	80002ac <__adddf3>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	4640      	mov	r0, r8
 800784c:	4649      	mov	r1, r9
 800784e:	f7f8 fd2b 	bl	80002a8 <__aeabi_dsub>
 8007852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007856:	f7f8 fd29 	bl	80002ac <__adddf3>
 800785a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800785e:	e9ca 0100 	strd	r0, r1, [sl]
 8007862:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007866:	e770      	b.n	800774a <__kernel_rem_pio2+0x4f2>
 8007868:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800786c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007870:	4630      	mov	r0, r6
 8007872:	ec53 2b17 	vmov	r2, r3, d7
 8007876:	4639      	mov	r1, r7
 8007878:	ed8d 7b04 	vstr	d7, [sp, #16]
 800787c:	f7f8 fd16 	bl	80002ac <__adddf3>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4680      	mov	r8, r0
 8007886:	4689      	mov	r9, r1
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f8 fd0c 	bl	80002a8 <__aeabi_dsub>
 8007890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007894:	f7f8 fd0a 	bl	80002ac <__adddf3>
 8007898:	f10b 3bff 	add.w	fp, fp, #4294967295
 800789c:	e9ca 0100 	strd	r0, r1, [sl]
 80078a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80078a4:	e756      	b.n	8007754 <__kernel_rem_pio2+0x4fc>
 80078a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80078aa:	f7f8 fcff 	bl	80002ac <__adddf3>
 80078ae:	3d01      	subs	r5, #1
 80078b0:	e756      	b.n	8007760 <__kernel_rem_pio2+0x508>
 80078b2:	9b01      	ldr	r3, [sp, #4]
 80078b4:	9a01      	ldr	r2, [sp, #4]
 80078b6:	601f      	str	r7, [r3, #0]
 80078b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80078bc:	605c      	str	r4, [r3, #4]
 80078be:	609d      	str	r5, [r3, #8]
 80078c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078c4:	60d3      	str	r3, [r2, #12]
 80078c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078ca:	6110      	str	r0, [r2, #16]
 80078cc:	6153      	str	r3, [r2, #20]
 80078ce:	e78e      	b.n	80077ee <__kernel_rem_pio2+0x596>
 80078d0:	41700000 	.word	0x41700000
 80078d4:	3e700000 	.word	0x3e700000

080078d8 <__kernel_sin>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	ec55 4b10 	vmov	r4, r5, d0
 80078e0:	b085      	sub	sp, #20
 80078e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80078ea:	ed8d 1b00 	vstr	d1, [sp]
 80078ee:	9002      	str	r0, [sp, #8]
 80078f0:	da06      	bge.n	8007900 <__kernel_sin+0x28>
 80078f2:	ee10 0a10 	vmov	r0, s0
 80078f6:	4629      	mov	r1, r5
 80078f8:	f7f9 f93e 	bl	8000b78 <__aeabi_d2iz>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d051      	beq.n	80079a4 <__kernel_sin+0xcc>
 8007900:	4622      	mov	r2, r4
 8007902:	462b      	mov	r3, r5
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f8 fe86 	bl	8000618 <__aeabi_dmul>
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f8 fe7e 	bl	8000618 <__aeabi_dmul>
 800791c:	a341      	add	r3, pc, #260	; (adr r3, 8007a24 <__kernel_sin+0x14c>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4680      	mov	r8, r0
 8007924:	4689      	mov	r9, r1
 8007926:	4650      	mov	r0, sl
 8007928:	4659      	mov	r1, fp
 800792a:	f7f8 fe75 	bl	8000618 <__aeabi_dmul>
 800792e:	a33f      	add	r3, pc, #252	; (adr r3, 8007a2c <__kernel_sin+0x154>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f8 fcb8 	bl	80002a8 <__aeabi_dsub>
 8007938:	4652      	mov	r2, sl
 800793a:	465b      	mov	r3, fp
 800793c:	f7f8 fe6c 	bl	8000618 <__aeabi_dmul>
 8007940:	a33c      	add	r3, pc, #240	; (adr r3, 8007a34 <__kernel_sin+0x15c>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f7f8 fcb1 	bl	80002ac <__adddf3>
 800794a:	4652      	mov	r2, sl
 800794c:	465b      	mov	r3, fp
 800794e:	f7f8 fe63 	bl	8000618 <__aeabi_dmul>
 8007952:	a33a      	add	r3, pc, #232	; (adr r3, 8007a3c <__kernel_sin+0x164>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fca6 	bl	80002a8 <__aeabi_dsub>
 800795c:	4652      	mov	r2, sl
 800795e:	465b      	mov	r3, fp
 8007960:	f7f8 fe5a 	bl	8000618 <__aeabi_dmul>
 8007964:	a337      	add	r3, pc, #220	; (adr r3, 8007a44 <__kernel_sin+0x16c>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 fc9f 	bl	80002ac <__adddf3>
 800796e:	9b02      	ldr	r3, [sp, #8]
 8007970:	4606      	mov	r6, r0
 8007972:	460f      	mov	r7, r1
 8007974:	b9db      	cbnz	r3, 80079ae <__kernel_sin+0xd6>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4650      	mov	r0, sl
 800797c:	4659      	mov	r1, fp
 800797e:	f7f8 fe4b 	bl	8000618 <__aeabi_dmul>
 8007982:	a325      	add	r3, pc, #148	; (adr r3, 8007a18 <__kernel_sin+0x140>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fc8e 	bl	80002a8 <__aeabi_dsub>
 800798c:	4642      	mov	r2, r8
 800798e:	464b      	mov	r3, r9
 8007990:	f7f8 fe42 	bl	8000618 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4620      	mov	r0, r4
 800799a:	4629      	mov	r1, r5
 800799c:	f7f8 fc86 	bl	80002ac <__adddf3>
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	ec45 4b10 	vmov	d0, r4, r5
 80079a8:	b005      	add	sp, #20
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	2200      	movs	r2, #0
 80079b0:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <__kernel_sin+0x148>)
 80079b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079b6:	f7f8 fe2f 	bl	8000618 <__aeabi_dmul>
 80079ba:	4632      	mov	r2, r6
 80079bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079c0:	463b      	mov	r3, r7
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fe27 	bl	8000618 <__aeabi_dmul>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d2:	f7f8 fc69 	bl	80002a8 <__aeabi_dsub>
 80079d6:	4652      	mov	r2, sl
 80079d8:	465b      	mov	r3, fp
 80079da:	f7f8 fe1d 	bl	8000618 <__aeabi_dmul>
 80079de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079e2:	f7f8 fc61 	bl	80002a8 <__aeabi_dsub>
 80079e6:	a30c      	add	r3, pc, #48	; (adr r3, 8007a18 <__kernel_sin+0x140>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	4606      	mov	r6, r0
 80079ee:	460f      	mov	r7, r1
 80079f0:	4640      	mov	r0, r8
 80079f2:	4649      	mov	r1, r9
 80079f4:	f7f8 fe10 	bl	8000618 <__aeabi_dmul>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4630      	mov	r0, r6
 80079fe:	4639      	mov	r1, r7
 8007a00:	f7f8 fc54 	bl	80002ac <__adddf3>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 fc4c 	bl	80002a8 <__aeabi_dsub>
 8007a10:	e7c6      	b.n	80079a0 <__kernel_sin+0xc8>
 8007a12:	bf00      	nop
 8007a14:	f3af 8000 	nop.w
 8007a18:	55555549 	.word	0x55555549
 8007a1c:	3fc55555 	.word	0x3fc55555
 8007a20:	3fe00000 	.word	0x3fe00000
 8007a24:	5acfd57c 	.word	0x5acfd57c
 8007a28:	3de5d93a 	.word	0x3de5d93a
 8007a2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a30:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a34:	57b1fe7d 	.word	0x57b1fe7d
 8007a38:	3ec71de3 	.word	0x3ec71de3
 8007a3c:	19c161d5 	.word	0x19c161d5
 8007a40:	3f2a01a0 	.word	0x3f2a01a0
 8007a44:	1110f8a6 	.word	0x1110f8a6
 8007a48:	3f811111 	.word	0x3f811111

08007a4c <fabs>:
 8007a4c:	ec51 0b10 	vmov	r0, r1, d0
 8007a50:	ee10 2a10 	vmov	r2, s0
 8007a54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a58:	ec43 2b10 	vmov	d0, r2, r3
 8007a5c:	4770      	bx	lr
	...

08007a60 <floor>:
 8007a60:	ec51 0b10 	vmov	r0, r1, d0
 8007a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007a70:	2e13      	cmp	r6, #19
 8007a72:	460c      	mov	r4, r1
 8007a74:	ee10 5a10 	vmov	r5, s0
 8007a78:	4680      	mov	r8, r0
 8007a7a:	dc34      	bgt.n	8007ae6 <floor+0x86>
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	da16      	bge.n	8007aae <floor+0x4e>
 8007a80:	a335      	add	r3, pc, #212	; (adr r3, 8007b58 <floor+0xf8>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 fc11 	bl	80002ac <__adddf3>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f7f9 f853 	bl	8000b38 <__aeabi_dcmpgt>
 8007a92:	b148      	cbz	r0, 8007aa8 <floor+0x48>
 8007a94:	2c00      	cmp	r4, #0
 8007a96:	da59      	bge.n	8007b4c <floor+0xec>
 8007a98:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007a9c:	4a30      	ldr	r2, [pc, #192]	; (8007b60 <floor+0x100>)
 8007a9e:	432b      	orrs	r3, r5
 8007aa0:	2500      	movs	r5, #0
 8007aa2:	42ab      	cmp	r3, r5
 8007aa4:	bf18      	it	ne
 8007aa6:	4614      	movne	r4, r2
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	e025      	b.n	8007afa <floor+0x9a>
 8007aae:	4f2d      	ldr	r7, [pc, #180]	; (8007b64 <floor+0x104>)
 8007ab0:	4137      	asrs	r7, r6
 8007ab2:	ea01 0307 	and.w	r3, r1, r7
 8007ab6:	4303      	orrs	r3, r0
 8007ab8:	d01f      	beq.n	8007afa <floor+0x9a>
 8007aba:	a327      	add	r3, pc, #156	; (adr r3, 8007b58 <floor+0xf8>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fbf4 	bl	80002ac <__adddf3>
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f7f9 f836 	bl	8000b38 <__aeabi_dcmpgt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d0eb      	beq.n	8007aa8 <floor+0x48>
 8007ad0:	2c00      	cmp	r4, #0
 8007ad2:	bfbe      	ittt	lt
 8007ad4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007ad8:	fa43 f606 	asrlt.w	r6, r3, r6
 8007adc:	19a4      	addlt	r4, r4, r6
 8007ade:	ea24 0407 	bic.w	r4, r4, r7
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	e7e0      	b.n	8007aa8 <floor+0x48>
 8007ae6:	2e33      	cmp	r6, #51	; 0x33
 8007ae8:	dd0b      	ble.n	8007b02 <floor+0xa2>
 8007aea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007aee:	d104      	bne.n	8007afa <floor+0x9a>
 8007af0:	ee10 2a10 	vmov	r2, s0
 8007af4:	460b      	mov	r3, r1
 8007af6:	f7f8 fbd9 	bl	80002ac <__adddf3>
 8007afa:	ec41 0b10 	vmov	d0, r0, r1
 8007afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b02:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b06:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0a:	fa23 f707 	lsr.w	r7, r3, r7
 8007b0e:	4207      	tst	r7, r0
 8007b10:	d0f3      	beq.n	8007afa <floor+0x9a>
 8007b12:	a311      	add	r3, pc, #68	; (adr r3, 8007b58 <floor+0xf8>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fbc8 	bl	80002ac <__adddf3>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f7f9 f80a 	bl	8000b38 <__aeabi_dcmpgt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d0bf      	beq.n	8007aa8 <floor+0x48>
 8007b28:	2c00      	cmp	r4, #0
 8007b2a:	da02      	bge.n	8007b32 <floor+0xd2>
 8007b2c:	2e14      	cmp	r6, #20
 8007b2e:	d103      	bne.n	8007b38 <floor+0xd8>
 8007b30:	3401      	adds	r4, #1
 8007b32:	ea25 0507 	bic.w	r5, r5, r7
 8007b36:	e7b7      	b.n	8007aa8 <floor+0x48>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007b3e:	fa03 f606 	lsl.w	r6, r3, r6
 8007b42:	4435      	add	r5, r6
 8007b44:	4545      	cmp	r5, r8
 8007b46:	bf38      	it	cc
 8007b48:	18e4      	addcc	r4, r4, r3
 8007b4a:	e7f2      	b.n	8007b32 <floor+0xd2>
 8007b4c:	2500      	movs	r5, #0
 8007b4e:	462c      	mov	r4, r5
 8007b50:	e7aa      	b.n	8007aa8 <floor+0x48>
 8007b52:	bf00      	nop
 8007b54:	f3af 8000 	nop.w
 8007b58:	8800759c 	.word	0x8800759c
 8007b5c:	7e37e43c 	.word	0x7e37e43c
 8007b60:	bff00000 	.word	0xbff00000
 8007b64:	000fffff 	.word	0x000fffff

08007b68 <scalbn>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	ec55 4b10 	vmov	r4, r5, d0
 8007b6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007b72:	4606      	mov	r6, r0
 8007b74:	462b      	mov	r3, r5
 8007b76:	b9aa      	cbnz	r2, 8007ba4 <scalbn+0x3c>
 8007b78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b7c:	4323      	orrs	r3, r4
 8007b7e:	d03b      	beq.n	8007bf8 <scalbn+0x90>
 8007b80:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <scalbn+0xe0>)
 8007b82:	4629      	mov	r1, r5
 8007b84:	2200      	movs	r2, #0
 8007b86:	ee10 0a10 	vmov	r0, s0
 8007b8a:	f7f8 fd45 	bl	8000618 <__aeabi_dmul>
 8007b8e:	4b2f      	ldr	r3, [pc, #188]	; (8007c4c <scalbn+0xe4>)
 8007b90:	429e      	cmp	r6, r3
 8007b92:	4604      	mov	r4, r0
 8007b94:	460d      	mov	r5, r1
 8007b96:	da12      	bge.n	8007bbe <scalbn+0x56>
 8007b98:	a327      	add	r3, pc, #156	; (adr r3, 8007c38 <scalbn+0xd0>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 fd3b 	bl	8000618 <__aeabi_dmul>
 8007ba2:	e009      	b.n	8007bb8 <scalbn+0x50>
 8007ba4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ba8:	428a      	cmp	r2, r1
 8007baa:	d10c      	bne.n	8007bc6 <scalbn+0x5e>
 8007bac:	ee10 2a10 	vmov	r2, s0
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7f8 fb7a 	bl	80002ac <__adddf3>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	e01c      	b.n	8007bf8 <scalbn+0x90>
 8007bbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	3a36      	subs	r2, #54	; 0x36
 8007bc6:	4432      	add	r2, r6
 8007bc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007bcc:	428a      	cmp	r2, r1
 8007bce:	dd0b      	ble.n	8007be8 <scalbn+0x80>
 8007bd0:	ec45 4b11 	vmov	d1, r4, r5
 8007bd4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007c40 <scalbn+0xd8>
 8007bd8:	f000 f83c 	bl	8007c54 <copysign>
 8007bdc:	a318      	add	r3, pc, #96	; (adr r3, 8007c40 <scalbn+0xd8>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	ec51 0b10 	vmov	r0, r1, d0
 8007be6:	e7da      	b.n	8007b9e <scalbn+0x36>
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	dd08      	ble.n	8007bfe <scalbn+0x96>
 8007bec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007bf8:	ec45 4b10 	vmov	d0, r4, r5
 8007bfc:	bd70      	pop	{r4, r5, r6, pc}
 8007bfe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c02:	da0d      	bge.n	8007c20 <scalbn+0xb8>
 8007c04:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c08:	429e      	cmp	r6, r3
 8007c0a:	ec45 4b11 	vmov	d1, r4, r5
 8007c0e:	dce1      	bgt.n	8007bd4 <scalbn+0x6c>
 8007c10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007c38 <scalbn+0xd0>
 8007c14:	f000 f81e 	bl	8007c54 <copysign>
 8007c18:	a307      	add	r3, pc, #28	; (adr r3, 8007c38 <scalbn+0xd0>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	e7e0      	b.n	8007be2 <scalbn+0x7a>
 8007c20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c24:	3236      	adds	r2, #54	; 0x36
 8007c26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	2200      	movs	r2, #0
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <scalbn+0xe8>)
 8007c36:	e7b2      	b.n	8007b9e <scalbn+0x36>
 8007c38:	c2f8f359 	.word	0xc2f8f359
 8007c3c:	01a56e1f 	.word	0x01a56e1f
 8007c40:	8800759c 	.word	0x8800759c
 8007c44:	7e37e43c 	.word	0x7e37e43c
 8007c48:	43500000 	.word	0x43500000
 8007c4c:	ffff3cb0 	.word	0xffff3cb0
 8007c50:	3c900000 	.word	0x3c900000

08007c54 <copysign>:
 8007c54:	ec51 0b10 	vmov	r0, r1, d0
 8007c58:	ee11 0a90 	vmov	r0, s3
 8007c5c:	ee10 2a10 	vmov	r2, s0
 8007c60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007c64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007c68:	ea41 0300 	orr.w	r3, r1, r0
 8007c6c:	ec43 2b10 	vmov	d0, r2, r3
 8007c70:	4770      	bx	lr
	...

08007c74 <__errno>:
 8007c74:	4b01      	ldr	r3, [pc, #4]	; (8007c7c <__errno+0x8>)
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	20000020 	.word	0x20000020

08007c80 <__libc_init_array>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	4e0d      	ldr	r6, [pc, #52]	; (8007cb8 <__libc_init_array+0x38>)
 8007c84:	4c0d      	ldr	r4, [pc, #52]	; (8007cbc <__libc_init_array+0x3c>)
 8007c86:	1ba4      	subs	r4, r4, r6
 8007c88:	10a4      	asrs	r4, r4, #2
 8007c8a:	2500      	movs	r5, #0
 8007c8c:	42a5      	cmp	r5, r4
 8007c8e:	d109      	bne.n	8007ca4 <__libc_init_array+0x24>
 8007c90:	4e0b      	ldr	r6, [pc, #44]	; (8007cc0 <__libc_init_array+0x40>)
 8007c92:	4c0c      	ldr	r4, [pc, #48]	; (8007cc4 <__libc_init_array+0x44>)
 8007c94:	f002 f85c 	bl	8009d50 <_init>
 8007c98:	1ba4      	subs	r4, r4, r6
 8007c9a:	10a4      	asrs	r4, r4, #2
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	42a5      	cmp	r5, r4
 8007ca0:	d105      	bne.n	8007cae <__libc_init_array+0x2e>
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ca8:	4798      	blx	r3
 8007caa:	3501      	adds	r5, #1
 8007cac:	e7ee      	b.n	8007c8c <__libc_init_array+0xc>
 8007cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cb2:	4798      	blx	r3
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	e7f2      	b.n	8007c9e <__libc_init_array+0x1e>
 8007cb8:	0800a1e0 	.word	0x0800a1e0
 8007cbc:	0800a1e0 	.word	0x0800a1e0
 8007cc0:	0800a1e0 	.word	0x0800a1e0
 8007cc4:	0800a1e4 	.word	0x0800a1e4

08007cc8 <memset>:
 8007cc8:	4402      	add	r2, r0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d100      	bne.n	8007cd2 <memset+0xa>
 8007cd0:	4770      	bx	lr
 8007cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd6:	e7f9      	b.n	8007ccc <memset+0x4>

08007cd8 <__cvt>:
 8007cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	ec55 4b10 	vmov	r4, r5, d0
 8007ce0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007ce2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	460e      	mov	r6, r1
 8007cea:	4691      	mov	r9, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	bfb8      	it	lt
 8007cf0:	4622      	movlt	r2, r4
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	f027 0720 	bic.w	r7, r7, #32
 8007cf8:	bfbb      	ittet	lt
 8007cfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cfe:	461d      	movlt	r5, r3
 8007d00:	2300      	movge	r3, #0
 8007d02:	232d      	movlt	r3, #45	; 0x2d
 8007d04:	bfb8      	it	lt
 8007d06:	4614      	movlt	r4, r2
 8007d08:	2f46      	cmp	r7, #70	; 0x46
 8007d0a:	700b      	strb	r3, [r1, #0]
 8007d0c:	d004      	beq.n	8007d18 <__cvt+0x40>
 8007d0e:	2f45      	cmp	r7, #69	; 0x45
 8007d10:	d100      	bne.n	8007d14 <__cvt+0x3c>
 8007d12:	3601      	adds	r6, #1
 8007d14:	2102      	movs	r1, #2
 8007d16:	e000      	b.n	8007d1a <__cvt+0x42>
 8007d18:	2103      	movs	r1, #3
 8007d1a:	ab03      	add	r3, sp, #12
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	ab02      	add	r3, sp, #8
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	4632      	mov	r2, r6
 8007d24:	4653      	mov	r3, sl
 8007d26:	ec45 4b10 	vmov	d0, r4, r5
 8007d2a:	f000 fcdd 	bl	80086e8 <_dtoa_r>
 8007d2e:	2f47      	cmp	r7, #71	; 0x47
 8007d30:	4680      	mov	r8, r0
 8007d32:	d102      	bne.n	8007d3a <__cvt+0x62>
 8007d34:	f019 0f01 	tst.w	r9, #1
 8007d38:	d026      	beq.n	8007d88 <__cvt+0xb0>
 8007d3a:	2f46      	cmp	r7, #70	; 0x46
 8007d3c:	eb08 0906 	add.w	r9, r8, r6
 8007d40:	d111      	bne.n	8007d66 <__cvt+0x8e>
 8007d42:	f898 3000 	ldrb.w	r3, [r8]
 8007d46:	2b30      	cmp	r3, #48	; 0x30
 8007d48:	d10a      	bne.n	8007d60 <__cvt+0x88>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4629      	mov	r1, r5
 8007d52:	f7f8 fec9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d56:	b918      	cbnz	r0, 8007d60 <__cvt+0x88>
 8007d58:	f1c6 0601 	rsb	r6, r6, #1
 8007d5c:	f8ca 6000 	str.w	r6, [sl]
 8007d60:	f8da 3000 	ldr.w	r3, [sl]
 8007d64:	4499      	add	r9, r3
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f7f8 febb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d72:	b938      	cbnz	r0, 8007d84 <__cvt+0xac>
 8007d74:	2230      	movs	r2, #48	; 0x30
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	454b      	cmp	r3, r9
 8007d7a:	d205      	bcs.n	8007d88 <__cvt+0xb0>
 8007d7c:	1c59      	adds	r1, r3, #1
 8007d7e:	9103      	str	r1, [sp, #12]
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	e7f8      	b.n	8007d76 <__cvt+0x9e>
 8007d84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d8c:	eba3 0308 	sub.w	r3, r3, r8
 8007d90:	4640      	mov	r0, r8
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	b004      	add	sp, #16
 8007d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d9a <__exponent>:
 8007d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	4604      	mov	r4, r0
 8007da0:	bfba      	itte	lt
 8007da2:	4249      	neglt	r1, r1
 8007da4:	232d      	movlt	r3, #45	; 0x2d
 8007da6:	232b      	movge	r3, #43	; 0x2b
 8007da8:	2909      	cmp	r1, #9
 8007daa:	f804 2b02 	strb.w	r2, [r4], #2
 8007dae:	7043      	strb	r3, [r0, #1]
 8007db0:	dd20      	ble.n	8007df4 <__exponent+0x5a>
 8007db2:	f10d 0307 	add.w	r3, sp, #7
 8007db6:	461f      	mov	r7, r3
 8007db8:	260a      	movs	r6, #10
 8007dba:	fb91 f5f6 	sdiv	r5, r1, r6
 8007dbe:	fb06 1115 	mls	r1, r6, r5, r1
 8007dc2:	3130      	adds	r1, #48	; 0x30
 8007dc4:	2d09      	cmp	r5, #9
 8007dc6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007dca:	f103 32ff 	add.w	r2, r3, #4294967295
 8007dce:	4629      	mov	r1, r5
 8007dd0:	dc09      	bgt.n	8007de6 <__exponent+0x4c>
 8007dd2:	3130      	adds	r1, #48	; 0x30
 8007dd4:	3b02      	subs	r3, #2
 8007dd6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007dda:	42bb      	cmp	r3, r7
 8007ddc:	4622      	mov	r2, r4
 8007dde:	d304      	bcc.n	8007dea <__exponent+0x50>
 8007de0:	1a10      	subs	r0, r2, r0
 8007de2:	b003      	add	sp, #12
 8007de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de6:	4613      	mov	r3, r2
 8007de8:	e7e7      	b.n	8007dba <__exponent+0x20>
 8007dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dee:	f804 2b01 	strb.w	r2, [r4], #1
 8007df2:	e7f2      	b.n	8007dda <__exponent+0x40>
 8007df4:	2330      	movs	r3, #48	; 0x30
 8007df6:	4419      	add	r1, r3
 8007df8:	7083      	strb	r3, [r0, #2]
 8007dfa:	1d02      	adds	r2, r0, #4
 8007dfc:	70c1      	strb	r1, [r0, #3]
 8007dfe:	e7ef      	b.n	8007de0 <__exponent+0x46>

08007e00 <_printf_float>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	b08d      	sub	sp, #52	; 0x34
 8007e06:	460c      	mov	r4, r1
 8007e08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007e0c:	4616      	mov	r6, r2
 8007e0e:	461f      	mov	r7, r3
 8007e10:	4605      	mov	r5, r0
 8007e12:	f001 fa21 	bl	8009258 <_localeconv_r>
 8007e16:	6803      	ldr	r3, [r0, #0]
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7f8 f9e8 	bl	80001f0 <strlen>
 8007e20:	2300      	movs	r3, #0
 8007e22:	930a      	str	r3, [sp, #40]	; 0x28
 8007e24:	f8d8 3000 	ldr.w	r3, [r8]
 8007e28:	9005      	str	r0, [sp, #20]
 8007e2a:	3307      	adds	r3, #7
 8007e2c:	f023 0307 	bic.w	r3, r3, #7
 8007e30:	f103 0208 	add.w	r2, r3, #8
 8007e34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e38:	f8d4 b000 	ldr.w	fp, [r4]
 8007e3c:	f8c8 2000 	str.w	r2, [r8]
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e48:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e4c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e50:	9307      	str	r3, [sp, #28]
 8007e52:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e56:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5a:	4ba7      	ldr	r3, [pc, #668]	; (80080f8 <_printf_float+0x2f8>)
 8007e5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e60:	f7f8 fe74 	bl	8000b4c <__aeabi_dcmpun>
 8007e64:	bb70      	cbnz	r0, 8007ec4 <_printf_float+0xc4>
 8007e66:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6a:	4ba3      	ldr	r3, [pc, #652]	; (80080f8 <_printf_float+0x2f8>)
 8007e6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e70:	f7f8 fe4e 	bl	8000b10 <__aeabi_dcmple>
 8007e74:	bb30      	cbnz	r0, 8007ec4 <_printf_float+0xc4>
 8007e76:	2200      	movs	r2, #0
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	f7f8 fe3d 	bl	8000afc <__aeabi_dcmplt>
 8007e82:	b110      	cbz	r0, 8007e8a <_printf_float+0x8a>
 8007e84:	232d      	movs	r3, #45	; 0x2d
 8007e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8a:	4a9c      	ldr	r2, [pc, #624]	; (80080fc <_printf_float+0x2fc>)
 8007e8c:	4b9c      	ldr	r3, [pc, #624]	; (8008100 <_printf_float+0x300>)
 8007e8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e92:	bf8c      	ite	hi
 8007e94:	4690      	movhi	r8, r2
 8007e96:	4698      	movls	r8, r3
 8007e98:	2303      	movs	r3, #3
 8007e9a:	f02b 0204 	bic.w	r2, fp, #4
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	f04f 0900 	mov.w	r9, #0
 8007ea6:	9700      	str	r7, [sp, #0]
 8007ea8:	4633      	mov	r3, r6
 8007eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8007eac:	4621      	mov	r1, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 f9e6 	bl	8008280 <_printf_common>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	f040 808d 	bne.w	8007fd4 <_printf_float+0x1d4>
 8007eba:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebe:	b00d      	add	sp, #52	; 0x34
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	4649      	mov	r1, r9
 8007ecc:	f7f8 fe3e 	bl	8000b4c <__aeabi_dcmpun>
 8007ed0:	b110      	cbz	r0, 8007ed8 <_printf_float+0xd8>
 8007ed2:	4a8c      	ldr	r2, [pc, #560]	; (8008104 <_printf_float+0x304>)
 8007ed4:	4b8c      	ldr	r3, [pc, #560]	; (8008108 <_printf_float+0x308>)
 8007ed6:	e7da      	b.n	8007e8e <_printf_float+0x8e>
 8007ed8:	6861      	ldr	r1, [r4, #4]
 8007eda:	1c4b      	adds	r3, r1, #1
 8007edc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007ee0:	a80a      	add	r0, sp, #40	; 0x28
 8007ee2:	d13e      	bne.n	8007f62 <_printf_float+0x162>
 8007ee4:	2306      	movs	r3, #6
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007eee:	ab09      	add	r3, sp, #36	; 0x24
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	ec49 8b10 	vmov	d0, r8, r9
 8007ef6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	f8cd a004 	str.w	sl, [sp, #4]
 8007f00:	6861      	ldr	r1, [r4, #4]
 8007f02:	4628      	mov	r0, r5
 8007f04:	f7ff fee8 	bl	8007cd8 <__cvt>
 8007f08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007f0c:	2b47      	cmp	r3, #71	; 0x47
 8007f0e:	4680      	mov	r8, r0
 8007f10:	d109      	bne.n	8007f26 <_printf_float+0x126>
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	1cd8      	adds	r0, r3, #3
 8007f16:	db02      	blt.n	8007f1e <_printf_float+0x11e>
 8007f18:	6862      	ldr	r2, [r4, #4]
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	dd47      	ble.n	8007fae <_printf_float+0x1ae>
 8007f1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f22:	fa5f fa8a 	uxtb.w	sl, sl
 8007f26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f2c:	d824      	bhi.n	8007f78 <_printf_float+0x178>
 8007f2e:	3901      	subs	r1, #1
 8007f30:	4652      	mov	r2, sl
 8007f32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f36:	9109      	str	r1, [sp, #36]	; 0x24
 8007f38:	f7ff ff2f 	bl	8007d9a <__exponent>
 8007f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f3e:	1813      	adds	r3, r2, r0
 8007f40:	2a01      	cmp	r2, #1
 8007f42:	4681      	mov	r9, r0
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	dc02      	bgt.n	8007f4e <_printf_float+0x14e>
 8007f48:	6822      	ldr	r2, [r4, #0]
 8007f4a:	07d1      	lsls	r1, r2, #31
 8007f4c:	d501      	bpl.n	8007f52 <_printf_float+0x152>
 8007f4e:	3301      	adds	r3, #1
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0a5      	beq.n	8007ea6 <_printf_float+0xa6>
 8007f5a:	232d      	movs	r3, #45	; 0x2d
 8007f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f60:	e7a1      	b.n	8007ea6 <_printf_float+0xa6>
 8007f62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007f66:	f000 8177 	beq.w	8008258 <_printf_float+0x458>
 8007f6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f6e:	d1bb      	bne.n	8007ee8 <_printf_float+0xe8>
 8007f70:	2900      	cmp	r1, #0
 8007f72:	d1b9      	bne.n	8007ee8 <_printf_float+0xe8>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e7b6      	b.n	8007ee6 <_printf_float+0xe6>
 8007f78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f7c:	d119      	bne.n	8007fb2 <_printf_float+0x1b2>
 8007f7e:	2900      	cmp	r1, #0
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	dd0c      	ble.n	8007f9e <_printf_float+0x19e>
 8007f84:	6121      	str	r1, [r4, #16]
 8007f86:	b913      	cbnz	r3, 8007f8e <_printf_float+0x18e>
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	07d2      	lsls	r2, r2, #31
 8007f8c:	d502      	bpl.n	8007f94 <_printf_float+0x194>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	440b      	add	r3, r1
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f96:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f98:	f04f 0900 	mov.w	r9, #0
 8007f9c:	e7d9      	b.n	8007f52 <_printf_float+0x152>
 8007f9e:	b913      	cbnz	r3, 8007fa6 <_printf_float+0x1a6>
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	07d0      	lsls	r0, r2, #31
 8007fa4:	d501      	bpl.n	8007faa <_printf_float+0x1aa>
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	e7f3      	b.n	8007f92 <_printf_float+0x192>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e7f1      	b.n	8007f92 <_printf_float+0x192>
 8007fae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007fb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	db05      	blt.n	8007fc6 <_printf_float+0x1c6>
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	07d1      	lsls	r1, r2, #31
 8007fc0:	d5e8      	bpl.n	8007f94 <_printf_float+0x194>
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	e7e5      	b.n	8007f92 <_printf_float+0x192>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bfd4      	ite	le
 8007fca:	f1c3 0302 	rsble	r3, r3, #2
 8007fce:	2301      	movgt	r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	e7de      	b.n	8007f92 <_printf_float+0x192>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	055a      	lsls	r2, r3, #21
 8007fd8:	d407      	bmi.n	8007fea <_printf_float+0x1ea>
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	4642      	mov	r2, r8
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d12b      	bne.n	8008040 <_printf_float+0x240>
 8007fe8:	e767      	b.n	8007eba <_printf_float+0xba>
 8007fea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007fee:	f240 80dc 	bls.w	80081aa <_printf_float+0x3aa>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ffa:	f7f8 fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d033      	beq.n	800806a <_printf_float+0x26a>
 8008002:	2301      	movs	r3, #1
 8008004:	4a41      	ldr	r2, [pc, #260]	; (800810c <_printf_float+0x30c>)
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	f43f af54 	beq.w	8007eba <_printf_float+0xba>
 8008012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008016:	429a      	cmp	r2, r3
 8008018:	db02      	blt.n	8008020 <_printf_float+0x220>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	07d8      	lsls	r0, r3, #31
 800801e:	d50f      	bpl.n	8008040 <_printf_float+0x240>
 8008020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f af45 	beq.w	8007eba <_printf_float+0xba>
 8008030:	f04f 0800 	mov.w	r8, #0
 8008034:	f104 091a 	add.w	r9, r4, #26
 8008038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803a:	3b01      	subs	r3, #1
 800803c:	4543      	cmp	r3, r8
 800803e:	dc09      	bgt.n	8008054 <_printf_float+0x254>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	079b      	lsls	r3, r3, #30
 8008044:	f100 8103 	bmi.w	800824e <_printf_float+0x44e>
 8008048:	68e0      	ldr	r0, [r4, #12]
 800804a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804c:	4298      	cmp	r0, r3
 800804e:	bfb8      	it	lt
 8008050:	4618      	movlt	r0, r3
 8008052:	e734      	b.n	8007ebe <_printf_float+0xbe>
 8008054:	2301      	movs	r3, #1
 8008056:	464a      	mov	r2, r9
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	f43f af2b 	beq.w	8007eba <_printf_float+0xba>
 8008064:	f108 0801 	add.w	r8, r8, #1
 8008068:	e7e6      	b.n	8008038 <_printf_float+0x238>
 800806a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806c:	2b00      	cmp	r3, #0
 800806e:	dc2b      	bgt.n	80080c8 <_printf_float+0x2c8>
 8008070:	2301      	movs	r3, #1
 8008072:	4a26      	ldr	r2, [pc, #152]	; (800810c <_printf_float+0x30c>)
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f af1d 	beq.w	8007eba <_printf_float+0xba>
 8008080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008082:	b923      	cbnz	r3, 800808e <_printf_float+0x28e>
 8008084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008086:	b913      	cbnz	r3, 800808e <_printf_float+0x28e>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	07d9      	lsls	r1, r3, #31
 800808c:	d5d8      	bpl.n	8008040 <_printf_float+0x240>
 800808e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008092:	4631      	mov	r1, r6
 8008094:	4628      	mov	r0, r5
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	f43f af0e 	beq.w	8007eba <_printf_float+0xba>
 800809e:	f04f 0900 	mov.w	r9, #0
 80080a2:	f104 0a1a 	add.w	sl, r4, #26
 80080a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a8:	425b      	negs	r3, r3
 80080aa:	454b      	cmp	r3, r9
 80080ac:	dc01      	bgt.n	80080b2 <_printf_float+0x2b2>
 80080ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b0:	e794      	b.n	8007fdc <_printf_float+0x1dc>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4652      	mov	r2, sl
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	f43f aefc 	beq.w	8007eba <_printf_float+0xba>
 80080c2:	f109 0901 	add.w	r9, r9, #1
 80080c6:	e7ee      	b.n	80080a6 <_printf_float+0x2a6>
 80080c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080cc:	429a      	cmp	r2, r3
 80080ce:	bfa8      	it	ge
 80080d0:	461a      	movge	r2, r3
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	4691      	mov	r9, r2
 80080d6:	dd07      	ble.n	80080e8 <_printf_float+0x2e8>
 80080d8:	4613      	mov	r3, r2
 80080da:	4631      	mov	r1, r6
 80080dc:	4642      	mov	r2, r8
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	f43f aee9 	beq.w	8007eba <_printf_float+0xba>
 80080e8:	f104 031a 	add.w	r3, r4, #26
 80080ec:	f04f 0b00 	mov.w	fp, #0
 80080f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080f4:	9306      	str	r3, [sp, #24]
 80080f6:	e015      	b.n	8008124 <_printf_float+0x324>
 80080f8:	7fefffff 	.word	0x7fefffff
 80080fc:	08009f7c 	.word	0x08009f7c
 8008100:	08009f78 	.word	0x08009f78
 8008104:	08009f84 	.word	0x08009f84
 8008108:	08009f80 	.word	0x08009f80
 800810c:	08009f88 	.word	0x08009f88
 8008110:	2301      	movs	r3, #1
 8008112:	9a06      	ldr	r2, [sp, #24]
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f aecd 	beq.w	8007eba <_printf_float+0xba>
 8008120:	f10b 0b01 	add.w	fp, fp, #1
 8008124:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008128:	ebaa 0309 	sub.w	r3, sl, r9
 800812c:	455b      	cmp	r3, fp
 800812e:	dcef      	bgt.n	8008110 <_printf_float+0x310>
 8008130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008134:	429a      	cmp	r2, r3
 8008136:	44d0      	add	r8, sl
 8008138:	db15      	blt.n	8008166 <_printf_float+0x366>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	07da      	lsls	r2, r3, #31
 800813e:	d412      	bmi.n	8008166 <_printf_float+0x366>
 8008140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008142:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008144:	eba3 020a 	sub.w	r2, r3, sl
 8008148:	eba3 0a01 	sub.w	sl, r3, r1
 800814c:	4592      	cmp	sl, r2
 800814e:	bfa8      	it	ge
 8008150:	4692      	movge	sl, r2
 8008152:	f1ba 0f00 	cmp.w	sl, #0
 8008156:	dc0e      	bgt.n	8008176 <_printf_float+0x376>
 8008158:	f04f 0800 	mov.w	r8, #0
 800815c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008160:	f104 091a 	add.w	r9, r4, #26
 8008164:	e019      	b.n	800819a <_printf_float+0x39a>
 8008166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	d1e5      	bne.n	8008140 <_printf_float+0x340>
 8008174:	e6a1      	b.n	8007eba <_printf_float+0xba>
 8008176:	4653      	mov	r3, sl
 8008178:	4642      	mov	r2, r8
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	d1e9      	bne.n	8008158 <_printf_float+0x358>
 8008184:	e699      	b.n	8007eba <_printf_float+0xba>
 8008186:	2301      	movs	r3, #1
 8008188:	464a      	mov	r2, r9
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f ae92 	beq.w	8007eba <_printf_float+0xba>
 8008196:	f108 0801 	add.w	r8, r8, #1
 800819a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800819e:	1a9b      	subs	r3, r3, r2
 80081a0:	eba3 030a 	sub.w	r3, r3, sl
 80081a4:	4543      	cmp	r3, r8
 80081a6:	dcee      	bgt.n	8008186 <_printf_float+0x386>
 80081a8:	e74a      	b.n	8008040 <_printf_float+0x240>
 80081aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ac:	2a01      	cmp	r2, #1
 80081ae:	dc01      	bgt.n	80081b4 <_printf_float+0x3b4>
 80081b0:	07db      	lsls	r3, r3, #31
 80081b2:	d53a      	bpl.n	800822a <_printf_float+0x42a>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4642      	mov	r2, r8
 80081b8:	4631      	mov	r1, r6
 80081ba:	4628      	mov	r0, r5
 80081bc:	47b8      	blx	r7
 80081be:	3001      	adds	r0, #1
 80081c0:	f43f ae7b 	beq.w	8007eba <_printf_float+0xba>
 80081c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f108 0801 	add.w	r8, r8, #1
 80081d4:	f43f ae71 	beq.w	8007eba <_printf_float+0xba>
 80081d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081da:	2200      	movs	r2, #0
 80081dc:	f103 3aff 	add.w	sl, r3, #4294967295
 80081e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081e4:	2300      	movs	r3, #0
 80081e6:	f7f8 fc7f 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ea:	b9c8      	cbnz	r0, 8008220 <_printf_float+0x420>
 80081ec:	4653      	mov	r3, sl
 80081ee:	4642      	mov	r2, r8
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	d10e      	bne.n	8008218 <_printf_float+0x418>
 80081fa:	e65e      	b.n	8007eba <_printf_float+0xba>
 80081fc:	2301      	movs	r3, #1
 80081fe:	4652      	mov	r2, sl
 8008200:	4631      	mov	r1, r6
 8008202:	4628      	mov	r0, r5
 8008204:	47b8      	blx	r7
 8008206:	3001      	adds	r0, #1
 8008208:	f43f ae57 	beq.w	8007eba <_printf_float+0xba>
 800820c:	f108 0801 	add.w	r8, r8, #1
 8008210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008212:	3b01      	subs	r3, #1
 8008214:	4543      	cmp	r3, r8
 8008216:	dcf1      	bgt.n	80081fc <_printf_float+0x3fc>
 8008218:	464b      	mov	r3, r9
 800821a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800821e:	e6de      	b.n	8007fde <_printf_float+0x1de>
 8008220:	f04f 0800 	mov.w	r8, #0
 8008224:	f104 0a1a 	add.w	sl, r4, #26
 8008228:	e7f2      	b.n	8008210 <_printf_float+0x410>
 800822a:	2301      	movs	r3, #1
 800822c:	e7df      	b.n	80081ee <_printf_float+0x3ee>
 800822e:	2301      	movs	r3, #1
 8008230:	464a      	mov	r2, r9
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	f43f ae3e 	beq.w	8007eba <_printf_float+0xba>
 800823e:	f108 0801 	add.w	r8, r8, #1
 8008242:	68e3      	ldr	r3, [r4, #12]
 8008244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	4543      	cmp	r3, r8
 800824a:	dcf0      	bgt.n	800822e <_printf_float+0x42e>
 800824c:	e6fc      	b.n	8008048 <_printf_float+0x248>
 800824e:	f04f 0800 	mov.w	r8, #0
 8008252:	f104 0919 	add.w	r9, r4, #25
 8008256:	e7f4      	b.n	8008242 <_printf_float+0x442>
 8008258:	2900      	cmp	r1, #0
 800825a:	f43f ae8b 	beq.w	8007f74 <_printf_float+0x174>
 800825e:	2300      	movs	r3, #0
 8008260:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008264:	ab09      	add	r3, sp, #36	; 0x24
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	ec49 8b10 	vmov	d0, r8, r9
 800826c:	6022      	str	r2, [r4, #0]
 800826e:	f8cd a004 	str.w	sl, [sp, #4]
 8008272:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008276:	4628      	mov	r0, r5
 8008278:	f7ff fd2e 	bl	8007cd8 <__cvt>
 800827c:	4680      	mov	r8, r0
 800827e:	e648      	b.n	8007f12 <_printf_float+0x112>

08008280 <_printf_common>:
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	4691      	mov	r9, r2
 8008286:	461f      	mov	r7, r3
 8008288:	688a      	ldr	r2, [r1, #8]
 800828a:	690b      	ldr	r3, [r1, #16]
 800828c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008290:	4293      	cmp	r3, r2
 8008292:	bfb8      	it	lt
 8008294:	4613      	movlt	r3, r2
 8008296:	f8c9 3000 	str.w	r3, [r9]
 800829a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800829e:	4606      	mov	r6, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	b112      	cbz	r2, 80082aa <_printf_common+0x2a>
 80082a4:	3301      	adds	r3, #1
 80082a6:	f8c9 3000 	str.w	r3, [r9]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	0699      	lsls	r1, r3, #26
 80082ae:	bf42      	ittt	mi
 80082b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80082b4:	3302      	addmi	r3, #2
 80082b6:	f8c9 3000 	strmi.w	r3, [r9]
 80082ba:	6825      	ldr	r5, [r4, #0]
 80082bc:	f015 0506 	ands.w	r5, r5, #6
 80082c0:	d107      	bne.n	80082d2 <_printf_common+0x52>
 80082c2:	f104 0a19 	add.w	sl, r4, #25
 80082c6:	68e3      	ldr	r3, [r4, #12]
 80082c8:	f8d9 2000 	ldr.w	r2, [r9]
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	42ab      	cmp	r3, r5
 80082d0:	dc28      	bgt.n	8008324 <_printf_common+0xa4>
 80082d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	3300      	adds	r3, #0
 80082da:	bf18      	it	ne
 80082dc:	2301      	movne	r3, #1
 80082de:	0692      	lsls	r2, r2, #26
 80082e0:	d42d      	bmi.n	800833e <_printf_common+0xbe>
 80082e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082e6:	4639      	mov	r1, r7
 80082e8:	4630      	mov	r0, r6
 80082ea:	47c0      	blx	r8
 80082ec:	3001      	adds	r0, #1
 80082ee:	d020      	beq.n	8008332 <_printf_common+0xb2>
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	68e5      	ldr	r5, [r4, #12]
 80082f4:	f8d9 2000 	ldr.w	r2, [r9]
 80082f8:	f003 0306 	and.w	r3, r3, #6
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	bf08      	it	eq
 8008300:	1aad      	subeq	r5, r5, r2
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	6922      	ldr	r2, [r4, #16]
 8008306:	bf0c      	ite	eq
 8008308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800830c:	2500      	movne	r5, #0
 800830e:	4293      	cmp	r3, r2
 8008310:	bfc4      	itt	gt
 8008312:	1a9b      	subgt	r3, r3, r2
 8008314:	18ed      	addgt	r5, r5, r3
 8008316:	f04f 0900 	mov.w	r9, #0
 800831a:	341a      	adds	r4, #26
 800831c:	454d      	cmp	r5, r9
 800831e:	d11a      	bne.n	8008356 <_printf_common+0xd6>
 8008320:	2000      	movs	r0, #0
 8008322:	e008      	b.n	8008336 <_printf_common+0xb6>
 8008324:	2301      	movs	r3, #1
 8008326:	4652      	mov	r2, sl
 8008328:	4639      	mov	r1, r7
 800832a:	4630      	mov	r0, r6
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d103      	bne.n	800833a <_printf_common+0xba>
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833a:	3501      	adds	r5, #1
 800833c:	e7c3      	b.n	80082c6 <_printf_common+0x46>
 800833e:	18e1      	adds	r1, r4, r3
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	2030      	movs	r0, #48	; 0x30
 8008344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008348:	4422      	add	r2, r4
 800834a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800834e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008352:	3302      	adds	r3, #2
 8008354:	e7c5      	b.n	80082e2 <_printf_common+0x62>
 8008356:	2301      	movs	r3, #1
 8008358:	4622      	mov	r2, r4
 800835a:	4639      	mov	r1, r7
 800835c:	4630      	mov	r0, r6
 800835e:	47c0      	blx	r8
 8008360:	3001      	adds	r0, #1
 8008362:	d0e6      	beq.n	8008332 <_printf_common+0xb2>
 8008364:	f109 0901 	add.w	r9, r9, #1
 8008368:	e7d8      	b.n	800831c <_printf_common+0x9c>
	...

0800836c <_printf_i>:
 800836c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008370:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008374:	460c      	mov	r4, r1
 8008376:	7e09      	ldrb	r1, [r1, #24]
 8008378:	b085      	sub	sp, #20
 800837a:	296e      	cmp	r1, #110	; 0x6e
 800837c:	4617      	mov	r7, r2
 800837e:	4606      	mov	r6, r0
 8008380:	4698      	mov	r8, r3
 8008382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008384:	f000 80b3 	beq.w	80084ee <_printf_i+0x182>
 8008388:	d822      	bhi.n	80083d0 <_printf_i+0x64>
 800838a:	2963      	cmp	r1, #99	; 0x63
 800838c:	d036      	beq.n	80083fc <_printf_i+0x90>
 800838e:	d80a      	bhi.n	80083a6 <_printf_i+0x3a>
 8008390:	2900      	cmp	r1, #0
 8008392:	f000 80b9 	beq.w	8008508 <_printf_i+0x19c>
 8008396:	2958      	cmp	r1, #88	; 0x58
 8008398:	f000 8083 	beq.w	80084a2 <_printf_i+0x136>
 800839c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80083a4:	e032      	b.n	800840c <_printf_i+0xa0>
 80083a6:	2964      	cmp	r1, #100	; 0x64
 80083a8:	d001      	beq.n	80083ae <_printf_i+0x42>
 80083aa:	2969      	cmp	r1, #105	; 0x69
 80083ac:	d1f6      	bne.n	800839c <_printf_i+0x30>
 80083ae:	6820      	ldr	r0, [r4, #0]
 80083b0:	6813      	ldr	r3, [r2, #0]
 80083b2:	0605      	lsls	r5, r0, #24
 80083b4:	f103 0104 	add.w	r1, r3, #4
 80083b8:	d52a      	bpl.n	8008410 <_printf_i+0xa4>
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	da03      	bge.n	80083ca <_printf_i+0x5e>
 80083c2:	222d      	movs	r2, #45	; 0x2d
 80083c4:	425b      	negs	r3, r3
 80083c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80083ca:	486f      	ldr	r0, [pc, #444]	; (8008588 <_printf_i+0x21c>)
 80083cc:	220a      	movs	r2, #10
 80083ce:	e039      	b.n	8008444 <_printf_i+0xd8>
 80083d0:	2973      	cmp	r1, #115	; 0x73
 80083d2:	f000 809d 	beq.w	8008510 <_printf_i+0x1a4>
 80083d6:	d808      	bhi.n	80083ea <_printf_i+0x7e>
 80083d8:	296f      	cmp	r1, #111	; 0x6f
 80083da:	d020      	beq.n	800841e <_printf_i+0xb2>
 80083dc:	2970      	cmp	r1, #112	; 0x70
 80083de:	d1dd      	bne.n	800839c <_printf_i+0x30>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	f043 0320 	orr.w	r3, r3, #32
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	e003      	b.n	80083f2 <_printf_i+0x86>
 80083ea:	2975      	cmp	r1, #117	; 0x75
 80083ec:	d017      	beq.n	800841e <_printf_i+0xb2>
 80083ee:	2978      	cmp	r1, #120	; 0x78
 80083f0:	d1d4      	bne.n	800839c <_printf_i+0x30>
 80083f2:	2378      	movs	r3, #120	; 0x78
 80083f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083f8:	4864      	ldr	r0, [pc, #400]	; (800858c <_printf_i+0x220>)
 80083fa:	e055      	b.n	80084a8 <_printf_i+0x13c>
 80083fc:	6813      	ldr	r3, [r2, #0]
 80083fe:	1d19      	adds	r1, r3, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6011      	str	r1, [r2, #0]
 8008404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800840c:	2301      	movs	r3, #1
 800840e:	e08c      	b.n	800852a <_printf_i+0x1be>
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6011      	str	r1, [r2, #0]
 8008414:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008418:	bf18      	it	ne
 800841a:	b21b      	sxthne	r3, r3
 800841c:	e7cf      	b.n	80083be <_printf_i+0x52>
 800841e:	6813      	ldr	r3, [r2, #0]
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	1d18      	adds	r0, r3, #4
 8008424:	6010      	str	r0, [r2, #0]
 8008426:	0628      	lsls	r0, r5, #24
 8008428:	d501      	bpl.n	800842e <_printf_i+0xc2>
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	e002      	b.n	8008434 <_printf_i+0xc8>
 800842e:	0668      	lsls	r0, r5, #25
 8008430:	d5fb      	bpl.n	800842a <_printf_i+0xbe>
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	4854      	ldr	r0, [pc, #336]	; (8008588 <_printf_i+0x21c>)
 8008436:	296f      	cmp	r1, #111	; 0x6f
 8008438:	bf14      	ite	ne
 800843a:	220a      	movne	r2, #10
 800843c:	2208      	moveq	r2, #8
 800843e:	2100      	movs	r1, #0
 8008440:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008444:	6865      	ldr	r5, [r4, #4]
 8008446:	60a5      	str	r5, [r4, #8]
 8008448:	2d00      	cmp	r5, #0
 800844a:	f2c0 8095 	blt.w	8008578 <_printf_i+0x20c>
 800844e:	6821      	ldr	r1, [r4, #0]
 8008450:	f021 0104 	bic.w	r1, r1, #4
 8008454:	6021      	str	r1, [r4, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d13d      	bne.n	80084d6 <_printf_i+0x16a>
 800845a:	2d00      	cmp	r5, #0
 800845c:	f040 808e 	bne.w	800857c <_printf_i+0x210>
 8008460:	4665      	mov	r5, ip
 8008462:	2a08      	cmp	r2, #8
 8008464:	d10b      	bne.n	800847e <_printf_i+0x112>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	07db      	lsls	r3, r3, #31
 800846a:	d508      	bpl.n	800847e <_printf_i+0x112>
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	6862      	ldr	r2, [r4, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	bfde      	ittt	le
 8008474:	2330      	movle	r3, #48	; 0x30
 8008476:	f805 3c01 	strble.w	r3, [r5, #-1]
 800847a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800847e:	ebac 0305 	sub.w	r3, ip, r5
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	f8cd 8000 	str.w	r8, [sp]
 8008488:	463b      	mov	r3, r7
 800848a:	aa03      	add	r2, sp, #12
 800848c:	4621      	mov	r1, r4
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff fef6 	bl	8008280 <_printf_common>
 8008494:	3001      	adds	r0, #1
 8008496:	d14d      	bne.n	8008534 <_printf_i+0x1c8>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	b005      	add	sp, #20
 800849e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084a2:	4839      	ldr	r0, [pc, #228]	; (8008588 <_printf_i+0x21c>)
 80084a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80084a8:	6813      	ldr	r3, [r2, #0]
 80084aa:	6821      	ldr	r1, [r4, #0]
 80084ac:	1d1d      	adds	r5, r3, #4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6015      	str	r5, [r2, #0]
 80084b2:	060a      	lsls	r2, r1, #24
 80084b4:	d50b      	bpl.n	80084ce <_printf_i+0x162>
 80084b6:	07ca      	lsls	r2, r1, #31
 80084b8:	bf44      	itt	mi
 80084ba:	f041 0120 	orrmi.w	r1, r1, #32
 80084be:	6021      	strmi	r1, [r4, #0]
 80084c0:	b91b      	cbnz	r3, 80084ca <_printf_i+0x15e>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	f022 0220 	bic.w	r2, r2, #32
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	2210      	movs	r2, #16
 80084cc:	e7b7      	b.n	800843e <_printf_i+0xd2>
 80084ce:	064d      	lsls	r5, r1, #25
 80084d0:	bf48      	it	mi
 80084d2:	b29b      	uxthmi	r3, r3
 80084d4:	e7ef      	b.n	80084b6 <_printf_i+0x14a>
 80084d6:	4665      	mov	r5, ip
 80084d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80084dc:	fb02 3311 	mls	r3, r2, r1, r3
 80084e0:	5cc3      	ldrb	r3, [r0, r3]
 80084e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80084e6:	460b      	mov	r3, r1
 80084e8:	2900      	cmp	r1, #0
 80084ea:	d1f5      	bne.n	80084d8 <_printf_i+0x16c>
 80084ec:	e7b9      	b.n	8008462 <_printf_i+0xf6>
 80084ee:	6813      	ldr	r3, [r2, #0]
 80084f0:	6825      	ldr	r5, [r4, #0]
 80084f2:	6961      	ldr	r1, [r4, #20]
 80084f4:	1d18      	adds	r0, r3, #4
 80084f6:	6010      	str	r0, [r2, #0]
 80084f8:	0628      	lsls	r0, r5, #24
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	d501      	bpl.n	8008502 <_printf_i+0x196>
 80084fe:	6019      	str	r1, [r3, #0]
 8008500:	e002      	b.n	8008508 <_printf_i+0x19c>
 8008502:	066a      	lsls	r2, r5, #25
 8008504:	d5fb      	bpl.n	80084fe <_printf_i+0x192>
 8008506:	8019      	strh	r1, [r3, #0]
 8008508:	2300      	movs	r3, #0
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	4665      	mov	r5, ip
 800850e:	e7b9      	b.n	8008484 <_printf_i+0x118>
 8008510:	6813      	ldr	r3, [r2, #0]
 8008512:	1d19      	adds	r1, r3, #4
 8008514:	6011      	str	r1, [r2, #0]
 8008516:	681d      	ldr	r5, [r3, #0]
 8008518:	6862      	ldr	r2, [r4, #4]
 800851a:	2100      	movs	r1, #0
 800851c:	4628      	mov	r0, r5
 800851e:	f7f7 fe6f 	bl	8000200 <memchr>
 8008522:	b108      	cbz	r0, 8008528 <_printf_i+0x1bc>
 8008524:	1b40      	subs	r0, r0, r5
 8008526:	6060      	str	r0, [r4, #4]
 8008528:	6863      	ldr	r3, [r4, #4]
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	2300      	movs	r3, #0
 800852e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008532:	e7a7      	b.n	8008484 <_printf_i+0x118>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	462a      	mov	r2, r5
 8008538:	4639      	mov	r1, r7
 800853a:	4630      	mov	r0, r6
 800853c:	47c0      	blx	r8
 800853e:	3001      	adds	r0, #1
 8008540:	d0aa      	beq.n	8008498 <_printf_i+0x12c>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	079b      	lsls	r3, r3, #30
 8008546:	d413      	bmi.n	8008570 <_printf_i+0x204>
 8008548:	68e0      	ldr	r0, [r4, #12]
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	4298      	cmp	r0, r3
 800854e:	bfb8      	it	lt
 8008550:	4618      	movlt	r0, r3
 8008552:	e7a3      	b.n	800849c <_printf_i+0x130>
 8008554:	2301      	movs	r3, #1
 8008556:	464a      	mov	r2, r9
 8008558:	4639      	mov	r1, r7
 800855a:	4630      	mov	r0, r6
 800855c:	47c0      	blx	r8
 800855e:	3001      	adds	r0, #1
 8008560:	d09a      	beq.n	8008498 <_printf_i+0x12c>
 8008562:	3501      	adds	r5, #1
 8008564:	68e3      	ldr	r3, [r4, #12]
 8008566:	9a03      	ldr	r2, [sp, #12]
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	42ab      	cmp	r3, r5
 800856c:	dcf2      	bgt.n	8008554 <_printf_i+0x1e8>
 800856e:	e7eb      	b.n	8008548 <_printf_i+0x1dc>
 8008570:	2500      	movs	r5, #0
 8008572:	f104 0919 	add.w	r9, r4, #25
 8008576:	e7f5      	b.n	8008564 <_printf_i+0x1f8>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1ac      	bne.n	80084d6 <_printf_i+0x16a>
 800857c:	7803      	ldrb	r3, [r0, #0]
 800857e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008582:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008586:	e76c      	b.n	8008462 <_printf_i+0xf6>
 8008588:	08009f8a 	.word	0x08009f8a
 800858c:	08009f9b 	.word	0x08009f9b

08008590 <siprintf>:
 8008590:	b40e      	push	{r1, r2, r3}
 8008592:	b500      	push	{lr}
 8008594:	b09c      	sub	sp, #112	; 0x70
 8008596:	ab1d      	add	r3, sp, #116	; 0x74
 8008598:	9002      	str	r0, [sp, #8]
 800859a:	9006      	str	r0, [sp, #24]
 800859c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085a0:	4809      	ldr	r0, [pc, #36]	; (80085c8 <siprintf+0x38>)
 80085a2:	9107      	str	r1, [sp, #28]
 80085a4:	9104      	str	r1, [sp, #16]
 80085a6:	4909      	ldr	r1, [pc, #36]	; (80085cc <siprintf+0x3c>)
 80085a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ac:	9105      	str	r1, [sp, #20]
 80085ae:	6800      	ldr	r0, [r0, #0]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	a902      	add	r1, sp, #8
 80085b4:	f001 fa5c 	bl	8009a70 <_svfiprintf_r>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	b01c      	add	sp, #112	; 0x70
 80085c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c4:	b003      	add	sp, #12
 80085c6:	4770      	bx	lr
 80085c8:	20000020 	.word	0x20000020
 80085cc:	ffff0208 	.word	0xffff0208

080085d0 <quorem>:
 80085d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	6903      	ldr	r3, [r0, #16]
 80085d6:	690c      	ldr	r4, [r1, #16]
 80085d8:	42a3      	cmp	r3, r4
 80085da:	4680      	mov	r8, r0
 80085dc:	f2c0 8082 	blt.w	80086e4 <quorem+0x114>
 80085e0:	3c01      	subs	r4, #1
 80085e2:	f101 0714 	add.w	r7, r1, #20
 80085e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80085ea:	f100 0614 	add.w	r6, r0, #20
 80085ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80085f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80085f6:	eb06 030c 	add.w	r3, r6, ip
 80085fa:	3501      	adds	r5, #1
 80085fc:	eb07 090c 	add.w	r9, r7, ip
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	fbb0 f5f5 	udiv	r5, r0, r5
 8008606:	b395      	cbz	r5, 800866e <quorem+0x9e>
 8008608:	f04f 0a00 	mov.w	sl, #0
 800860c:	4638      	mov	r0, r7
 800860e:	46b6      	mov	lr, r6
 8008610:	46d3      	mov	fp, sl
 8008612:	f850 2b04 	ldr.w	r2, [r0], #4
 8008616:	b293      	uxth	r3, r2
 8008618:	fb05 a303 	mla	r3, r5, r3, sl
 800861c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008620:	b29b      	uxth	r3, r3
 8008622:	ebab 0303 	sub.w	r3, fp, r3
 8008626:	0c12      	lsrs	r2, r2, #16
 8008628:	f8de b000 	ldr.w	fp, [lr]
 800862c:	fb05 a202 	mla	r2, r5, r2, sl
 8008630:	fa13 f38b 	uxtah	r3, r3, fp
 8008634:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008638:	fa1f fb82 	uxth.w	fp, r2
 800863c:	f8de 2000 	ldr.w	r2, [lr]
 8008640:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008648:	b29b      	uxth	r3, r3
 800864a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800864e:	4581      	cmp	r9, r0
 8008650:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008654:	f84e 3b04 	str.w	r3, [lr], #4
 8008658:	d2db      	bcs.n	8008612 <quorem+0x42>
 800865a:	f856 300c 	ldr.w	r3, [r6, ip]
 800865e:	b933      	cbnz	r3, 800866e <quorem+0x9e>
 8008660:	9b01      	ldr	r3, [sp, #4]
 8008662:	3b04      	subs	r3, #4
 8008664:	429e      	cmp	r6, r3
 8008666:	461a      	mov	r2, r3
 8008668:	d330      	bcc.n	80086cc <quorem+0xfc>
 800866a:	f8c8 4010 	str.w	r4, [r8, #16]
 800866e:	4640      	mov	r0, r8
 8008670:	f001 f828 	bl	80096c4 <__mcmp>
 8008674:	2800      	cmp	r0, #0
 8008676:	db25      	blt.n	80086c4 <quorem+0xf4>
 8008678:	3501      	adds	r5, #1
 800867a:	4630      	mov	r0, r6
 800867c:	f04f 0c00 	mov.w	ip, #0
 8008680:	f857 2b04 	ldr.w	r2, [r7], #4
 8008684:	f8d0 e000 	ldr.w	lr, [r0]
 8008688:	b293      	uxth	r3, r2
 800868a:	ebac 0303 	sub.w	r3, ip, r3
 800868e:	0c12      	lsrs	r2, r2, #16
 8008690:	fa13 f38e 	uxtah	r3, r3, lr
 8008694:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086a2:	45b9      	cmp	r9, r7
 80086a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086a8:	f840 3b04 	str.w	r3, [r0], #4
 80086ac:	d2e8      	bcs.n	8008680 <quorem+0xb0>
 80086ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80086b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80086b6:	b92a      	cbnz	r2, 80086c4 <quorem+0xf4>
 80086b8:	3b04      	subs	r3, #4
 80086ba:	429e      	cmp	r6, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	d30b      	bcc.n	80086d8 <quorem+0x108>
 80086c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80086c4:	4628      	mov	r0, r5
 80086c6:	b003      	add	sp, #12
 80086c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	3b04      	subs	r3, #4
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	d1ca      	bne.n	800866a <quorem+0x9a>
 80086d4:	3c01      	subs	r4, #1
 80086d6:	e7c5      	b.n	8008664 <quorem+0x94>
 80086d8:	6812      	ldr	r2, [r2, #0]
 80086da:	3b04      	subs	r3, #4
 80086dc:	2a00      	cmp	r2, #0
 80086de:	d1ef      	bne.n	80086c0 <quorem+0xf0>
 80086e0:	3c01      	subs	r4, #1
 80086e2:	e7ea      	b.n	80086ba <quorem+0xea>
 80086e4:	2000      	movs	r0, #0
 80086e6:	e7ee      	b.n	80086c6 <quorem+0xf6>

080086e8 <_dtoa_r>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	ec57 6b10 	vmov	r6, r7, d0
 80086f0:	b097      	sub	sp, #92	; 0x5c
 80086f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086f4:	9106      	str	r1, [sp, #24]
 80086f6:	4604      	mov	r4, r0
 80086f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80086fa:	9312      	str	r3, [sp, #72]	; 0x48
 80086fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008700:	e9cd 6700 	strd	r6, r7, [sp]
 8008704:	b93d      	cbnz	r5, 8008716 <_dtoa_r+0x2e>
 8008706:	2010      	movs	r0, #16
 8008708:	f000 fdb4 	bl	8009274 <malloc>
 800870c:	6260      	str	r0, [r4, #36]	; 0x24
 800870e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008712:	6005      	str	r5, [r0, #0]
 8008714:	60c5      	str	r5, [r0, #12]
 8008716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008718:	6819      	ldr	r1, [r3, #0]
 800871a:	b151      	cbz	r1, 8008732 <_dtoa_r+0x4a>
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	604a      	str	r2, [r1, #4]
 8008720:	2301      	movs	r3, #1
 8008722:	4093      	lsls	r3, r2
 8008724:	608b      	str	r3, [r1, #8]
 8008726:	4620      	mov	r0, r4
 8008728:	f000 fdeb 	bl	8009302 <_Bfree>
 800872c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	1e3b      	subs	r3, r7, #0
 8008734:	bfbb      	ittet	lt
 8008736:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800873a:	9301      	strlt	r3, [sp, #4]
 800873c:	2300      	movge	r3, #0
 800873e:	2201      	movlt	r2, #1
 8008740:	bfac      	ite	ge
 8008742:	f8c8 3000 	strge.w	r3, [r8]
 8008746:	f8c8 2000 	strlt.w	r2, [r8]
 800874a:	4baf      	ldr	r3, [pc, #700]	; (8008a08 <_dtoa_r+0x320>)
 800874c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008750:	ea33 0308 	bics.w	r3, r3, r8
 8008754:	d114      	bne.n	8008780 <_dtoa_r+0x98>
 8008756:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008758:	f242 730f 	movw	r3, #9999	; 0x270f
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	9b00      	ldr	r3, [sp, #0]
 8008760:	b923      	cbnz	r3, 800876c <_dtoa_r+0x84>
 8008762:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008766:	2800      	cmp	r0, #0
 8008768:	f000 8542 	beq.w	80091f0 <_dtoa_r+0xb08>
 800876c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800876e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008a1c <_dtoa_r+0x334>
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 8544 	beq.w	8009200 <_dtoa_r+0xb18>
 8008778:	f10b 0303 	add.w	r3, fp, #3
 800877c:	f000 bd3e 	b.w	80091fc <_dtoa_r+0xb14>
 8008780:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008784:	2200      	movs	r2, #0
 8008786:	2300      	movs	r3, #0
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 f9ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8008790:	4681      	mov	r9, r0
 8008792:	b168      	cbz	r0, 80087b0 <_dtoa_r+0xc8>
 8008794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008796:	2301      	movs	r3, #1
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8524 	beq.w	80091ea <_dtoa_r+0xb02>
 80087a2:	4b9a      	ldr	r3, [pc, #616]	; (8008a0c <_dtoa_r+0x324>)
 80087a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	f000 bd28 	b.w	8009200 <_dtoa_r+0xb18>
 80087b0:	aa14      	add	r2, sp, #80	; 0x50
 80087b2:	a915      	add	r1, sp, #84	; 0x54
 80087b4:	ec47 6b10 	vmov	d0, r6, r7
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fffa 	bl	80097b2 <__d2b>
 80087be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80087c2:	9004      	str	r0, [sp, #16]
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	d07c      	beq.n	80088c2 <_dtoa_r+0x1da>
 80087c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80087d0:	46b2      	mov	sl, r6
 80087d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80087d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80087de:	2200      	movs	r2, #0
 80087e0:	4b8b      	ldr	r3, [pc, #556]	; (8008a10 <_dtoa_r+0x328>)
 80087e2:	4650      	mov	r0, sl
 80087e4:	4659      	mov	r1, fp
 80087e6:	f7f7 fd5f 	bl	80002a8 <__aeabi_dsub>
 80087ea:	a381      	add	r3, pc, #516	; (adr r3, 80089f0 <_dtoa_r+0x308>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 ff12 	bl	8000618 <__aeabi_dmul>
 80087f4:	a380      	add	r3, pc, #512	; (adr r3, 80089f8 <_dtoa_r+0x310>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd57 	bl	80002ac <__adddf3>
 80087fe:	4606      	mov	r6, r0
 8008800:	4628      	mov	r0, r5
 8008802:	460f      	mov	r7, r1
 8008804:	f7f7 fe9e 	bl	8000544 <__aeabi_i2d>
 8008808:	a37d      	add	r3, pc, #500	; (adr r3, 8008a00 <_dtoa_r+0x318>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f7f7 ff03 	bl	8000618 <__aeabi_dmul>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4630      	mov	r0, r6
 8008818:	4639      	mov	r1, r7
 800881a:	f7f7 fd47 	bl	80002ac <__adddf3>
 800881e:	4606      	mov	r6, r0
 8008820:	460f      	mov	r7, r1
 8008822:	f7f8 f9a9 	bl	8000b78 <__aeabi_d2iz>
 8008826:	2200      	movs	r2, #0
 8008828:	4682      	mov	sl, r0
 800882a:	2300      	movs	r3, #0
 800882c:	4630      	mov	r0, r6
 800882e:	4639      	mov	r1, r7
 8008830:	f7f8 f964 	bl	8000afc <__aeabi_dcmplt>
 8008834:	b148      	cbz	r0, 800884a <_dtoa_r+0x162>
 8008836:	4650      	mov	r0, sl
 8008838:	f7f7 fe84 	bl	8000544 <__aeabi_i2d>
 800883c:	4632      	mov	r2, r6
 800883e:	463b      	mov	r3, r7
 8008840:	f7f8 f952 	bl	8000ae8 <__aeabi_dcmpeq>
 8008844:	b908      	cbnz	r0, 800884a <_dtoa_r+0x162>
 8008846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800884a:	f1ba 0f16 	cmp.w	sl, #22
 800884e:	d859      	bhi.n	8008904 <_dtoa_r+0x21c>
 8008850:	4970      	ldr	r1, [pc, #448]	; (8008a14 <_dtoa_r+0x32c>)
 8008852:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800885a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800885e:	f7f8 f96b 	bl	8000b38 <__aeabi_dcmpgt>
 8008862:	2800      	cmp	r0, #0
 8008864:	d050      	beq.n	8008908 <_dtoa_r+0x220>
 8008866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800886a:	2300      	movs	r3, #0
 800886c:	930f      	str	r3, [sp, #60]	; 0x3c
 800886e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008870:	1b5d      	subs	r5, r3, r5
 8008872:	f1b5 0801 	subs.w	r8, r5, #1
 8008876:	bf49      	itett	mi
 8008878:	f1c5 0301 	rsbmi	r3, r5, #1
 800887c:	2300      	movpl	r3, #0
 800887e:	9305      	strmi	r3, [sp, #20]
 8008880:	f04f 0800 	movmi.w	r8, #0
 8008884:	bf58      	it	pl
 8008886:	9305      	strpl	r3, [sp, #20]
 8008888:	f1ba 0f00 	cmp.w	sl, #0
 800888c:	db3e      	blt.n	800890c <_dtoa_r+0x224>
 800888e:	2300      	movs	r3, #0
 8008890:	44d0      	add	r8, sl
 8008892:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008896:	9307      	str	r3, [sp, #28]
 8008898:	9b06      	ldr	r3, [sp, #24]
 800889a:	2b09      	cmp	r3, #9
 800889c:	f200 8090 	bhi.w	80089c0 <_dtoa_r+0x2d8>
 80088a0:	2b05      	cmp	r3, #5
 80088a2:	bfc4      	itt	gt
 80088a4:	3b04      	subgt	r3, #4
 80088a6:	9306      	strgt	r3, [sp, #24]
 80088a8:	9b06      	ldr	r3, [sp, #24]
 80088aa:	f1a3 0302 	sub.w	r3, r3, #2
 80088ae:	bfcc      	ite	gt
 80088b0:	2500      	movgt	r5, #0
 80088b2:	2501      	movle	r5, #1
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	f200 808f 	bhi.w	80089d8 <_dtoa_r+0x2f0>
 80088ba:	e8df f003 	tbb	[pc, r3]
 80088be:	7f7d      	.short	0x7f7d
 80088c0:	7131      	.short	0x7131
 80088c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80088c6:	441d      	add	r5, r3
 80088c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80088cc:	2820      	cmp	r0, #32
 80088ce:	dd13      	ble.n	80088f8 <_dtoa_r+0x210>
 80088d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80088d4:	9b00      	ldr	r3, [sp, #0]
 80088d6:	fa08 f800 	lsl.w	r8, r8, r0
 80088da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80088de:	fa23 f000 	lsr.w	r0, r3, r0
 80088e2:	ea48 0000 	orr.w	r0, r8, r0
 80088e6:	f7f7 fe1d 	bl	8000524 <__aeabi_ui2d>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4682      	mov	sl, r0
 80088ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80088f2:	3d01      	subs	r5, #1
 80088f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80088f6:	e772      	b.n	80087de <_dtoa_r+0xf6>
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	f1c0 0020 	rsb	r0, r0, #32
 80088fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008902:	e7f0      	b.n	80088e6 <_dtoa_r+0x1fe>
 8008904:	2301      	movs	r3, #1
 8008906:	e7b1      	b.n	800886c <_dtoa_r+0x184>
 8008908:	900f      	str	r0, [sp, #60]	; 0x3c
 800890a:	e7b0      	b.n	800886e <_dtoa_r+0x186>
 800890c:	9b05      	ldr	r3, [sp, #20]
 800890e:	eba3 030a 	sub.w	r3, r3, sl
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	f1ca 0300 	rsb	r3, sl, #0
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	2300      	movs	r3, #0
 800891c:	930e      	str	r3, [sp, #56]	; 0x38
 800891e:	e7bb      	b.n	8008898 <_dtoa_r+0x1b0>
 8008920:	2301      	movs	r3, #1
 8008922:	930a      	str	r3, [sp, #40]	; 0x28
 8008924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008926:	2b00      	cmp	r3, #0
 8008928:	dd59      	ble.n	80089de <_dtoa_r+0x2f6>
 800892a:	9302      	str	r3, [sp, #8]
 800892c:	4699      	mov	r9, r3
 800892e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008930:	2200      	movs	r2, #0
 8008932:	6072      	str	r2, [r6, #4]
 8008934:	2204      	movs	r2, #4
 8008936:	f102 0014 	add.w	r0, r2, #20
 800893a:	4298      	cmp	r0, r3
 800893c:	6871      	ldr	r1, [r6, #4]
 800893e:	d953      	bls.n	80089e8 <_dtoa_r+0x300>
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fcaa 	bl	800929a <_Balloc>
 8008946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008948:	6030      	str	r0, [r6, #0]
 800894a:	f1b9 0f0e 	cmp.w	r9, #14
 800894e:	f8d3 b000 	ldr.w	fp, [r3]
 8008952:	f200 80e6 	bhi.w	8008b22 <_dtoa_r+0x43a>
 8008956:	2d00      	cmp	r5, #0
 8008958:	f000 80e3 	beq.w	8008b22 <_dtoa_r+0x43a>
 800895c:	ed9d 7b00 	vldr	d7, [sp]
 8008960:	f1ba 0f00 	cmp.w	sl, #0
 8008964:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008968:	dd74      	ble.n	8008a54 <_dtoa_r+0x36c>
 800896a:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <_dtoa_r+0x32c>)
 800896c:	f00a 030f 	and.w	r3, sl, #15
 8008970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008974:	ed93 7b00 	vldr	d7, [r3]
 8008978:	ea4f 162a 	mov.w	r6, sl, asr #4
 800897c:	06f0      	lsls	r0, r6, #27
 800897e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008982:	d565      	bpl.n	8008a50 <_dtoa_r+0x368>
 8008984:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <_dtoa_r+0x330>)
 8008986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800898a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800898e:	f7f7 ff6d 	bl	800086c <__aeabi_ddiv>
 8008992:	e9cd 0100 	strd	r0, r1, [sp]
 8008996:	f006 060f 	and.w	r6, r6, #15
 800899a:	2503      	movs	r5, #3
 800899c:	4f1e      	ldr	r7, [pc, #120]	; (8008a18 <_dtoa_r+0x330>)
 800899e:	e04c      	b.n	8008a3a <_dtoa_r+0x352>
 80089a0:	2301      	movs	r3, #1
 80089a2:	930a      	str	r3, [sp, #40]	; 0x28
 80089a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a6:	4453      	add	r3, sl
 80089a8:	f103 0901 	add.w	r9, r3, #1
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	464b      	mov	r3, r9
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	bfb8      	it	lt
 80089b4:	2301      	movlt	r3, #1
 80089b6:	e7ba      	b.n	800892e <_dtoa_r+0x246>
 80089b8:	2300      	movs	r3, #0
 80089ba:	e7b2      	b.n	8008922 <_dtoa_r+0x23a>
 80089bc:	2300      	movs	r3, #0
 80089be:	e7f0      	b.n	80089a2 <_dtoa_r+0x2ba>
 80089c0:	2501      	movs	r5, #1
 80089c2:	2300      	movs	r3, #0
 80089c4:	9306      	str	r3, [sp, #24]
 80089c6:	950a      	str	r5, [sp, #40]	; 0x28
 80089c8:	f04f 33ff 	mov.w	r3, #4294967295
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	4699      	mov	r9, r3
 80089d0:	2200      	movs	r2, #0
 80089d2:	2312      	movs	r3, #18
 80089d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80089d6:	e7aa      	b.n	800892e <_dtoa_r+0x246>
 80089d8:	2301      	movs	r3, #1
 80089da:	930a      	str	r3, [sp, #40]	; 0x28
 80089dc:	e7f4      	b.n	80089c8 <_dtoa_r+0x2e0>
 80089de:	2301      	movs	r3, #1
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	4699      	mov	r9, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	e7f5      	b.n	80089d4 <_dtoa_r+0x2ec>
 80089e8:	3101      	adds	r1, #1
 80089ea:	6071      	str	r1, [r6, #4]
 80089ec:	0052      	lsls	r2, r2, #1
 80089ee:	e7a2      	b.n	8008936 <_dtoa_r+0x24e>
 80089f0:	636f4361 	.word	0x636f4361
 80089f4:	3fd287a7 	.word	0x3fd287a7
 80089f8:	8b60c8b3 	.word	0x8b60c8b3
 80089fc:	3fc68a28 	.word	0x3fc68a28
 8008a00:	509f79fb 	.word	0x509f79fb
 8008a04:	3fd34413 	.word	0x3fd34413
 8008a08:	7ff00000 	.word	0x7ff00000
 8008a0c:	08009f89 	.word	0x08009f89
 8008a10:	3ff80000 	.word	0x3ff80000
 8008a14:	08009fe8 	.word	0x08009fe8
 8008a18:	08009fc0 	.word	0x08009fc0
 8008a1c:	08009fb5 	.word	0x08009fb5
 8008a20:	07f1      	lsls	r1, r6, #31
 8008a22:	d508      	bpl.n	8008a36 <_dtoa_r+0x34e>
 8008a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2c:	f7f7 fdf4 	bl	8000618 <__aeabi_dmul>
 8008a30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a34:	3501      	adds	r5, #1
 8008a36:	1076      	asrs	r6, r6, #1
 8008a38:	3708      	adds	r7, #8
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	d1f0      	bne.n	8008a20 <_dtoa_r+0x338>
 8008a3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a46:	f7f7 ff11 	bl	800086c <__aeabi_ddiv>
 8008a4a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a4e:	e01a      	b.n	8008a86 <_dtoa_r+0x39e>
 8008a50:	2502      	movs	r5, #2
 8008a52:	e7a3      	b.n	800899c <_dtoa_r+0x2b4>
 8008a54:	f000 80a0 	beq.w	8008b98 <_dtoa_r+0x4b0>
 8008a58:	f1ca 0600 	rsb	r6, sl, #0
 8008a5c:	4b9f      	ldr	r3, [pc, #636]	; (8008cdc <_dtoa_r+0x5f4>)
 8008a5e:	4fa0      	ldr	r7, [pc, #640]	; (8008ce0 <_dtoa_r+0x5f8>)
 8008a60:	f006 020f 	and.w	r2, r6, #15
 8008a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a70:	f7f7 fdd2 	bl	8000618 <__aeabi_dmul>
 8008a74:	e9cd 0100 	strd	r0, r1, [sp]
 8008a78:	1136      	asrs	r6, r6, #4
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2502      	movs	r5, #2
 8008a7e:	2e00      	cmp	r6, #0
 8008a80:	d17f      	bne.n	8008b82 <_dtoa_r+0x49a>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e1      	bne.n	8008a4a <_dtoa_r+0x362>
 8008a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 8087 	beq.w	8008b9c <_dtoa_r+0x4b4>
 8008a8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a92:	2200      	movs	r2, #0
 8008a94:	4b93      	ldr	r3, [pc, #588]	; (8008ce4 <_dtoa_r+0x5fc>)
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f8 f82f 	bl	8000afc <__aeabi_dcmplt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d07c      	beq.n	8008b9c <_dtoa_r+0x4b4>
 8008aa2:	f1b9 0f00 	cmp.w	r9, #0
 8008aa6:	d079      	beq.n	8008b9c <_dtoa_r+0x4b4>
 8008aa8:	9b02      	ldr	r3, [sp, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dd35      	ble.n	8008b1a <_dtoa_r+0x432>
 8008aae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ab2:	9308      	str	r3, [sp, #32]
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4b8b      	ldr	r3, [pc, #556]	; (8008ce8 <_dtoa_r+0x600>)
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7f7 fdac 	bl	8000618 <__aeabi_dmul>
 8008ac0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ac4:	9f02      	ldr	r7, [sp, #8]
 8008ac6:	3501      	adds	r5, #1
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f7f7 fd3b 	bl	8000544 <__aeabi_i2d>
 8008ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ad2:	f7f7 fda1 	bl	8000618 <__aeabi_dmul>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4b84      	ldr	r3, [pc, #528]	; (8008cec <_dtoa_r+0x604>)
 8008ada:	f7f7 fbe7 	bl	80002ac <__adddf3>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008ae4:	2f00      	cmp	r7, #0
 8008ae6:	d15d      	bne.n	8008ba4 <_dtoa_r+0x4bc>
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4b81      	ldr	r3, [pc, #516]	; (8008cf0 <_dtoa_r+0x608>)
 8008aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008af0:	f7f7 fbda 	bl	80002a8 <__aeabi_dsub>
 8008af4:	462a      	mov	r2, r5
 8008af6:	4633      	mov	r3, r6
 8008af8:	e9cd 0100 	strd	r0, r1, [sp]
 8008afc:	f7f8 f81c 	bl	8000b38 <__aeabi_dcmpgt>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	f040 8288 	bne.w	8009016 <_dtoa_r+0x92e>
 8008b06:	462a      	mov	r2, r5
 8008b08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b10:	f7f7 fff4 	bl	8000afc <__aeabi_dcmplt>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f040 827c 	bne.w	8009012 <_dtoa_r+0x92a>
 8008b1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b1e:	e9cd 2300 	strd	r2, r3, [sp]
 8008b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f2c0 8150 	blt.w	8008dca <_dtoa_r+0x6e2>
 8008b2a:	f1ba 0f0e 	cmp.w	sl, #14
 8008b2e:	f300 814c 	bgt.w	8008dca <_dtoa_r+0x6e2>
 8008b32:	4b6a      	ldr	r3, [pc, #424]	; (8008cdc <_dtoa_r+0x5f4>)
 8008b34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b38:	ed93 7b00 	vldr	d7, [r3]
 8008b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b44:	f280 80d8 	bge.w	8008cf8 <_dtoa_r+0x610>
 8008b48:	f1b9 0f00 	cmp.w	r9, #0
 8008b4c:	f300 80d4 	bgt.w	8008cf8 <_dtoa_r+0x610>
 8008b50:	f040 825e 	bne.w	8009010 <_dtoa_r+0x928>
 8008b54:	2200      	movs	r2, #0
 8008b56:	4b66      	ldr	r3, [pc, #408]	; (8008cf0 <_dtoa_r+0x608>)
 8008b58:	ec51 0b17 	vmov	r0, r1, d7
 8008b5c:	f7f7 fd5c 	bl	8000618 <__aeabi_dmul>
 8008b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b64:	f7f7 ffde 	bl	8000b24 <__aeabi_dcmpge>
 8008b68:	464f      	mov	r7, r9
 8008b6a:	464e      	mov	r6, r9
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f040 8234 	bne.w	8008fda <_dtoa_r+0x8f2>
 8008b72:	2331      	movs	r3, #49	; 0x31
 8008b74:	f10b 0501 	add.w	r5, fp, #1
 8008b78:	f88b 3000 	strb.w	r3, [fp]
 8008b7c:	f10a 0a01 	add.w	sl, sl, #1
 8008b80:	e22f      	b.n	8008fe2 <_dtoa_r+0x8fa>
 8008b82:	07f2      	lsls	r2, r6, #31
 8008b84:	d505      	bpl.n	8008b92 <_dtoa_r+0x4aa>
 8008b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8a:	f7f7 fd45 	bl	8000618 <__aeabi_dmul>
 8008b8e:	3501      	adds	r5, #1
 8008b90:	2301      	movs	r3, #1
 8008b92:	1076      	asrs	r6, r6, #1
 8008b94:	3708      	adds	r7, #8
 8008b96:	e772      	b.n	8008a7e <_dtoa_r+0x396>
 8008b98:	2502      	movs	r5, #2
 8008b9a:	e774      	b.n	8008a86 <_dtoa_r+0x39e>
 8008b9c:	f8cd a020 	str.w	sl, [sp, #32]
 8008ba0:	464f      	mov	r7, r9
 8008ba2:	e791      	b.n	8008ac8 <_dtoa_r+0x3e0>
 8008ba4:	4b4d      	ldr	r3, [pc, #308]	; (8008cdc <_dtoa_r+0x5f4>)
 8008ba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008baa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d047      	beq.n	8008c44 <_dtoa_r+0x55c>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	2000      	movs	r0, #0
 8008bba:	494e      	ldr	r1, [pc, #312]	; (8008cf4 <_dtoa_r+0x60c>)
 8008bbc:	f7f7 fe56 	bl	800086c <__aeabi_ddiv>
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	4633      	mov	r3, r6
 8008bc4:	f7f7 fb70 	bl	80002a8 <__aeabi_dsub>
 8008bc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bcc:	465d      	mov	r5, fp
 8008bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bd2:	f7f7 ffd1 	bl	8000b78 <__aeabi_d2iz>
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	f7f7 fcb4 	bl	8000544 <__aeabi_i2d>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be4:	f7f7 fb60 	bl	80002a8 <__aeabi_dsub>
 8008be8:	3630      	adds	r6, #48	; 0x30
 8008bea:	f805 6b01 	strb.w	r6, [r5], #1
 8008bee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008bf2:	e9cd 0100 	strd	r0, r1, [sp]
 8008bf6:	f7f7 ff81 	bl	8000afc <__aeabi_dcmplt>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d163      	bne.n	8008cc6 <_dtoa_r+0x5de>
 8008bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c02:	2000      	movs	r0, #0
 8008c04:	4937      	ldr	r1, [pc, #220]	; (8008ce4 <_dtoa_r+0x5fc>)
 8008c06:	f7f7 fb4f 	bl	80002a8 <__aeabi_dsub>
 8008c0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c0e:	f7f7 ff75 	bl	8000afc <__aeabi_dcmplt>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	f040 80b7 	bne.w	8008d86 <_dtoa_r+0x69e>
 8008c18:	eba5 030b 	sub.w	r3, r5, fp
 8008c1c:	429f      	cmp	r7, r3
 8008c1e:	f77f af7c 	ble.w	8008b1a <_dtoa_r+0x432>
 8008c22:	2200      	movs	r2, #0
 8008c24:	4b30      	ldr	r3, [pc, #192]	; (8008ce8 <_dtoa_r+0x600>)
 8008c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c2a:	f7f7 fcf5 	bl	8000618 <__aeabi_dmul>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c34:	4b2c      	ldr	r3, [pc, #176]	; (8008ce8 <_dtoa_r+0x600>)
 8008c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c3a:	f7f7 fced 	bl	8000618 <__aeabi_dmul>
 8008c3e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c42:	e7c4      	b.n	8008bce <_dtoa_r+0x4e6>
 8008c44:	462a      	mov	r2, r5
 8008c46:	4633      	mov	r3, r6
 8008c48:	f7f7 fce6 	bl	8000618 <__aeabi_dmul>
 8008c4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c50:	eb0b 0507 	add.w	r5, fp, r7
 8008c54:	465e      	mov	r6, fp
 8008c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c5a:	f7f7 ff8d 	bl	8000b78 <__aeabi_d2iz>
 8008c5e:	4607      	mov	r7, r0
 8008c60:	f7f7 fc70 	bl	8000544 <__aeabi_i2d>
 8008c64:	3730      	adds	r7, #48	; 0x30
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c6e:	f7f7 fb1b 	bl	80002a8 <__aeabi_dsub>
 8008c72:	f806 7b01 	strb.w	r7, [r6], #1
 8008c76:	42ae      	cmp	r6, r5
 8008c78:	e9cd 0100 	strd	r0, r1, [sp]
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	d126      	bne.n	8008cd0 <_dtoa_r+0x5e8>
 8008c82:	4b1c      	ldr	r3, [pc, #112]	; (8008cf4 <_dtoa_r+0x60c>)
 8008c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c88:	f7f7 fb10 	bl	80002ac <__adddf3>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c94:	f7f7 ff50 	bl	8000b38 <__aeabi_dcmpgt>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d174      	bne.n	8008d86 <_dtoa_r+0x69e>
 8008c9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	4914      	ldr	r1, [pc, #80]	; (8008cf4 <_dtoa_r+0x60c>)
 8008ca4:	f7f7 fb00 	bl	80002a8 <__aeabi_dsub>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cb0:	f7f7 ff24 	bl	8000afc <__aeabi_dcmplt>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f43f af30 	beq.w	8008b1a <_dtoa_r+0x432>
 8008cba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cbe:	2b30      	cmp	r3, #48	; 0x30
 8008cc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008cc4:	d002      	beq.n	8008ccc <_dtoa_r+0x5e4>
 8008cc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008cca:	e04a      	b.n	8008d62 <_dtoa_r+0x67a>
 8008ccc:	4615      	mov	r5, r2
 8008cce:	e7f4      	b.n	8008cba <_dtoa_r+0x5d2>
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <_dtoa_r+0x600>)
 8008cd2:	f7f7 fca1 	bl	8000618 <__aeabi_dmul>
 8008cd6:	e9cd 0100 	strd	r0, r1, [sp]
 8008cda:	e7bc      	b.n	8008c56 <_dtoa_r+0x56e>
 8008cdc:	08009fe8 	.word	0x08009fe8
 8008ce0:	08009fc0 	.word	0x08009fc0
 8008ce4:	3ff00000 	.word	0x3ff00000
 8008ce8:	40240000 	.word	0x40240000
 8008cec:	401c0000 	.word	0x401c0000
 8008cf0:	40140000 	.word	0x40140000
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008cfc:	465d      	mov	r5, fp
 8008cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d02:	4630      	mov	r0, r6
 8008d04:	4639      	mov	r1, r7
 8008d06:	f7f7 fdb1 	bl	800086c <__aeabi_ddiv>
 8008d0a:	f7f7 ff35 	bl	8000b78 <__aeabi_d2iz>
 8008d0e:	4680      	mov	r8, r0
 8008d10:	f7f7 fc18 	bl	8000544 <__aeabi_i2d>
 8008d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d18:	f7f7 fc7e 	bl	8000618 <__aeabi_dmul>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008d28:	f7f7 fabe 	bl	80002a8 <__aeabi_dsub>
 8008d2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008d30:	eba5 060b 	sub.w	r6, r5, fp
 8008d34:	45b1      	cmp	r9, r6
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	d139      	bne.n	8008db0 <_dtoa_r+0x6c8>
 8008d3c:	f7f7 fab6 	bl	80002ac <__adddf3>
 8008d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d44:	4606      	mov	r6, r0
 8008d46:	460f      	mov	r7, r1
 8008d48:	f7f7 fef6 	bl	8000b38 <__aeabi_dcmpgt>
 8008d4c:	b9c8      	cbnz	r0, 8008d82 <_dtoa_r+0x69a>
 8008d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d52:	4630      	mov	r0, r6
 8008d54:	4639      	mov	r1, r7
 8008d56:	f7f7 fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d5a:	b110      	cbz	r0, 8008d62 <_dtoa_r+0x67a>
 8008d5c:	f018 0f01 	tst.w	r8, #1
 8008d60:	d10f      	bne.n	8008d82 <_dtoa_r+0x69a>
 8008d62:	9904      	ldr	r1, [sp, #16]
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 facc 	bl	8009302 <_Bfree>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d6e:	702b      	strb	r3, [r5, #0]
 8008d70:	f10a 0301 	add.w	r3, sl, #1
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 8241 	beq.w	8009200 <_dtoa_r+0xb18>
 8008d7e:	601d      	str	r5, [r3, #0]
 8008d80:	e23e      	b.n	8009200 <_dtoa_r+0xb18>
 8008d82:	f8cd a020 	str.w	sl, [sp, #32]
 8008d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d8a:	2a39      	cmp	r2, #57	; 0x39
 8008d8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008d90:	d108      	bne.n	8008da4 <_dtoa_r+0x6bc>
 8008d92:	459b      	cmp	fp, r3
 8008d94:	d10a      	bne.n	8008dac <_dtoa_r+0x6c4>
 8008d96:	9b08      	ldr	r3, [sp, #32]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9308      	str	r3, [sp, #32]
 8008d9c:	2330      	movs	r3, #48	; 0x30
 8008d9e:	f88b 3000 	strb.w	r3, [fp]
 8008da2:	465b      	mov	r3, fp
 8008da4:	781a      	ldrb	r2, [r3, #0]
 8008da6:	3201      	adds	r2, #1
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	e78c      	b.n	8008cc6 <_dtoa_r+0x5de>
 8008dac:	461d      	mov	r5, r3
 8008dae:	e7ea      	b.n	8008d86 <_dtoa_r+0x69e>
 8008db0:	2200      	movs	r2, #0
 8008db2:	4b9b      	ldr	r3, [pc, #620]	; (8009020 <_dtoa_r+0x938>)
 8008db4:	f7f7 fc30 	bl	8000618 <__aeabi_dmul>
 8008db8:	2200      	movs	r2, #0
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	460f      	mov	r7, r1
 8008dc0:	f7f7 fe92 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d09a      	beq.n	8008cfe <_dtoa_r+0x616>
 8008dc8:	e7cb      	b.n	8008d62 <_dtoa_r+0x67a>
 8008dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	f000 808b 	beq.w	8008ee8 <_dtoa_r+0x800>
 8008dd2:	9a06      	ldr	r2, [sp, #24]
 8008dd4:	2a01      	cmp	r2, #1
 8008dd6:	dc6e      	bgt.n	8008eb6 <_dtoa_r+0x7ce>
 8008dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dda:	2a00      	cmp	r2, #0
 8008ddc:	d067      	beq.n	8008eae <_dtoa_r+0x7c6>
 8008dde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008de2:	9f07      	ldr	r7, [sp, #28]
 8008de4:	9d05      	ldr	r5, [sp, #20]
 8008de6:	9a05      	ldr	r2, [sp, #20]
 8008de8:	2101      	movs	r1, #1
 8008dea:	441a      	add	r2, r3
 8008dec:	4620      	mov	r0, r4
 8008dee:	9205      	str	r2, [sp, #20]
 8008df0:	4498      	add	r8, r3
 8008df2:	f000 fb26 	bl	8009442 <__i2b>
 8008df6:	4606      	mov	r6, r0
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	dd0c      	ble.n	8008e16 <_dtoa_r+0x72e>
 8008dfc:	f1b8 0f00 	cmp.w	r8, #0
 8008e00:	dd09      	ble.n	8008e16 <_dtoa_r+0x72e>
 8008e02:	4545      	cmp	r5, r8
 8008e04:	9a05      	ldr	r2, [sp, #20]
 8008e06:	462b      	mov	r3, r5
 8008e08:	bfa8      	it	ge
 8008e0a:	4643      	movge	r3, r8
 8008e0c:	1ad2      	subs	r2, r2, r3
 8008e0e:	9205      	str	r2, [sp, #20]
 8008e10:	1aed      	subs	r5, r5, r3
 8008e12:	eba8 0803 	sub.w	r8, r8, r3
 8008e16:	9b07      	ldr	r3, [sp, #28]
 8008e18:	b1eb      	cbz	r3, 8008e56 <_dtoa_r+0x76e>
 8008e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d067      	beq.n	8008ef0 <_dtoa_r+0x808>
 8008e20:	b18f      	cbz	r7, 8008e46 <_dtoa_r+0x75e>
 8008e22:	4631      	mov	r1, r6
 8008e24:	463a      	mov	r2, r7
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fbaa 	bl	8009580 <__pow5mult>
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	4601      	mov	r1, r0
 8008e30:	4606      	mov	r6, r0
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fb0e 	bl	8009454 <__multiply>
 8008e38:	9904      	ldr	r1, [sp, #16]
 8008e3a:	9008      	str	r0, [sp, #32]
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 fa60 	bl	8009302 <_Bfree>
 8008e42:	9b08      	ldr	r3, [sp, #32]
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	9b07      	ldr	r3, [sp, #28]
 8008e48:	1bda      	subs	r2, r3, r7
 8008e4a:	d004      	beq.n	8008e56 <_dtoa_r+0x76e>
 8008e4c:	9904      	ldr	r1, [sp, #16]
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 fb96 	bl	8009580 <__pow5mult>
 8008e54:	9004      	str	r0, [sp, #16]
 8008e56:	2101      	movs	r1, #1
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 faf2 	bl	8009442 <__i2b>
 8008e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e60:	4607      	mov	r7, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 81d0 	beq.w	8009208 <_dtoa_r+0xb20>
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4601      	mov	r1, r0
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fb87 	bl	8009580 <__pow5mult>
 8008e72:	9b06      	ldr	r3, [sp, #24]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	4607      	mov	r7, r0
 8008e78:	dc40      	bgt.n	8008efc <_dtoa_r+0x814>
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d139      	bne.n	8008ef4 <_dtoa_r+0x80c>
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d136      	bne.n	8008ef8 <_dtoa_r+0x810>
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e90:	0d1b      	lsrs	r3, r3, #20
 8008e92:	051b      	lsls	r3, r3, #20
 8008e94:	b12b      	cbz	r3, 8008ea2 <_dtoa_r+0x7ba>
 8008e96:	9b05      	ldr	r3, [sp, #20]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	9305      	str	r3, [sp, #20]
 8008e9c:	f108 0801 	add.w	r8, r8, #1
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d12a      	bne.n	8008f00 <_dtoa_r+0x818>
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e030      	b.n	8008f10 <_dtoa_r+0x828>
 8008eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008eb4:	e795      	b.n	8008de2 <_dtoa_r+0x6fa>
 8008eb6:	9b07      	ldr	r3, [sp, #28]
 8008eb8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008ebc:	42bb      	cmp	r3, r7
 8008ebe:	bfbf      	itttt	lt
 8008ec0:	9b07      	ldrlt	r3, [sp, #28]
 8008ec2:	9707      	strlt	r7, [sp, #28]
 8008ec4:	1afa      	sublt	r2, r7, r3
 8008ec6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008ec8:	bfbb      	ittet	lt
 8008eca:	189b      	addlt	r3, r3, r2
 8008ecc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008ece:	1bdf      	subge	r7, r3, r7
 8008ed0:	2700      	movlt	r7, #0
 8008ed2:	f1b9 0f00 	cmp.w	r9, #0
 8008ed6:	bfb5      	itete	lt
 8008ed8:	9b05      	ldrlt	r3, [sp, #20]
 8008eda:	9d05      	ldrge	r5, [sp, #20]
 8008edc:	eba3 0509 	sublt.w	r5, r3, r9
 8008ee0:	464b      	movge	r3, r9
 8008ee2:	bfb8      	it	lt
 8008ee4:	2300      	movlt	r3, #0
 8008ee6:	e77e      	b.n	8008de6 <_dtoa_r+0x6fe>
 8008ee8:	9f07      	ldr	r7, [sp, #28]
 8008eea:	9d05      	ldr	r5, [sp, #20]
 8008eec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008eee:	e783      	b.n	8008df8 <_dtoa_r+0x710>
 8008ef0:	9a07      	ldr	r2, [sp, #28]
 8008ef2:	e7ab      	b.n	8008e4c <_dtoa_r+0x764>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e7d4      	b.n	8008ea2 <_dtoa_r+0x7ba>
 8008ef8:	9b00      	ldr	r3, [sp, #0]
 8008efa:	e7d2      	b.n	8008ea2 <_dtoa_r+0x7ba>
 8008efc:	2300      	movs	r3, #0
 8008efe:	9307      	str	r3, [sp, #28]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008f06:	6918      	ldr	r0, [r3, #16]
 8008f08:	f000 fa4d 	bl	80093a6 <__hi0bits>
 8008f0c:	f1c0 0020 	rsb	r0, r0, #32
 8008f10:	4440      	add	r0, r8
 8008f12:	f010 001f 	ands.w	r0, r0, #31
 8008f16:	d047      	beq.n	8008fa8 <_dtoa_r+0x8c0>
 8008f18:	f1c0 0320 	rsb	r3, r0, #32
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	dd3b      	ble.n	8008f98 <_dtoa_r+0x8b0>
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	f1c0 001c 	rsb	r0, r0, #28
 8008f26:	4403      	add	r3, r0
 8008f28:	9305      	str	r3, [sp, #20]
 8008f2a:	4405      	add	r5, r0
 8008f2c:	4480      	add	r8, r0
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dd05      	ble.n	8008f40 <_dtoa_r+0x858>
 8008f34:	461a      	mov	r2, r3
 8008f36:	9904      	ldr	r1, [sp, #16]
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fb6f 	bl	800961c <__lshift>
 8008f3e:	9004      	str	r0, [sp, #16]
 8008f40:	f1b8 0f00 	cmp.w	r8, #0
 8008f44:	dd05      	ble.n	8008f52 <_dtoa_r+0x86a>
 8008f46:	4639      	mov	r1, r7
 8008f48:	4642      	mov	r2, r8
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fb66 	bl	800961c <__lshift>
 8008f50:	4607      	mov	r7, r0
 8008f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f54:	b353      	cbz	r3, 8008fac <_dtoa_r+0x8c4>
 8008f56:	4639      	mov	r1, r7
 8008f58:	9804      	ldr	r0, [sp, #16]
 8008f5a:	f000 fbb3 	bl	80096c4 <__mcmp>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	da24      	bge.n	8008fac <_dtoa_r+0x8c4>
 8008f62:	2300      	movs	r3, #0
 8008f64:	220a      	movs	r2, #10
 8008f66:	9904      	ldr	r1, [sp, #16]
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 f9e1 	bl	8009330 <__multadd>
 8008f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f70:	9004      	str	r0, [sp, #16]
 8008f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 814d 	beq.w	8009216 <_dtoa_r+0xb2e>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4631      	mov	r1, r6
 8008f80:	220a      	movs	r2, #10
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 f9d4 	bl	8009330 <__multadd>
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	dc4f      	bgt.n	8009030 <_dtoa_r+0x948>
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	dd4c      	ble.n	8009030 <_dtoa_r+0x948>
 8008f96:	e011      	b.n	8008fbc <_dtoa_r+0x8d4>
 8008f98:	d0c9      	beq.n	8008f2e <_dtoa_r+0x846>
 8008f9a:	9a05      	ldr	r2, [sp, #20]
 8008f9c:	331c      	adds	r3, #28
 8008f9e:	441a      	add	r2, r3
 8008fa0:	9205      	str	r2, [sp, #20]
 8008fa2:	441d      	add	r5, r3
 8008fa4:	4498      	add	r8, r3
 8008fa6:	e7c2      	b.n	8008f2e <_dtoa_r+0x846>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	e7f6      	b.n	8008f9a <_dtoa_r+0x8b2>
 8008fac:	f1b9 0f00 	cmp.w	r9, #0
 8008fb0:	dc38      	bgt.n	8009024 <_dtoa_r+0x93c>
 8008fb2:	9b06      	ldr	r3, [sp, #24]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	dd35      	ble.n	8009024 <_dtoa_r+0x93c>
 8008fb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fbc:	9b02      	ldr	r3, [sp, #8]
 8008fbe:	b963      	cbnz	r3, 8008fda <_dtoa_r+0x8f2>
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	2205      	movs	r2, #5
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 f9b3 	bl	8009330 <__multadd>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4607      	mov	r7, r0
 8008fce:	9804      	ldr	r0, [sp, #16]
 8008fd0:	f000 fb78 	bl	80096c4 <__mcmp>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f73f adcc 	bgt.w	8008b72 <_dtoa_r+0x48a>
 8008fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fdc:	465d      	mov	r5, fp
 8008fde:	ea6f 0a03 	mvn.w	sl, r3
 8008fe2:	f04f 0900 	mov.w	r9, #0
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 f98a 	bl	8009302 <_Bfree>
 8008fee:	2e00      	cmp	r6, #0
 8008ff0:	f43f aeb7 	beq.w	8008d62 <_dtoa_r+0x67a>
 8008ff4:	f1b9 0f00 	cmp.w	r9, #0
 8008ff8:	d005      	beq.n	8009006 <_dtoa_r+0x91e>
 8008ffa:	45b1      	cmp	r9, r6
 8008ffc:	d003      	beq.n	8009006 <_dtoa_r+0x91e>
 8008ffe:	4649      	mov	r1, r9
 8009000:	4620      	mov	r0, r4
 8009002:	f000 f97e 	bl	8009302 <_Bfree>
 8009006:	4631      	mov	r1, r6
 8009008:	4620      	mov	r0, r4
 800900a:	f000 f97a 	bl	8009302 <_Bfree>
 800900e:	e6a8      	b.n	8008d62 <_dtoa_r+0x67a>
 8009010:	2700      	movs	r7, #0
 8009012:	463e      	mov	r6, r7
 8009014:	e7e1      	b.n	8008fda <_dtoa_r+0x8f2>
 8009016:	f8dd a020 	ldr.w	sl, [sp, #32]
 800901a:	463e      	mov	r6, r7
 800901c:	e5a9      	b.n	8008b72 <_dtoa_r+0x48a>
 800901e:	bf00      	nop
 8009020:	40240000 	.word	0x40240000
 8009024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009026:	f8cd 9008 	str.w	r9, [sp, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80fa 	beq.w	8009224 <_dtoa_r+0xb3c>
 8009030:	2d00      	cmp	r5, #0
 8009032:	dd05      	ble.n	8009040 <_dtoa_r+0x958>
 8009034:	4631      	mov	r1, r6
 8009036:	462a      	mov	r2, r5
 8009038:	4620      	mov	r0, r4
 800903a:	f000 faef 	bl	800961c <__lshift>
 800903e:	4606      	mov	r6, r0
 8009040:	9b07      	ldr	r3, [sp, #28]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d04c      	beq.n	80090e0 <_dtoa_r+0x9f8>
 8009046:	6871      	ldr	r1, [r6, #4]
 8009048:	4620      	mov	r0, r4
 800904a:	f000 f926 	bl	800929a <_Balloc>
 800904e:	6932      	ldr	r2, [r6, #16]
 8009050:	3202      	adds	r2, #2
 8009052:	4605      	mov	r5, r0
 8009054:	0092      	lsls	r2, r2, #2
 8009056:	f106 010c 	add.w	r1, r6, #12
 800905a:	300c      	adds	r0, #12
 800905c:	f000 f912 	bl	8009284 <memcpy>
 8009060:	2201      	movs	r2, #1
 8009062:	4629      	mov	r1, r5
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fad9 	bl	800961c <__lshift>
 800906a:	9b00      	ldr	r3, [sp, #0]
 800906c:	f8cd b014 	str.w	fp, [sp, #20]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	46b1      	mov	r9, r6
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	4606      	mov	r6, r0
 800907a:	4639      	mov	r1, r7
 800907c:	9804      	ldr	r0, [sp, #16]
 800907e:	f7ff faa7 	bl	80085d0 <quorem>
 8009082:	4649      	mov	r1, r9
 8009084:	4605      	mov	r5, r0
 8009086:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800908a:	9804      	ldr	r0, [sp, #16]
 800908c:	f000 fb1a 	bl	80096c4 <__mcmp>
 8009090:	4632      	mov	r2, r6
 8009092:	9000      	str	r0, [sp, #0]
 8009094:	4639      	mov	r1, r7
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fb2e 	bl	80096f8 <__mdiff>
 800909c:	68c3      	ldr	r3, [r0, #12]
 800909e:	4602      	mov	r2, r0
 80090a0:	bb03      	cbnz	r3, 80090e4 <_dtoa_r+0x9fc>
 80090a2:	4601      	mov	r1, r0
 80090a4:	9008      	str	r0, [sp, #32]
 80090a6:	9804      	ldr	r0, [sp, #16]
 80090a8:	f000 fb0c 	bl	80096c4 <__mcmp>
 80090ac:	9a08      	ldr	r2, [sp, #32]
 80090ae:	4603      	mov	r3, r0
 80090b0:	4611      	mov	r1, r2
 80090b2:	4620      	mov	r0, r4
 80090b4:	9308      	str	r3, [sp, #32]
 80090b6:	f000 f924 	bl	8009302 <_Bfree>
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	b9a3      	cbnz	r3, 80090e8 <_dtoa_r+0xa00>
 80090be:	9a06      	ldr	r2, [sp, #24]
 80090c0:	b992      	cbnz	r2, 80090e8 <_dtoa_r+0xa00>
 80090c2:	9a07      	ldr	r2, [sp, #28]
 80090c4:	b982      	cbnz	r2, 80090e8 <_dtoa_r+0xa00>
 80090c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80090ca:	d029      	beq.n	8009120 <_dtoa_r+0xa38>
 80090cc:	9b00      	ldr	r3, [sp, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd01      	ble.n	80090d6 <_dtoa_r+0x9ee>
 80090d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	1c5d      	adds	r5, r3, #1
 80090da:	f883 8000 	strb.w	r8, [r3]
 80090de:	e782      	b.n	8008fe6 <_dtoa_r+0x8fe>
 80090e0:	4630      	mov	r0, r6
 80090e2:	e7c2      	b.n	800906a <_dtoa_r+0x982>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e7e3      	b.n	80090b0 <_dtoa_r+0x9c8>
 80090e8:	9a00      	ldr	r2, [sp, #0]
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	db04      	blt.n	80090f8 <_dtoa_r+0xa10>
 80090ee:	d125      	bne.n	800913c <_dtoa_r+0xa54>
 80090f0:	9a06      	ldr	r2, [sp, #24]
 80090f2:	bb1a      	cbnz	r2, 800913c <_dtoa_r+0xa54>
 80090f4:	9a07      	ldr	r2, [sp, #28]
 80090f6:	bb0a      	cbnz	r2, 800913c <_dtoa_r+0xa54>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	ddec      	ble.n	80090d6 <_dtoa_r+0x9ee>
 80090fc:	2201      	movs	r2, #1
 80090fe:	9904      	ldr	r1, [sp, #16]
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fa8b 	bl	800961c <__lshift>
 8009106:	4639      	mov	r1, r7
 8009108:	9004      	str	r0, [sp, #16]
 800910a:	f000 fadb 	bl	80096c4 <__mcmp>
 800910e:	2800      	cmp	r0, #0
 8009110:	dc03      	bgt.n	800911a <_dtoa_r+0xa32>
 8009112:	d1e0      	bne.n	80090d6 <_dtoa_r+0x9ee>
 8009114:	f018 0f01 	tst.w	r8, #1
 8009118:	d0dd      	beq.n	80090d6 <_dtoa_r+0x9ee>
 800911a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800911e:	d1d8      	bne.n	80090d2 <_dtoa_r+0x9ea>
 8009120:	9b05      	ldr	r3, [sp, #20]
 8009122:	9a05      	ldr	r2, [sp, #20]
 8009124:	1c5d      	adds	r5, r3, #1
 8009126:	2339      	movs	r3, #57	; 0x39
 8009128:	7013      	strb	r3, [r2, #0]
 800912a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800912e:	2b39      	cmp	r3, #57	; 0x39
 8009130:	f105 32ff 	add.w	r2, r5, #4294967295
 8009134:	d04f      	beq.n	80091d6 <_dtoa_r+0xaee>
 8009136:	3301      	adds	r3, #1
 8009138:	7013      	strb	r3, [r2, #0]
 800913a:	e754      	b.n	8008fe6 <_dtoa_r+0x8fe>
 800913c:	9a05      	ldr	r2, [sp, #20]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f102 0501 	add.w	r5, r2, #1
 8009144:	dd06      	ble.n	8009154 <_dtoa_r+0xa6c>
 8009146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800914a:	d0e9      	beq.n	8009120 <_dtoa_r+0xa38>
 800914c:	f108 0801 	add.w	r8, r8, #1
 8009150:	9b05      	ldr	r3, [sp, #20]
 8009152:	e7c2      	b.n	80090da <_dtoa_r+0x9f2>
 8009154:	9a02      	ldr	r2, [sp, #8]
 8009156:	f805 8c01 	strb.w	r8, [r5, #-1]
 800915a:	eba5 030b 	sub.w	r3, r5, fp
 800915e:	4293      	cmp	r3, r2
 8009160:	d021      	beq.n	80091a6 <_dtoa_r+0xabe>
 8009162:	2300      	movs	r3, #0
 8009164:	220a      	movs	r2, #10
 8009166:	9904      	ldr	r1, [sp, #16]
 8009168:	4620      	mov	r0, r4
 800916a:	f000 f8e1 	bl	8009330 <__multadd>
 800916e:	45b1      	cmp	r9, r6
 8009170:	9004      	str	r0, [sp, #16]
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	f04f 020a 	mov.w	r2, #10
 800917a:	4649      	mov	r1, r9
 800917c:	4620      	mov	r0, r4
 800917e:	d105      	bne.n	800918c <_dtoa_r+0xaa4>
 8009180:	f000 f8d6 	bl	8009330 <__multadd>
 8009184:	4681      	mov	r9, r0
 8009186:	4606      	mov	r6, r0
 8009188:	9505      	str	r5, [sp, #20]
 800918a:	e776      	b.n	800907a <_dtoa_r+0x992>
 800918c:	f000 f8d0 	bl	8009330 <__multadd>
 8009190:	4631      	mov	r1, r6
 8009192:	4681      	mov	r9, r0
 8009194:	2300      	movs	r3, #0
 8009196:	220a      	movs	r2, #10
 8009198:	4620      	mov	r0, r4
 800919a:	f000 f8c9 	bl	8009330 <__multadd>
 800919e:	4606      	mov	r6, r0
 80091a0:	e7f2      	b.n	8009188 <_dtoa_r+0xaa0>
 80091a2:	f04f 0900 	mov.w	r9, #0
 80091a6:	2201      	movs	r2, #1
 80091a8:	9904      	ldr	r1, [sp, #16]
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fa36 	bl	800961c <__lshift>
 80091b0:	4639      	mov	r1, r7
 80091b2:	9004      	str	r0, [sp, #16]
 80091b4:	f000 fa86 	bl	80096c4 <__mcmp>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	dcb6      	bgt.n	800912a <_dtoa_r+0xa42>
 80091bc:	d102      	bne.n	80091c4 <_dtoa_r+0xadc>
 80091be:	f018 0f01 	tst.w	r8, #1
 80091c2:	d1b2      	bne.n	800912a <_dtoa_r+0xa42>
 80091c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091c8:	2b30      	cmp	r3, #48	; 0x30
 80091ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80091ce:	f47f af0a 	bne.w	8008fe6 <_dtoa_r+0x8fe>
 80091d2:	4615      	mov	r5, r2
 80091d4:	e7f6      	b.n	80091c4 <_dtoa_r+0xadc>
 80091d6:	4593      	cmp	fp, r2
 80091d8:	d105      	bne.n	80091e6 <_dtoa_r+0xafe>
 80091da:	2331      	movs	r3, #49	; 0x31
 80091dc:	f10a 0a01 	add.w	sl, sl, #1
 80091e0:	f88b 3000 	strb.w	r3, [fp]
 80091e4:	e6ff      	b.n	8008fe6 <_dtoa_r+0x8fe>
 80091e6:	4615      	mov	r5, r2
 80091e8:	e79f      	b.n	800912a <_dtoa_r+0xa42>
 80091ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009250 <_dtoa_r+0xb68>
 80091ee:	e007      	b.n	8009200 <_dtoa_r+0xb18>
 80091f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009254 <_dtoa_r+0xb6c>
 80091f6:	b11b      	cbz	r3, 8009200 <_dtoa_r+0xb18>
 80091f8:	f10b 0308 	add.w	r3, fp, #8
 80091fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	4658      	mov	r0, fp
 8009202:	b017      	add	sp, #92	; 0x5c
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	2b01      	cmp	r3, #1
 800920c:	f77f ae35 	ble.w	8008e7a <_dtoa_r+0x792>
 8009210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009212:	9307      	str	r3, [sp, #28]
 8009214:	e649      	b.n	8008eaa <_dtoa_r+0x7c2>
 8009216:	9b02      	ldr	r3, [sp, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	dc03      	bgt.n	8009224 <_dtoa_r+0xb3c>
 800921c:	9b06      	ldr	r3, [sp, #24]
 800921e:	2b02      	cmp	r3, #2
 8009220:	f73f aecc 	bgt.w	8008fbc <_dtoa_r+0x8d4>
 8009224:	465d      	mov	r5, fp
 8009226:	4639      	mov	r1, r7
 8009228:	9804      	ldr	r0, [sp, #16]
 800922a:	f7ff f9d1 	bl	80085d0 <quorem>
 800922e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009232:	f805 8b01 	strb.w	r8, [r5], #1
 8009236:	9a02      	ldr	r2, [sp, #8]
 8009238:	eba5 030b 	sub.w	r3, r5, fp
 800923c:	429a      	cmp	r2, r3
 800923e:	ddb0      	ble.n	80091a2 <_dtoa_r+0xaba>
 8009240:	2300      	movs	r3, #0
 8009242:	220a      	movs	r2, #10
 8009244:	9904      	ldr	r1, [sp, #16]
 8009246:	4620      	mov	r0, r4
 8009248:	f000 f872 	bl	8009330 <__multadd>
 800924c:	9004      	str	r0, [sp, #16]
 800924e:	e7ea      	b.n	8009226 <_dtoa_r+0xb3e>
 8009250:	08009f88 	.word	0x08009f88
 8009254:	08009fac 	.word	0x08009fac

08009258 <_localeconv_r>:
 8009258:	4b04      	ldr	r3, [pc, #16]	; (800926c <_localeconv_r+0x14>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6a18      	ldr	r0, [r3, #32]
 800925e:	4b04      	ldr	r3, [pc, #16]	; (8009270 <_localeconv_r+0x18>)
 8009260:	2800      	cmp	r0, #0
 8009262:	bf08      	it	eq
 8009264:	4618      	moveq	r0, r3
 8009266:	30f0      	adds	r0, #240	; 0xf0
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20000020 	.word	0x20000020
 8009270:	20000084 	.word	0x20000084

08009274 <malloc>:
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <malloc+0xc>)
 8009276:	4601      	mov	r1, r0
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	f000 bb45 	b.w	8009908 <_malloc_r>
 800927e:	bf00      	nop
 8009280:	20000020 	.word	0x20000020

08009284 <memcpy>:
 8009284:	b510      	push	{r4, lr}
 8009286:	1e43      	subs	r3, r0, #1
 8009288:	440a      	add	r2, r1
 800928a:	4291      	cmp	r1, r2
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	bd10      	pop	{r4, pc}
 8009290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009298:	e7f7      	b.n	800928a <memcpy+0x6>

0800929a <_Balloc>:
 800929a:	b570      	push	{r4, r5, r6, lr}
 800929c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800929e:	4604      	mov	r4, r0
 80092a0:	460e      	mov	r6, r1
 80092a2:	b93d      	cbnz	r5, 80092b4 <_Balloc+0x1a>
 80092a4:	2010      	movs	r0, #16
 80092a6:	f7ff ffe5 	bl	8009274 <malloc>
 80092aa:	6260      	str	r0, [r4, #36]	; 0x24
 80092ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092b0:	6005      	str	r5, [r0, #0]
 80092b2:	60c5      	str	r5, [r0, #12]
 80092b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80092b6:	68eb      	ldr	r3, [r5, #12]
 80092b8:	b183      	cbz	r3, 80092dc <_Balloc+0x42>
 80092ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092c2:	b9b8      	cbnz	r0, 80092f4 <_Balloc+0x5a>
 80092c4:	2101      	movs	r1, #1
 80092c6:	fa01 f506 	lsl.w	r5, r1, r6
 80092ca:	1d6a      	adds	r2, r5, #5
 80092cc:	0092      	lsls	r2, r2, #2
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fabe 	bl	8009850 <_calloc_r>
 80092d4:	b160      	cbz	r0, 80092f0 <_Balloc+0x56>
 80092d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80092da:	e00e      	b.n	80092fa <_Balloc+0x60>
 80092dc:	2221      	movs	r2, #33	; 0x21
 80092de:	2104      	movs	r1, #4
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fab5 	bl	8009850 <_calloc_r>
 80092e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e8:	60e8      	str	r0, [r5, #12]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e4      	bne.n	80092ba <_Balloc+0x20>
 80092f0:	2000      	movs	r0, #0
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	6802      	ldr	r2, [r0, #0]
 80092f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80092fa:	2300      	movs	r3, #0
 80092fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009300:	e7f7      	b.n	80092f2 <_Balloc+0x58>

08009302 <_Bfree>:
 8009302:	b570      	push	{r4, r5, r6, lr}
 8009304:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009306:	4606      	mov	r6, r0
 8009308:	460d      	mov	r5, r1
 800930a:	b93c      	cbnz	r4, 800931c <_Bfree+0x1a>
 800930c:	2010      	movs	r0, #16
 800930e:	f7ff ffb1 	bl	8009274 <malloc>
 8009312:	6270      	str	r0, [r6, #36]	; 0x24
 8009314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009318:	6004      	str	r4, [r0, #0]
 800931a:	60c4      	str	r4, [r0, #12]
 800931c:	b13d      	cbz	r5, 800932e <_Bfree+0x2c>
 800931e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009320:	686a      	ldr	r2, [r5, #4]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009328:	6029      	str	r1, [r5, #0]
 800932a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <__multadd>:
 8009330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	690d      	ldr	r5, [r1, #16]
 8009336:	461f      	mov	r7, r3
 8009338:	4606      	mov	r6, r0
 800933a:	460c      	mov	r4, r1
 800933c:	f101 0c14 	add.w	ip, r1, #20
 8009340:	2300      	movs	r3, #0
 8009342:	f8dc 0000 	ldr.w	r0, [ip]
 8009346:	b281      	uxth	r1, r0
 8009348:	fb02 7101 	mla	r1, r2, r1, r7
 800934c:	0c0f      	lsrs	r7, r1, #16
 800934e:	0c00      	lsrs	r0, r0, #16
 8009350:	fb02 7000 	mla	r0, r2, r0, r7
 8009354:	b289      	uxth	r1, r1
 8009356:	3301      	adds	r3, #1
 8009358:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800935c:	429d      	cmp	r5, r3
 800935e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009362:	f84c 1b04 	str.w	r1, [ip], #4
 8009366:	dcec      	bgt.n	8009342 <__multadd+0x12>
 8009368:	b1d7      	cbz	r7, 80093a0 <__multadd+0x70>
 800936a:	68a3      	ldr	r3, [r4, #8]
 800936c:	42ab      	cmp	r3, r5
 800936e:	dc12      	bgt.n	8009396 <__multadd+0x66>
 8009370:	6861      	ldr	r1, [r4, #4]
 8009372:	4630      	mov	r0, r6
 8009374:	3101      	adds	r1, #1
 8009376:	f7ff ff90 	bl	800929a <_Balloc>
 800937a:	6922      	ldr	r2, [r4, #16]
 800937c:	3202      	adds	r2, #2
 800937e:	f104 010c 	add.w	r1, r4, #12
 8009382:	4680      	mov	r8, r0
 8009384:	0092      	lsls	r2, r2, #2
 8009386:	300c      	adds	r0, #12
 8009388:	f7ff ff7c 	bl	8009284 <memcpy>
 800938c:	4621      	mov	r1, r4
 800938e:	4630      	mov	r0, r6
 8009390:	f7ff ffb7 	bl	8009302 <_Bfree>
 8009394:	4644      	mov	r4, r8
 8009396:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800939a:	3501      	adds	r5, #1
 800939c:	615f      	str	r7, [r3, #20]
 800939e:	6125      	str	r5, [r4, #16]
 80093a0:	4620      	mov	r0, r4
 80093a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093a6 <__hi0bits>:
 80093a6:	0c02      	lsrs	r2, r0, #16
 80093a8:	0412      	lsls	r2, r2, #16
 80093aa:	4603      	mov	r3, r0
 80093ac:	b9b2      	cbnz	r2, 80093dc <__hi0bits+0x36>
 80093ae:	0403      	lsls	r3, r0, #16
 80093b0:	2010      	movs	r0, #16
 80093b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80093b6:	bf04      	itt	eq
 80093b8:	021b      	lsleq	r3, r3, #8
 80093ba:	3008      	addeq	r0, #8
 80093bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80093c0:	bf04      	itt	eq
 80093c2:	011b      	lsleq	r3, r3, #4
 80093c4:	3004      	addeq	r0, #4
 80093c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093ca:	bf04      	itt	eq
 80093cc:	009b      	lsleq	r3, r3, #2
 80093ce:	3002      	addeq	r0, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	db06      	blt.n	80093e2 <__hi0bits+0x3c>
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	d503      	bpl.n	80093e0 <__hi0bits+0x3a>
 80093d8:	3001      	adds	r0, #1
 80093da:	4770      	bx	lr
 80093dc:	2000      	movs	r0, #0
 80093de:	e7e8      	b.n	80093b2 <__hi0bits+0xc>
 80093e0:	2020      	movs	r0, #32
 80093e2:	4770      	bx	lr

080093e4 <__lo0bits>:
 80093e4:	6803      	ldr	r3, [r0, #0]
 80093e6:	f013 0207 	ands.w	r2, r3, #7
 80093ea:	4601      	mov	r1, r0
 80093ec:	d00b      	beq.n	8009406 <__lo0bits+0x22>
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d423      	bmi.n	800943a <__lo0bits+0x56>
 80093f2:	0798      	lsls	r0, r3, #30
 80093f4:	bf49      	itett	mi
 80093f6:	085b      	lsrmi	r3, r3, #1
 80093f8:	089b      	lsrpl	r3, r3, #2
 80093fa:	2001      	movmi	r0, #1
 80093fc:	600b      	strmi	r3, [r1, #0]
 80093fe:	bf5c      	itt	pl
 8009400:	600b      	strpl	r3, [r1, #0]
 8009402:	2002      	movpl	r0, #2
 8009404:	4770      	bx	lr
 8009406:	b298      	uxth	r0, r3
 8009408:	b9a8      	cbnz	r0, 8009436 <__lo0bits+0x52>
 800940a:	0c1b      	lsrs	r3, r3, #16
 800940c:	2010      	movs	r0, #16
 800940e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009412:	bf04      	itt	eq
 8009414:	0a1b      	lsreq	r3, r3, #8
 8009416:	3008      	addeq	r0, #8
 8009418:	071a      	lsls	r2, r3, #28
 800941a:	bf04      	itt	eq
 800941c:	091b      	lsreq	r3, r3, #4
 800941e:	3004      	addeq	r0, #4
 8009420:	079a      	lsls	r2, r3, #30
 8009422:	bf04      	itt	eq
 8009424:	089b      	lsreq	r3, r3, #2
 8009426:	3002      	addeq	r0, #2
 8009428:	07da      	lsls	r2, r3, #31
 800942a:	d402      	bmi.n	8009432 <__lo0bits+0x4e>
 800942c:	085b      	lsrs	r3, r3, #1
 800942e:	d006      	beq.n	800943e <__lo0bits+0x5a>
 8009430:	3001      	adds	r0, #1
 8009432:	600b      	str	r3, [r1, #0]
 8009434:	4770      	bx	lr
 8009436:	4610      	mov	r0, r2
 8009438:	e7e9      	b.n	800940e <__lo0bits+0x2a>
 800943a:	2000      	movs	r0, #0
 800943c:	4770      	bx	lr
 800943e:	2020      	movs	r0, #32
 8009440:	4770      	bx	lr

08009442 <__i2b>:
 8009442:	b510      	push	{r4, lr}
 8009444:	460c      	mov	r4, r1
 8009446:	2101      	movs	r1, #1
 8009448:	f7ff ff27 	bl	800929a <_Balloc>
 800944c:	2201      	movs	r2, #1
 800944e:	6144      	str	r4, [r0, #20]
 8009450:	6102      	str	r2, [r0, #16]
 8009452:	bd10      	pop	{r4, pc}

08009454 <__multiply>:
 8009454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009458:	4614      	mov	r4, r2
 800945a:	690a      	ldr	r2, [r1, #16]
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	429a      	cmp	r2, r3
 8009460:	bfb8      	it	lt
 8009462:	460b      	movlt	r3, r1
 8009464:	4688      	mov	r8, r1
 8009466:	bfbc      	itt	lt
 8009468:	46a0      	movlt	r8, r4
 800946a:	461c      	movlt	r4, r3
 800946c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009470:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009474:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009478:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800947c:	eb07 0609 	add.w	r6, r7, r9
 8009480:	42b3      	cmp	r3, r6
 8009482:	bfb8      	it	lt
 8009484:	3101      	addlt	r1, #1
 8009486:	f7ff ff08 	bl	800929a <_Balloc>
 800948a:	f100 0514 	add.w	r5, r0, #20
 800948e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009492:	462b      	mov	r3, r5
 8009494:	2200      	movs	r2, #0
 8009496:	4573      	cmp	r3, lr
 8009498:	d316      	bcc.n	80094c8 <__multiply+0x74>
 800949a:	f104 0214 	add.w	r2, r4, #20
 800949e:	f108 0114 	add.w	r1, r8, #20
 80094a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80094a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	9201      	str	r2, [sp, #4]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d80c      	bhi.n	80094ce <__multiply+0x7a>
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	dd03      	ble.n	80094c0 <__multiply+0x6c>
 80094b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d05d      	beq.n	800957c <__multiply+0x128>
 80094c0:	6106      	str	r6, [r0, #16]
 80094c2:	b003      	add	sp, #12
 80094c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c8:	f843 2b04 	str.w	r2, [r3], #4
 80094cc:	e7e3      	b.n	8009496 <__multiply+0x42>
 80094ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80094d2:	f1bb 0f00 	cmp.w	fp, #0
 80094d6:	d023      	beq.n	8009520 <__multiply+0xcc>
 80094d8:	4689      	mov	r9, r1
 80094da:	46ac      	mov	ip, r5
 80094dc:	f04f 0800 	mov.w	r8, #0
 80094e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80094e4:	f8dc a000 	ldr.w	sl, [ip]
 80094e8:	b2a3      	uxth	r3, r4
 80094ea:	fa1f fa8a 	uxth.w	sl, sl
 80094ee:	fb0b a303 	mla	r3, fp, r3, sl
 80094f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80094f6:	f8dc 4000 	ldr.w	r4, [ip]
 80094fa:	4443      	add	r3, r8
 80094fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009500:	fb0b 840a 	mla	r4, fp, sl, r8
 8009504:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009508:	46e2      	mov	sl, ip
 800950a:	b29b      	uxth	r3, r3
 800950c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009510:	454f      	cmp	r7, r9
 8009512:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009516:	f84a 3b04 	str.w	r3, [sl], #4
 800951a:	d82b      	bhi.n	8009574 <__multiply+0x120>
 800951c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009526:	3204      	adds	r2, #4
 8009528:	f1ba 0f00 	cmp.w	sl, #0
 800952c:	d020      	beq.n	8009570 <__multiply+0x11c>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	4689      	mov	r9, r1
 8009532:	46a8      	mov	r8, r5
 8009534:	f04f 0b00 	mov.w	fp, #0
 8009538:	f8b9 c000 	ldrh.w	ip, [r9]
 800953c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009540:	fb0a 440c 	mla	r4, sl, ip, r4
 8009544:	445c      	add	r4, fp
 8009546:	46c4      	mov	ip, r8
 8009548:	b29b      	uxth	r3, r3
 800954a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800954e:	f84c 3b04 	str.w	r3, [ip], #4
 8009552:	f859 3b04 	ldr.w	r3, [r9], #4
 8009556:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	fb0a b303 	mla	r3, sl, r3, fp
 8009560:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009564:	454f      	cmp	r7, r9
 8009566:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800956a:	d805      	bhi.n	8009578 <__multiply+0x124>
 800956c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009570:	3504      	adds	r5, #4
 8009572:	e79b      	b.n	80094ac <__multiply+0x58>
 8009574:	46d4      	mov	ip, sl
 8009576:	e7b3      	b.n	80094e0 <__multiply+0x8c>
 8009578:	46e0      	mov	r8, ip
 800957a:	e7dd      	b.n	8009538 <__multiply+0xe4>
 800957c:	3e01      	subs	r6, #1
 800957e:	e799      	b.n	80094b4 <__multiply+0x60>

08009580 <__pow5mult>:
 8009580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009584:	4615      	mov	r5, r2
 8009586:	f012 0203 	ands.w	r2, r2, #3
 800958a:	4606      	mov	r6, r0
 800958c:	460f      	mov	r7, r1
 800958e:	d007      	beq.n	80095a0 <__pow5mult+0x20>
 8009590:	3a01      	subs	r2, #1
 8009592:	4c21      	ldr	r4, [pc, #132]	; (8009618 <__pow5mult+0x98>)
 8009594:	2300      	movs	r3, #0
 8009596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800959a:	f7ff fec9 	bl	8009330 <__multadd>
 800959e:	4607      	mov	r7, r0
 80095a0:	10ad      	asrs	r5, r5, #2
 80095a2:	d035      	beq.n	8009610 <__pow5mult+0x90>
 80095a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095a6:	b93c      	cbnz	r4, 80095b8 <__pow5mult+0x38>
 80095a8:	2010      	movs	r0, #16
 80095aa:	f7ff fe63 	bl	8009274 <malloc>
 80095ae:	6270      	str	r0, [r6, #36]	; 0x24
 80095b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095b4:	6004      	str	r4, [r0, #0]
 80095b6:	60c4      	str	r4, [r0, #12]
 80095b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095c0:	b94c      	cbnz	r4, 80095d6 <__pow5mult+0x56>
 80095c2:	f240 2171 	movw	r1, #625	; 0x271
 80095c6:	4630      	mov	r0, r6
 80095c8:	f7ff ff3b 	bl	8009442 <__i2b>
 80095cc:	2300      	movs	r3, #0
 80095ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80095d2:	4604      	mov	r4, r0
 80095d4:	6003      	str	r3, [r0, #0]
 80095d6:	f04f 0800 	mov.w	r8, #0
 80095da:	07eb      	lsls	r3, r5, #31
 80095dc:	d50a      	bpl.n	80095f4 <__pow5mult+0x74>
 80095de:	4639      	mov	r1, r7
 80095e0:	4622      	mov	r2, r4
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ff36 	bl	8009454 <__multiply>
 80095e8:	4639      	mov	r1, r7
 80095ea:	4681      	mov	r9, r0
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff fe88 	bl	8009302 <_Bfree>
 80095f2:	464f      	mov	r7, r9
 80095f4:	106d      	asrs	r5, r5, #1
 80095f6:	d00b      	beq.n	8009610 <__pow5mult+0x90>
 80095f8:	6820      	ldr	r0, [r4, #0]
 80095fa:	b938      	cbnz	r0, 800960c <__pow5mult+0x8c>
 80095fc:	4622      	mov	r2, r4
 80095fe:	4621      	mov	r1, r4
 8009600:	4630      	mov	r0, r6
 8009602:	f7ff ff27 	bl	8009454 <__multiply>
 8009606:	6020      	str	r0, [r4, #0]
 8009608:	f8c0 8000 	str.w	r8, [r0]
 800960c:	4604      	mov	r4, r0
 800960e:	e7e4      	b.n	80095da <__pow5mult+0x5a>
 8009610:	4638      	mov	r0, r7
 8009612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009616:	bf00      	nop
 8009618:	0800a0b0 	.word	0x0800a0b0

0800961c <__lshift>:
 800961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009620:	460c      	mov	r4, r1
 8009622:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	6849      	ldr	r1, [r1, #4]
 800962a:	eb0a 0903 	add.w	r9, sl, r3
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	4607      	mov	r7, r0
 8009632:	4616      	mov	r6, r2
 8009634:	f109 0501 	add.w	r5, r9, #1
 8009638:	42ab      	cmp	r3, r5
 800963a:	db32      	blt.n	80096a2 <__lshift+0x86>
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff fe2c 	bl	800929a <_Balloc>
 8009642:	2300      	movs	r3, #0
 8009644:	4680      	mov	r8, r0
 8009646:	f100 0114 	add.w	r1, r0, #20
 800964a:	461a      	mov	r2, r3
 800964c:	4553      	cmp	r3, sl
 800964e:	db2b      	blt.n	80096a8 <__lshift+0x8c>
 8009650:	6920      	ldr	r0, [r4, #16]
 8009652:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009656:	f104 0314 	add.w	r3, r4, #20
 800965a:	f016 021f 	ands.w	r2, r6, #31
 800965e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009662:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009666:	d025      	beq.n	80096b4 <__lshift+0x98>
 8009668:	f1c2 0e20 	rsb	lr, r2, #32
 800966c:	2000      	movs	r0, #0
 800966e:	681e      	ldr	r6, [r3, #0]
 8009670:	468a      	mov	sl, r1
 8009672:	4096      	lsls	r6, r2
 8009674:	4330      	orrs	r0, r6
 8009676:	f84a 0b04 	str.w	r0, [sl], #4
 800967a:	f853 0b04 	ldr.w	r0, [r3], #4
 800967e:	459c      	cmp	ip, r3
 8009680:	fa20 f00e 	lsr.w	r0, r0, lr
 8009684:	d814      	bhi.n	80096b0 <__lshift+0x94>
 8009686:	6048      	str	r0, [r1, #4]
 8009688:	b108      	cbz	r0, 800968e <__lshift+0x72>
 800968a:	f109 0502 	add.w	r5, r9, #2
 800968e:	3d01      	subs	r5, #1
 8009690:	4638      	mov	r0, r7
 8009692:	f8c8 5010 	str.w	r5, [r8, #16]
 8009696:	4621      	mov	r1, r4
 8009698:	f7ff fe33 	bl	8009302 <_Bfree>
 800969c:	4640      	mov	r0, r8
 800969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a2:	3101      	adds	r1, #1
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	e7c7      	b.n	8009638 <__lshift+0x1c>
 80096a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80096ac:	3301      	adds	r3, #1
 80096ae:	e7cd      	b.n	800964c <__lshift+0x30>
 80096b0:	4651      	mov	r1, sl
 80096b2:	e7dc      	b.n	800966e <__lshift+0x52>
 80096b4:	3904      	subs	r1, #4
 80096b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80096be:	459c      	cmp	ip, r3
 80096c0:	d8f9      	bhi.n	80096b6 <__lshift+0x9a>
 80096c2:	e7e4      	b.n	800968e <__lshift+0x72>

080096c4 <__mcmp>:
 80096c4:	6903      	ldr	r3, [r0, #16]
 80096c6:	690a      	ldr	r2, [r1, #16]
 80096c8:	1a9b      	subs	r3, r3, r2
 80096ca:	b530      	push	{r4, r5, lr}
 80096cc:	d10c      	bne.n	80096e8 <__mcmp+0x24>
 80096ce:	0092      	lsls	r2, r2, #2
 80096d0:	3014      	adds	r0, #20
 80096d2:	3114      	adds	r1, #20
 80096d4:	1884      	adds	r4, r0, r2
 80096d6:	4411      	add	r1, r2
 80096d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096e0:	4295      	cmp	r5, r2
 80096e2:	d003      	beq.n	80096ec <__mcmp+0x28>
 80096e4:	d305      	bcc.n	80096f2 <__mcmp+0x2e>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4618      	mov	r0, r3
 80096ea:	bd30      	pop	{r4, r5, pc}
 80096ec:	42a0      	cmp	r0, r4
 80096ee:	d3f3      	bcc.n	80096d8 <__mcmp+0x14>
 80096f0:	e7fa      	b.n	80096e8 <__mcmp+0x24>
 80096f2:	f04f 33ff 	mov.w	r3, #4294967295
 80096f6:	e7f7      	b.n	80096e8 <__mcmp+0x24>

080096f8 <__mdiff>:
 80096f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	460d      	mov	r5, r1
 80096fe:	4607      	mov	r7, r0
 8009700:	4611      	mov	r1, r2
 8009702:	4628      	mov	r0, r5
 8009704:	4614      	mov	r4, r2
 8009706:	f7ff ffdd 	bl	80096c4 <__mcmp>
 800970a:	1e06      	subs	r6, r0, #0
 800970c:	d108      	bne.n	8009720 <__mdiff+0x28>
 800970e:	4631      	mov	r1, r6
 8009710:	4638      	mov	r0, r7
 8009712:	f7ff fdc2 	bl	800929a <_Balloc>
 8009716:	2301      	movs	r3, #1
 8009718:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	bfa4      	itt	ge
 8009722:	4623      	movge	r3, r4
 8009724:	462c      	movge	r4, r5
 8009726:	4638      	mov	r0, r7
 8009728:	6861      	ldr	r1, [r4, #4]
 800972a:	bfa6      	itte	ge
 800972c:	461d      	movge	r5, r3
 800972e:	2600      	movge	r6, #0
 8009730:	2601      	movlt	r6, #1
 8009732:	f7ff fdb2 	bl	800929a <_Balloc>
 8009736:	692b      	ldr	r3, [r5, #16]
 8009738:	60c6      	str	r6, [r0, #12]
 800973a:	6926      	ldr	r6, [r4, #16]
 800973c:	f105 0914 	add.w	r9, r5, #20
 8009740:	f104 0214 	add.w	r2, r4, #20
 8009744:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009748:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800974c:	f100 0514 	add.w	r5, r0, #20
 8009750:	f04f 0e00 	mov.w	lr, #0
 8009754:	f852 ab04 	ldr.w	sl, [r2], #4
 8009758:	f859 4b04 	ldr.w	r4, [r9], #4
 800975c:	fa1e f18a 	uxtah	r1, lr, sl
 8009760:	b2a3      	uxth	r3, r4
 8009762:	1ac9      	subs	r1, r1, r3
 8009764:	0c23      	lsrs	r3, r4, #16
 8009766:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800976a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800976e:	b289      	uxth	r1, r1
 8009770:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009774:	45c8      	cmp	r8, r9
 8009776:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800977a:	4694      	mov	ip, r2
 800977c:	f845 3b04 	str.w	r3, [r5], #4
 8009780:	d8e8      	bhi.n	8009754 <__mdiff+0x5c>
 8009782:	45bc      	cmp	ip, r7
 8009784:	d304      	bcc.n	8009790 <__mdiff+0x98>
 8009786:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800978a:	b183      	cbz	r3, 80097ae <__mdiff+0xb6>
 800978c:	6106      	str	r6, [r0, #16]
 800978e:	e7c5      	b.n	800971c <__mdiff+0x24>
 8009790:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009794:	fa1e f381 	uxtah	r3, lr, r1
 8009798:	141a      	asrs	r2, r3, #16
 800979a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80097a8:	f845 3b04 	str.w	r3, [r5], #4
 80097ac:	e7e9      	b.n	8009782 <__mdiff+0x8a>
 80097ae:	3e01      	subs	r6, #1
 80097b0:	e7e9      	b.n	8009786 <__mdiff+0x8e>

080097b2 <__d2b>:
 80097b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097b6:	460e      	mov	r6, r1
 80097b8:	2101      	movs	r1, #1
 80097ba:	ec59 8b10 	vmov	r8, r9, d0
 80097be:	4615      	mov	r5, r2
 80097c0:	f7ff fd6b 	bl	800929a <_Balloc>
 80097c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80097c8:	4607      	mov	r7, r0
 80097ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097ce:	bb34      	cbnz	r4, 800981e <__d2b+0x6c>
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	f1b8 0300 	subs.w	r3, r8, #0
 80097d6:	d027      	beq.n	8009828 <__d2b+0x76>
 80097d8:	a802      	add	r0, sp, #8
 80097da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80097de:	f7ff fe01 	bl	80093e4 <__lo0bits>
 80097e2:	9900      	ldr	r1, [sp, #0]
 80097e4:	b1f0      	cbz	r0, 8009824 <__d2b+0x72>
 80097e6:	9a01      	ldr	r2, [sp, #4]
 80097e8:	f1c0 0320 	rsb	r3, r0, #32
 80097ec:	fa02 f303 	lsl.w	r3, r2, r3
 80097f0:	430b      	orrs	r3, r1
 80097f2:	40c2      	lsrs	r2, r0
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	9201      	str	r2, [sp, #4]
 80097f8:	9b01      	ldr	r3, [sp, #4]
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bf14      	ite	ne
 8009800:	2102      	movne	r1, #2
 8009802:	2101      	moveq	r1, #1
 8009804:	6139      	str	r1, [r7, #16]
 8009806:	b1c4      	cbz	r4, 800983a <__d2b+0x88>
 8009808:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800980c:	4404      	add	r4, r0
 800980e:	6034      	str	r4, [r6, #0]
 8009810:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009814:	6028      	str	r0, [r5, #0]
 8009816:	4638      	mov	r0, r7
 8009818:	b003      	add	sp, #12
 800981a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800981e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009822:	e7d5      	b.n	80097d0 <__d2b+0x1e>
 8009824:	6179      	str	r1, [r7, #20]
 8009826:	e7e7      	b.n	80097f8 <__d2b+0x46>
 8009828:	a801      	add	r0, sp, #4
 800982a:	f7ff fddb 	bl	80093e4 <__lo0bits>
 800982e:	9b01      	ldr	r3, [sp, #4]
 8009830:	617b      	str	r3, [r7, #20]
 8009832:	2101      	movs	r1, #1
 8009834:	6139      	str	r1, [r7, #16]
 8009836:	3020      	adds	r0, #32
 8009838:	e7e5      	b.n	8009806 <__d2b+0x54>
 800983a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800983e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009842:	6030      	str	r0, [r6, #0]
 8009844:	6918      	ldr	r0, [r3, #16]
 8009846:	f7ff fdae 	bl	80093a6 <__hi0bits>
 800984a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800984e:	e7e1      	b.n	8009814 <__d2b+0x62>

08009850 <_calloc_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	fb02 f401 	mul.w	r4, r2, r1
 8009856:	4621      	mov	r1, r4
 8009858:	f000 f856 	bl	8009908 <_malloc_r>
 800985c:	4605      	mov	r5, r0
 800985e:	b118      	cbz	r0, 8009868 <_calloc_r+0x18>
 8009860:	4622      	mov	r2, r4
 8009862:	2100      	movs	r1, #0
 8009864:	f7fe fa30 	bl	8007cc8 <memset>
 8009868:	4628      	mov	r0, r5
 800986a:	bd38      	pop	{r3, r4, r5, pc}

0800986c <_free_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4605      	mov	r5, r0
 8009870:	2900      	cmp	r1, #0
 8009872:	d045      	beq.n	8009900 <_free_r+0x94>
 8009874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009878:	1f0c      	subs	r4, r1, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	bfb8      	it	lt
 800987e:	18e4      	addlt	r4, r4, r3
 8009880:	f000 fa29 	bl	8009cd6 <__malloc_lock>
 8009884:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <_free_r+0x98>)
 8009886:	6813      	ldr	r3, [r2, #0]
 8009888:	4610      	mov	r0, r2
 800988a:	b933      	cbnz	r3, 800989a <_free_r+0x2e>
 800988c:	6063      	str	r3, [r4, #4]
 800988e:	6014      	str	r4, [r2, #0]
 8009890:	4628      	mov	r0, r5
 8009892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009896:	f000 ba1f 	b.w	8009cd8 <__malloc_unlock>
 800989a:	42a3      	cmp	r3, r4
 800989c:	d90c      	bls.n	80098b8 <_free_r+0x4c>
 800989e:	6821      	ldr	r1, [r4, #0]
 80098a0:	1862      	adds	r2, r4, r1
 80098a2:	4293      	cmp	r3, r2
 80098a4:	bf04      	itt	eq
 80098a6:	681a      	ldreq	r2, [r3, #0]
 80098a8:	685b      	ldreq	r3, [r3, #4]
 80098aa:	6063      	str	r3, [r4, #4]
 80098ac:	bf04      	itt	eq
 80098ae:	1852      	addeq	r2, r2, r1
 80098b0:	6022      	streq	r2, [r4, #0]
 80098b2:	6004      	str	r4, [r0, #0]
 80098b4:	e7ec      	b.n	8009890 <_free_r+0x24>
 80098b6:	4613      	mov	r3, r2
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	b10a      	cbz	r2, 80098c0 <_free_r+0x54>
 80098bc:	42a2      	cmp	r2, r4
 80098be:	d9fa      	bls.n	80098b6 <_free_r+0x4a>
 80098c0:	6819      	ldr	r1, [r3, #0]
 80098c2:	1858      	adds	r0, r3, r1
 80098c4:	42a0      	cmp	r0, r4
 80098c6:	d10b      	bne.n	80098e0 <_free_r+0x74>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	4401      	add	r1, r0
 80098cc:	1858      	adds	r0, r3, r1
 80098ce:	4282      	cmp	r2, r0
 80098d0:	6019      	str	r1, [r3, #0]
 80098d2:	d1dd      	bne.n	8009890 <_free_r+0x24>
 80098d4:	6810      	ldr	r0, [r2, #0]
 80098d6:	6852      	ldr	r2, [r2, #4]
 80098d8:	605a      	str	r2, [r3, #4]
 80098da:	4401      	add	r1, r0
 80098dc:	6019      	str	r1, [r3, #0]
 80098de:	e7d7      	b.n	8009890 <_free_r+0x24>
 80098e0:	d902      	bls.n	80098e8 <_free_r+0x7c>
 80098e2:	230c      	movs	r3, #12
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	e7d3      	b.n	8009890 <_free_r+0x24>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	1821      	adds	r1, r4, r0
 80098ec:	428a      	cmp	r2, r1
 80098ee:	bf04      	itt	eq
 80098f0:	6811      	ldreq	r1, [r2, #0]
 80098f2:	6852      	ldreq	r2, [r2, #4]
 80098f4:	6062      	str	r2, [r4, #4]
 80098f6:	bf04      	itt	eq
 80098f8:	1809      	addeq	r1, r1, r0
 80098fa:	6021      	streq	r1, [r4, #0]
 80098fc:	605c      	str	r4, [r3, #4]
 80098fe:	e7c7      	b.n	8009890 <_free_r+0x24>
 8009900:	bd38      	pop	{r3, r4, r5, pc}
 8009902:	bf00      	nop
 8009904:	20000268 	.word	0x20000268

08009908 <_malloc_r>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	1ccd      	adds	r5, r1, #3
 800990c:	f025 0503 	bic.w	r5, r5, #3
 8009910:	3508      	adds	r5, #8
 8009912:	2d0c      	cmp	r5, #12
 8009914:	bf38      	it	cc
 8009916:	250c      	movcc	r5, #12
 8009918:	2d00      	cmp	r5, #0
 800991a:	4606      	mov	r6, r0
 800991c:	db01      	blt.n	8009922 <_malloc_r+0x1a>
 800991e:	42a9      	cmp	r1, r5
 8009920:	d903      	bls.n	800992a <_malloc_r+0x22>
 8009922:	230c      	movs	r3, #12
 8009924:	6033      	str	r3, [r6, #0]
 8009926:	2000      	movs	r0, #0
 8009928:	bd70      	pop	{r4, r5, r6, pc}
 800992a:	f000 f9d4 	bl	8009cd6 <__malloc_lock>
 800992e:	4a21      	ldr	r2, [pc, #132]	; (80099b4 <_malloc_r+0xac>)
 8009930:	6814      	ldr	r4, [r2, #0]
 8009932:	4621      	mov	r1, r4
 8009934:	b991      	cbnz	r1, 800995c <_malloc_r+0x54>
 8009936:	4c20      	ldr	r4, [pc, #128]	; (80099b8 <_malloc_r+0xb0>)
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	b91b      	cbnz	r3, 8009944 <_malloc_r+0x3c>
 800993c:	4630      	mov	r0, r6
 800993e:	f000 f98f 	bl	8009c60 <_sbrk_r>
 8009942:	6020      	str	r0, [r4, #0]
 8009944:	4629      	mov	r1, r5
 8009946:	4630      	mov	r0, r6
 8009948:	f000 f98a 	bl	8009c60 <_sbrk_r>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d124      	bne.n	800999a <_malloc_r+0x92>
 8009950:	230c      	movs	r3, #12
 8009952:	6033      	str	r3, [r6, #0]
 8009954:	4630      	mov	r0, r6
 8009956:	f000 f9bf 	bl	8009cd8 <__malloc_unlock>
 800995a:	e7e4      	b.n	8009926 <_malloc_r+0x1e>
 800995c:	680b      	ldr	r3, [r1, #0]
 800995e:	1b5b      	subs	r3, r3, r5
 8009960:	d418      	bmi.n	8009994 <_malloc_r+0x8c>
 8009962:	2b0b      	cmp	r3, #11
 8009964:	d90f      	bls.n	8009986 <_malloc_r+0x7e>
 8009966:	600b      	str	r3, [r1, #0]
 8009968:	50cd      	str	r5, [r1, r3]
 800996a:	18cc      	adds	r4, r1, r3
 800996c:	4630      	mov	r0, r6
 800996e:	f000 f9b3 	bl	8009cd8 <__malloc_unlock>
 8009972:	f104 000b 	add.w	r0, r4, #11
 8009976:	1d23      	adds	r3, r4, #4
 8009978:	f020 0007 	bic.w	r0, r0, #7
 800997c:	1ac3      	subs	r3, r0, r3
 800997e:	d0d3      	beq.n	8009928 <_malloc_r+0x20>
 8009980:	425a      	negs	r2, r3
 8009982:	50e2      	str	r2, [r4, r3]
 8009984:	e7d0      	b.n	8009928 <_malloc_r+0x20>
 8009986:	428c      	cmp	r4, r1
 8009988:	684b      	ldr	r3, [r1, #4]
 800998a:	bf16      	itet	ne
 800998c:	6063      	strne	r3, [r4, #4]
 800998e:	6013      	streq	r3, [r2, #0]
 8009990:	460c      	movne	r4, r1
 8009992:	e7eb      	b.n	800996c <_malloc_r+0x64>
 8009994:	460c      	mov	r4, r1
 8009996:	6849      	ldr	r1, [r1, #4]
 8009998:	e7cc      	b.n	8009934 <_malloc_r+0x2c>
 800999a:	1cc4      	adds	r4, r0, #3
 800999c:	f024 0403 	bic.w	r4, r4, #3
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d005      	beq.n	80099b0 <_malloc_r+0xa8>
 80099a4:	1a21      	subs	r1, r4, r0
 80099a6:	4630      	mov	r0, r6
 80099a8:	f000 f95a 	bl	8009c60 <_sbrk_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d0cf      	beq.n	8009950 <_malloc_r+0x48>
 80099b0:	6025      	str	r5, [r4, #0]
 80099b2:	e7db      	b.n	800996c <_malloc_r+0x64>
 80099b4:	20000268 	.word	0x20000268
 80099b8:	2000026c 	.word	0x2000026c

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	688e      	ldr	r6, [r1, #8]
 80099c2:	429e      	cmp	r6, r3
 80099c4:	4682      	mov	sl, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4690      	mov	r8, r2
 80099ca:	4699      	mov	r9, r3
 80099cc:	d837      	bhi.n	8009a3e <__ssputs_r+0x82>
 80099ce:	898a      	ldrh	r2, [r1, #12]
 80099d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d4:	d031      	beq.n	8009a3a <__ssputs_r+0x7e>
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	6909      	ldr	r1, [r1, #16]
 80099da:	1a6f      	subs	r7, r5, r1
 80099dc:	6965      	ldr	r5, [r4, #20]
 80099de:	2302      	movs	r3, #2
 80099e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80099e8:	f109 0301 	add.w	r3, r9, #1
 80099ec:	443b      	add	r3, r7
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d530      	bpl.n	8009a5a <__ssputs_r+0x9e>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff ff85 	bl	8009908 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b950      	cbnz	r0, 8009a18 <__ssputs_r+0x5c>
 8009a02:	230c      	movs	r3, #12
 8009a04:	f8ca 3000 	str.w	r3, [sl]
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	463a      	mov	r2, r7
 8009a1a:	6921      	ldr	r1, [r4, #16]
 8009a1c:	f7ff fc32 	bl	8009284 <memcpy>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	6126      	str	r6, [r4, #16]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	443e      	add	r6, r7
 8009a32:	1bed      	subs	r5, r5, r7
 8009a34:	6026      	str	r6, [r4, #0]
 8009a36:	60a5      	str	r5, [r4, #8]
 8009a38:	464e      	mov	r6, r9
 8009a3a:	454e      	cmp	r6, r9
 8009a3c:	d900      	bls.n	8009a40 <__ssputs_r+0x84>
 8009a3e:	464e      	mov	r6, r9
 8009a40:	4632      	mov	r2, r6
 8009a42:	4641      	mov	r1, r8
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	f000 f92d 	bl	8009ca4 <memmove>
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	1b9b      	subs	r3, r3, r6
 8009a4e:	60a3      	str	r3, [r4, #8]
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	441e      	add	r6, r3
 8009a54:	6026      	str	r6, [r4, #0]
 8009a56:	2000      	movs	r0, #0
 8009a58:	e7dc      	b.n	8009a14 <__ssputs_r+0x58>
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	f000 f93d 	bl	8009cda <_realloc_r>
 8009a60:	4606      	mov	r6, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d1e2      	bne.n	8009a2c <__ssputs_r+0x70>
 8009a66:	6921      	ldr	r1, [r4, #16]
 8009a68:	4650      	mov	r0, sl
 8009a6a:	f7ff feff 	bl	800986c <_free_r>
 8009a6e:	e7c8      	b.n	8009a02 <__ssputs_r+0x46>

08009a70 <_svfiprintf_r>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	461d      	mov	r5, r3
 8009a76:	898b      	ldrh	r3, [r1, #12]
 8009a78:	061f      	lsls	r7, r3, #24
 8009a7a:	b09d      	sub	sp, #116	; 0x74
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	4616      	mov	r6, r2
 8009a82:	d50f      	bpl.n	8009aa4 <_svfiprintf_r+0x34>
 8009a84:	690b      	ldr	r3, [r1, #16]
 8009a86:	b96b      	cbnz	r3, 8009aa4 <_svfiprintf_r+0x34>
 8009a88:	2140      	movs	r1, #64	; 0x40
 8009a8a:	f7ff ff3d 	bl	8009908 <_malloc_r>
 8009a8e:	6020      	str	r0, [r4, #0]
 8009a90:	6120      	str	r0, [r4, #16]
 8009a92:	b928      	cbnz	r0, 8009aa0 <_svfiprintf_r+0x30>
 8009a94:	230c      	movs	r3, #12
 8009a96:	f8c8 3000 	str.w	r3, [r8]
 8009a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9e:	e0c8      	b.n	8009c32 <_svfiprintf_r+0x1c2>
 8009aa0:	2340      	movs	r3, #64	; 0x40
 8009aa2:	6163      	str	r3, [r4, #20]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aae:	2330      	movs	r3, #48	; 0x30
 8009ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab4:	9503      	str	r5, [sp, #12]
 8009ab6:	f04f 0b01 	mov.w	fp, #1
 8009aba:	4637      	mov	r7, r6
 8009abc:	463d      	mov	r5, r7
 8009abe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ac2:	b10b      	cbz	r3, 8009ac8 <_svfiprintf_r+0x58>
 8009ac4:	2b25      	cmp	r3, #37	; 0x25
 8009ac6:	d13e      	bne.n	8009b46 <_svfiprintf_r+0xd6>
 8009ac8:	ebb7 0a06 	subs.w	sl, r7, r6
 8009acc:	d00b      	beq.n	8009ae6 <_svfiprintf_r+0x76>
 8009ace:	4653      	mov	r3, sl
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	f7ff ff71 	bl	80099bc <__ssputs_r>
 8009ada:	3001      	adds	r0, #1
 8009adc:	f000 80a4 	beq.w	8009c28 <_svfiprintf_r+0x1b8>
 8009ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae2:	4453      	add	r3, sl
 8009ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae6:	783b      	ldrb	r3, [r7, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 809d 	beq.w	8009c28 <_svfiprintf_r+0x1b8>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
 8009af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	9307      	str	r3, [sp, #28]
 8009afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b00:	931a      	str	r3, [sp, #104]	; 0x68
 8009b02:	462f      	mov	r7, r5
 8009b04:	2205      	movs	r2, #5
 8009b06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009b0a:	4850      	ldr	r0, [pc, #320]	; (8009c4c <_svfiprintf_r+0x1dc>)
 8009b0c:	f7f6 fb78 	bl	8000200 <memchr>
 8009b10:	9b04      	ldr	r3, [sp, #16]
 8009b12:	b9d0      	cbnz	r0, 8009b4a <_svfiprintf_r+0xda>
 8009b14:	06d9      	lsls	r1, r3, #27
 8009b16:	bf44      	itt	mi
 8009b18:	2220      	movmi	r2, #32
 8009b1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b1e:	071a      	lsls	r2, r3, #28
 8009b20:	bf44      	itt	mi
 8009b22:	222b      	movmi	r2, #43	; 0x2b
 8009b24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b28:	782a      	ldrb	r2, [r5, #0]
 8009b2a:	2a2a      	cmp	r2, #42	; 0x2a
 8009b2c:	d015      	beq.n	8009b5a <_svfiprintf_r+0xea>
 8009b2e:	9a07      	ldr	r2, [sp, #28]
 8009b30:	462f      	mov	r7, r5
 8009b32:	2000      	movs	r0, #0
 8009b34:	250a      	movs	r5, #10
 8009b36:	4639      	mov	r1, r7
 8009b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b3c:	3b30      	subs	r3, #48	; 0x30
 8009b3e:	2b09      	cmp	r3, #9
 8009b40:	d94d      	bls.n	8009bde <_svfiprintf_r+0x16e>
 8009b42:	b1b8      	cbz	r0, 8009b74 <_svfiprintf_r+0x104>
 8009b44:	e00f      	b.n	8009b66 <_svfiprintf_r+0xf6>
 8009b46:	462f      	mov	r7, r5
 8009b48:	e7b8      	b.n	8009abc <_svfiprintf_r+0x4c>
 8009b4a:	4a40      	ldr	r2, [pc, #256]	; (8009c4c <_svfiprintf_r+0x1dc>)
 8009b4c:	1a80      	subs	r0, r0, r2
 8009b4e:	fa0b f000 	lsl.w	r0, fp, r0
 8009b52:	4318      	orrs	r0, r3
 8009b54:	9004      	str	r0, [sp, #16]
 8009b56:	463d      	mov	r5, r7
 8009b58:	e7d3      	b.n	8009b02 <_svfiprintf_r+0x92>
 8009b5a:	9a03      	ldr	r2, [sp, #12]
 8009b5c:	1d11      	adds	r1, r2, #4
 8009b5e:	6812      	ldr	r2, [r2, #0]
 8009b60:	9103      	str	r1, [sp, #12]
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	db01      	blt.n	8009b6a <_svfiprintf_r+0xfa>
 8009b66:	9207      	str	r2, [sp, #28]
 8009b68:	e004      	b.n	8009b74 <_svfiprintf_r+0x104>
 8009b6a:	4252      	negs	r2, r2
 8009b6c:	f043 0302 	orr.w	r3, r3, #2
 8009b70:	9207      	str	r2, [sp, #28]
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	783b      	ldrb	r3, [r7, #0]
 8009b76:	2b2e      	cmp	r3, #46	; 0x2e
 8009b78:	d10c      	bne.n	8009b94 <_svfiprintf_r+0x124>
 8009b7a:	787b      	ldrb	r3, [r7, #1]
 8009b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b7e:	d133      	bne.n	8009be8 <_svfiprintf_r+0x178>
 8009b80:	9b03      	ldr	r3, [sp, #12]
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	9203      	str	r2, [sp, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfb8      	it	lt
 8009b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b90:	3702      	adds	r7, #2
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	4d2e      	ldr	r5, [pc, #184]	; (8009c50 <_svfiprintf_r+0x1e0>)
 8009b96:	7839      	ldrb	r1, [r7, #0]
 8009b98:	2203      	movs	r2, #3
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7f6 fb30 	bl	8000200 <memchr>
 8009ba0:	b138      	cbz	r0, 8009bb2 <_svfiprintf_r+0x142>
 8009ba2:	2340      	movs	r3, #64	; 0x40
 8009ba4:	1b40      	subs	r0, r0, r5
 8009ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8009baa:	9b04      	ldr	r3, [sp, #16]
 8009bac:	4303      	orrs	r3, r0
 8009bae:	3701      	adds	r7, #1
 8009bb0:	9304      	str	r3, [sp, #16]
 8009bb2:	7839      	ldrb	r1, [r7, #0]
 8009bb4:	4827      	ldr	r0, [pc, #156]	; (8009c54 <_svfiprintf_r+0x1e4>)
 8009bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bba:	2206      	movs	r2, #6
 8009bbc:	1c7e      	adds	r6, r7, #1
 8009bbe:	f7f6 fb1f 	bl	8000200 <memchr>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d038      	beq.n	8009c38 <_svfiprintf_r+0x1c8>
 8009bc6:	4b24      	ldr	r3, [pc, #144]	; (8009c58 <_svfiprintf_r+0x1e8>)
 8009bc8:	bb13      	cbnz	r3, 8009c10 <_svfiprintf_r+0x1a0>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	3307      	adds	r3, #7
 8009bce:	f023 0307 	bic.w	r3, r3, #7
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	9303      	str	r3, [sp, #12]
 8009bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd8:	444b      	add	r3, r9
 8009bda:	9309      	str	r3, [sp, #36]	; 0x24
 8009bdc:	e76d      	b.n	8009aba <_svfiprintf_r+0x4a>
 8009bde:	fb05 3202 	mla	r2, r5, r2, r3
 8009be2:	2001      	movs	r0, #1
 8009be4:	460f      	mov	r7, r1
 8009be6:	e7a6      	b.n	8009b36 <_svfiprintf_r+0xc6>
 8009be8:	2300      	movs	r3, #0
 8009bea:	3701      	adds	r7, #1
 8009bec:	9305      	str	r3, [sp, #20]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	250a      	movs	r5, #10
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf8:	3a30      	subs	r2, #48	; 0x30
 8009bfa:	2a09      	cmp	r2, #9
 8009bfc:	d903      	bls.n	8009c06 <_svfiprintf_r+0x196>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0c8      	beq.n	8009b94 <_svfiprintf_r+0x124>
 8009c02:	9105      	str	r1, [sp, #20]
 8009c04:	e7c6      	b.n	8009b94 <_svfiprintf_r+0x124>
 8009c06:	fb05 2101 	mla	r1, r5, r1, r2
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	e7f0      	b.n	8009bf2 <_svfiprintf_r+0x182>
 8009c10:	ab03      	add	r3, sp, #12
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	4622      	mov	r2, r4
 8009c16:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <_svfiprintf_r+0x1ec>)
 8009c18:	a904      	add	r1, sp, #16
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	f7fe f8f0 	bl	8007e00 <_printf_float>
 8009c20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c24:	4681      	mov	r9, r0
 8009c26:	d1d6      	bne.n	8009bd6 <_svfiprintf_r+0x166>
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	065b      	lsls	r3, r3, #25
 8009c2c:	f53f af35 	bmi.w	8009a9a <_svfiprintf_r+0x2a>
 8009c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c32:	b01d      	add	sp, #116	; 0x74
 8009c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c38:	ab03      	add	r3, sp, #12
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4b07      	ldr	r3, [pc, #28]	; (8009c5c <_svfiprintf_r+0x1ec>)
 8009c40:	a904      	add	r1, sp, #16
 8009c42:	4640      	mov	r0, r8
 8009c44:	f7fe fb92 	bl	800836c <_printf_i>
 8009c48:	e7ea      	b.n	8009c20 <_svfiprintf_r+0x1b0>
 8009c4a:	bf00      	nop
 8009c4c:	0800a0bc 	.word	0x0800a0bc
 8009c50:	0800a0c2 	.word	0x0800a0c2
 8009c54:	0800a0c6 	.word	0x0800a0c6
 8009c58:	08007e01 	.word	0x08007e01
 8009c5c:	080099bd 	.word	0x080099bd

08009c60 <_sbrk_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4c06      	ldr	r4, [pc, #24]	; (8009c7c <_sbrk_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4605      	mov	r5, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	f7f9 f97e 	bl	8002f6c <_sbrk>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_sbrk_r+0x1a>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_sbrk_r+0x1a>
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20000d9c 	.word	0x20000d9c

08009c80 <__ascii_mbtowc>:
 8009c80:	b082      	sub	sp, #8
 8009c82:	b901      	cbnz	r1, 8009c86 <__ascii_mbtowc+0x6>
 8009c84:	a901      	add	r1, sp, #4
 8009c86:	b142      	cbz	r2, 8009c9a <__ascii_mbtowc+0x1a>
 8009c88:	b14b      	cbz	r3, 8009c9e <__ascii_mbtowc+0x1e>
 8009c8a:	7813      	ldrb	r3, [r2, #0]
 8009c8c:	600b      	str	r3, [r1, #0]
 8009c8e:	7812      	ldrb	r2, [r2, #0]
 8009c90:	1c10      	adds	r0, r2, #0
 8009c92:	bf18      	it	ne
 8009c94:	2001      	movne	r0, #1
 8009c96:	b002      	add	sp, #8
 8009c98:	4770      	bx	lr
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	e7fb      	b.n	8009c96 <__ascii_mbtowc+0x16>
 8009c9e:	f06f 0001 	mvn.w	r0, #1
 8009ca2:	e7f8      	b.n	8009c96 <__ascii_mbtowc+0x16>

08009ca4 <memmove>:
 8009ca4:	4288      	cmp	r0, r1
 8009ca6:	b510      	push	{r4, lr}
 8009ca8:	eb01 0302 	add.w	r3, r1, r2
 8009cac:	d807      	bhi.n	8009cbe <memmove+0x1a>
 8009cae:	1e42      	subs	r2, r0, #1
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d00a      	beq.n	8009cca <memmove+0x26>
 8009cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009cbc:	e7f8      	b.n	8009cb0 <memmove+0xc>
 8009cbe:	4283      	cmp	r3, r0
 8009cc0:	d9f5      	bls.n	8009cae <memmove+0xa>
 8009cc2:	1881      	adds	r1, r0, r2
 8009cc4:	1ad2      	subs	r2, r2, r3
 8009cc6:	42d3      	cmn	r3, r2
 8009cc8:	d100      	bne.n	8009ccc <memmove+0x28>
 8009cca:	bd10      	pop	{r4, pc}
 8009ccc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009cd4:	e7f7      	b.n	8009cc6 <memmove+0x22>

08009cd6 <__malloc_lock>:
 8009cd6:	4770      	bx	lr

08009cd8 <__malloc_unlock>:
 8009cd8:	4770      	bx	lr

08009cda <_realloc_r>:
 8009cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cdc:	4607      	mov	r7, r0
 8009cde:	4614      	mov	r4, r2
 8009ce0:	460e      	mov	r6, r1
 8009ce2:	b921      	cbnz	r1, 8009cee <_realloc_r+0x14>
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cea:	f7ff be0d 	b.w	8009908 <_malloc_r>
 8009cee:	b922      	cbnz	r2, 8009cfa <_realloc_r+0x20>
 8009cf0:	f7ff fdbc 	bl	800986c <_free_r>
 8009cf4:	4625      	mov	r5, r4
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfa:	f000 f821 	bl	8009d40 <_malloc_usable_size_r>
 8009cfe:	42a0      	cmp	r0, r4
 8009d00:	d20f      	bcs.n	8009d22 <_realloc_r+0x48>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff fdff 	bl	8009908 <_malloc_r>
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d0f2      	beq.n	8009cf6 <_realloc_r+0x1c>
 8009d10:	4631      	mov	r1, r6
 8009d12:	4622      	mov	r2, r4
 8009d14:	f7ff fab6 	bl	8009284 <memcpy>
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f7ff fda6 	bl	800986c <_free_r>
 8009d20:	e7e9      	b.n	8009cf6 <_realloc_r+0x1c>
 8009d22:	4635      	mov	r5, r6
 8009d24:	e7e7      	b.n	8009cf6 <_realloc_r+0x1c>

08009d26 <__ascii_wctomb>:
 8009d26:	b149      	cbz	r1, 8009d3c <__ascii_wctomb+0x16>
 8009d28:	2aff      	cmp	r2, #255	; 0xff
 8009d2a:	bf85      	ittet	hi
 8009d2c:	238a      	movhi	r3, #138	; 0x8a
 8009d2e:	6003      	strhi	r3, [r0, #0]
 8009d30:	700a      	strbls	r2, [r1, #0]
 8009d32:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d36:	bf98      	it	ls
 8009d38:	2001      	movls	r0, #1
 8009d3a:	4770      	bx	lr
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4770      	bx	lr

08009d40 <_malloc_usable_size_r>:
 8009d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d44:	1f18      	subs	r0, r3, #4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfbc      	itt	lt
 8009d4a:	580b      	ldrlt	r3, [r1, r0]
 8009d4c:	18c0      	addlt	r0, r0, r3
 8009d4e:	4770      	bx	lr

08009d50 <_init>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	bf00      	nop
 8009d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d56:	bc08      	pop	{r3}
 8009d58:	469e      	mov	lr, r3
 8009d5a:	4770      	bx	lr

08009d5c <_fini>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	bf00      	nop
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr
